function deserializeIntoGenericError(genericError = {}) {
    return {
        "code": n => { genericError.code = n.getStringValue(); },
        "message": n => { genericError.message = n.getStringValue(); },
    };
}

function deserializeIntoAccessReviewError(accessReviewError = {}) {
    return Object.assign({}, deserializeIntoGenericError(accessReviewError));
}

function deserializeIntoAccessReviewInstanceDecisionItemResource(accessReviewInstanceDecisionItemResource = {}) {
    return {
        "displayName": n => { accessReviewInstanceDecisionItemResource.displayName = n.getStringValue(); },
        "id": n => { accessReviewInstanceDecisionItemResource.id = n.getStringValue(); },
        "type": n => { accessReviewInstanceDecisionItemResource.type = n.getStringValue(); },
    };
}

function deserializeIntoAccessReviewInstanceDecisionItemTarget(accessReviewInstanceDecisionItemTarget = {}) {
    return {};
}

var DecisionItemPrincipalResourceMembershipType;
(function (DecisionItemPrincipalResourceMembershipType) {
    DecisionItemPrincipalResourceMembershipType["Direct"] = "direct";
    DecisionItemPrincipalResourceMembershipType["Indirect"] = "indirect";
    DecisionItemPrincipalResourceMembershipType["UnknownFutureValue"] = "unknownFutureValue";
})(DecisionItemPrincipalResourceMembershipType || (DecisionItemPrincipalResourceMembershipType = {}));

function deserializeIntoDecisionItemPrincipalResourceMembership(decisionItemPrincipalResourceMembership = {}) {
    return {
        "membershipType": n => { decisionItemPrincipalResourceMembership.membershipType = n.getEnumValue(DecisionItemPrincipalResourceMembershipType); },
    };
}

function deserializeIntoEntity(entity = {}) {
    return {
        "id": n => { entity.id = n.getStringValue(); },
    };
}

function deserializeIntoGovernanceInsight(governanceInsight = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(governanceInsight)), { "insightCreatedDateTime": n => { governanceInsight.insightCreatedDateTime = n.getDateValue(); } });
}

function deserializeIntoIdentity(identity = {}) {
    return {
        "displayName": n => { identity.displayName = n.getStringValue(); },
        "id": n => { identity.id = n.getStringValue(); },
    };
}

function deserializeIntoUserIdentity(userIdentity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentity(userIdentity)), { "ipAddress": n => { userIdentity.ipAddress = n.getStringValue(); }, "userPrincipalName": n => { userIdentity.userPrincipalName = n.getStringValue(); } });
}

function deserializeIntoAccessReviewInstanceDecisionItem(accessReviewInstanceDecisionItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(accessReviewInstanceDecisionItem)), { "accessReviewId": n => { accessReviewInstanceDecisionItem.accessReviewId = n.getStringValue(); }, "appliedBy": n => { accessReviewInstanceDecisionItem.appliedBy = n.getObject(deserializeIntoUserIdentity); }, "appliedDateTime": n => { accessReviewInstanceDecisionItem.appliedDateTime = n.getDateValue(); }, "applyResult": n => { accessReviewInstanceDecisionItem.applyResult = n.getStringValue(); }, "decision": n => { accessReviewInstanceDecisionItem.decision = n.getStringValue(); }, "insights": n => { accessReviewInstanceDecisionItem.insights = n.getCollectionOfObjectValuesFromMethod(deserializeIntoGovernanceInsight); }, "instance": n => { accessReviewInstanceDecisionItem.instance = n.getObject(deserializeIntoAccessReviewInstance); }, "justification": n => { accessReviewInstanceDecisionItem.justification = n.getStringValue(); }, "principal": n => { accessReviewInstanceDecisionItem.principal = n.getObject(deserializeIntoIdentity); }, "principalLink": n => { accessReviewInstanceDecisionItem.principalLink = n.getStringValue(); }, "principalResourceMembership": n => { accessReviewInstanceDecisionItem.principalResourceMembership = n.getObject(deserializeIntoDecisionItemPrincipalResourceMembership); }, "recommendation": n => { accessReviewInstanceDecisionItem.recommendation = n.getStringValue(); }, "resource": n => { accessReviewInstanceDecisionItem.resource = n.getObject(deserializeIntoAccessReviewInstanceDecisionItemResource); }, "resourceLink": n => { accessReviewInstanceDecisionItem.resourceLink = n.getStringValue(); }, "reviewedBy": n => { accessReviewInstanceDecisionItem.reviewedBy = n.getObject(deserializeIntoUserIdentity); }, "reviewedDateTime": n => { accessReviewInstanceDecisionItem.reviewedDateTime = n.getDateValue(); }, "target": n => { accessReviewInstanceDecisionItem.target = n.getObject(deserializeIntoAccessReviewInstanceDecisionItemTarget); } });
}

function deserializeIntoAccessReviewReviewer(accessReviewReviewer = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(accessReviewReviewer)), { "createdDateTime": n => { accessReviewReviewer.createdDateTime = n.getDateValue(); }, "displayName": n => { accessReviewReviewer.displayName = n.getStringValue(); }, "userPrincipalName": n => { accessReviewReviewer.userPrincipalName = n.getStringValue(); } });
}

function deserializeIntoAccessReviewScope(accessReviewScope = {}) {
    return {};
}

function deserializeIntoAccessReviewReviewerScope(accessReviewReviewerScope = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAccessReviewScope(accessReviewReviewerScope)), { "query": n => { accessReviewReviewerScope.query = n.getStringValue(); }, "queryRoot": n => { accessReviewReviewerScope.queryRoot = n.getStringValue(); }, "queryType": n => { accessReviewReviewerScope.queryType = n.getStringValue(); } });
}

function deserializeIntoAccessReviewNotificationRecipientScope(accessReviewNotificationRecipientScope = {}) {
    return {};
}

function deserializeIntoAccessReviewNotificationRecipientItem(accessReviewNotificationRecipientItem = {}) {
    return {
        "notificationRecipientScope": n => { accessReviewNotificationRecipientItem.notificationRecipientScope = n.getObject(deserializeIntoAccessReviewNotificationRecipientScope); },
        "notificationTemplateType": n => { accessReviewNotificationRecipientItem.notificationTemplateType = n.getStringValue(); },
    };
}

function deserializeIntoAccessReviewApplyAction(accessReviewApplyAction = {}) {
    return {};
}

function deserializeIntoAccessReviewRecommendationInsightSetting(accessReviewRecommendationInsightSetting = {}) {
    return {};
}

var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["Sunday"] = "sunday";
    DayOfWeek["Monday"] = "monday";
    DayOfWeek["Tuesday"] = "tuesday";
    DayOfWeek["Wednesday"] = "wednesday";
    DayOfWeek["Thursday"] = "thursday";
    DayOfWeek["Friday"] = "friday";
    DayOfWeek["Saturday"] = "saturday";
})(DayOfWeek || (DayOfWeek = {}));

var RecurrencePatternType;
(function (RecurrencePatternType) {
    RecurrencePatternType["Daily"] = "daily";
    RecurrencePatternType["Weekly"] = "weekly";
    RecurrencePatternType["AbsoluteMonthly"] = "absoluteMonthly";
    RecurrencePatternType["RelativeMonthly"] = "relativeMonthly";
    RecurrencePatternType["AbsoluteYearly"] = "absoluteYearly";
    RecurrencePatternType["RelativeYearly"] = "relativeYearly";
})(RecurrencePatternType || (RecurrencePatternType = {}));

var WeekIndex;
(function (WeekIndex) {
    WeekIndex["First"] = "first";
    WeekIndex["Second"] = "second";
    WeekIndex["Third"] = "third";
    WeekIndex["Fourth"] = "fourth";
    WeekIndex["Last"] = "last";
})(WeekIndex || (WeekIndex = {}));

function deserializeIntoRecurrencePattern(recurrencePattern = {}) {
    return {
        "dayOfMonth": n => { recurrencePattern.dayOfMonth = n.getNumberValue(); },
        "daysOfWeek": n => { recurrencePattern.daysOfWeek = n.getEnumValues(DayOfWeek); },
        "firstDayOfWeek": n => { recurrencePattern.firstDayOfWeek = n.getEnumValue(DayOfWeek); },
        "index": n => { recurrencePattern.index = n.getEnumValue(WeekIndex); },
        "interval": n => { recurrencePattern.interval = n.getNumberValue(); },
        "month": n => { recurrencePattern.month = n.getNumberValue(); },
        "type": n => { recurrencePattern.type = n.getEnumValue(RecurrencePatternType); },
    };
}

var RecurrenceRangeType;
(function (RecurrenceRangeType) {
    RecurrenceRangeType["EndDate"] = "endDate";
    RecurrenceRangeType["NoEnd"] = "noEnd";
    RecurrenceRangeType["Numbered"] = "numbered";
})(RecurrenceRangeType || (RecurrenceRangeType = {}));

function deserializeIntoRecurrenceRange(recurrenceRange = {}) {
    return {
        "endDate": n => { recurrenceRange.endDate = n.getDateOnlyValue(); },
        "numberOfOccurrences": n => { recurrenceRange.numberOfOccurrences = n.getNumberValue(); },
        "recurrenceTimeZone": n => { recurrenceRange.recurrenceTimeZone = n.getStringValue(); },
        "startDate": n => { recurrenceRange.startDate = n.getDateOnlyValue(); },
        "type": n => { recurrenceRange.type = n.getEnumValue(RecurrenceRangeType); },
    };
}

function deserializeIntoPatternedRecurrence(patternedRecurrence = {}) {
    return {
        "pattern": n => { patternedRecurrence.pattern = n.getObject(deserializeIntoRecurrencePattern); },
        "range": n => { patternedRecurrence.range = n.getObject(deserializeIntoRecurrenceRange); },
    };
}

function deserializeIntoAccessReviewScheduleSettings(accessReviewScheduleSettings = {}) {
    return {
        "applyActions": n => { accessReviewScheduleSettings.applyActions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewApplyAction); },
        "autoApplyDecisionsEnabled": n => { accessReviewScheduleSettings.autoApplyDecisionsEnabled = n.getBooleanValue(); },
        "decisionHistoriesForReviewersEnabled": n => { accessReviewScheduleSettings.decisionHistoriesForReviewersEnabled = n.getBooleanValue(); },
        "defaultDecision": n => { accessReviewScheduleSettings.defaultDecision = n.getStringValue(); },
        "defaultDecisionEnabled": n => { accessReviewScheduleSettings.defaultDecisionEnabled = n.getBooleanValue(); },
        "instanceDurationInDays": n => { accessReviewScheduleSettings.instanceDurationInDays = n.getNumberValue(); },
        "justificationRequiredOnApproval": n => { accessReviewScheduleSettings.justificationRequiredOnApproval = n.getBooleanValue(); },
        "mailNotificationsEnabled": n => { accessReviewScheduleSettings.mailNotificationsEnabled = n.getBooleanValue(); },
        "recommendationInsightSettings": n => { accessReviewScheduleSettings.recommendationInsightSettings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewRecommendationInsightSetting); },
        "recommendationLookBackDuration": n => { accessReviewScheduleSettings.recommendationLookBackDuration = n.getDurationValue(); },
        "recommendationsEnabled": n => { accessReviewScheduleSettings.recommendationsEnabled = n.getBooleanValue(); },
        "recurrence": n => { accessReviewScheduleSettings.recurrence = n.getObject(deserializeIntoPatternedRecurrence); },
        "reminderNotificationsEnabled": n => { accessReviewScheduleSettings.reminderNotificationsEnabled = n.getBooleanValue(); },
    };
}

function deserializeIntoAccessReviewStageSettings(accessReviewStageSettings = {}) {
    return {
        "decisionsThatWillMoveToNextStage": n => { accessReviewStageSettings.decisionsThatWillMoveToNextStage = n.getCollectionOfPrimitiveValues(); },
        "dependsOn": n => { accessReviewStageSettings.dependsOn = n.getCollectionOfPrimitiveValues(); },
        "durationInDays": n => { accessReviewStageSettings.durationInDays = n.getNumberValue(); },
        "fallbackReviewers": n => { accessReviewStageSettings.fallbackReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); },
        "recommendationInsightSettings": n => { accessReviewStageSettings.recommendationInsightSettings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewRecommendationInsightSetting); },
        "recommendationLookBackDuration": n => { accessReviewStageSettings.recommendationLookBackDuration = n.getDurationValue(); },
        "recommendationsEnabled": n => { accessReviewStageSettings.recommendationsEnabled = n.getBooleanValue(); },
        "reviewers": n => { accessReviewStageSettings.reviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); },
        "stageId": n => { accessReviewStageSettings.stageId = n.getStringValue(); },
    };
}

function deserializeIntoAccessReviewScheduleDefinition(accessReviewScheduleDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(accessReviewScheduleDefinition)), { "additionalNotificationRecipients": n => { accessReviewScheduleDefinition.additionalNotificationRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewNotificationRecipientItem); }, "backupReviewers": n => { accessReviewScheduleDefinition.backupReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "createdBy": n => { accessReviewScheduleDefinition.createdBy = n.getObject(deserializeIntoUserIdentity); }, "createdDateTime": n => { accessReviewScheduleDefinition.createdDateTime = n.getDateValue(); }, "descriptionForAdmins": n => { accessReviewScheduleDefinition.descriptionForAdmins = n.getStringValue(); }, "descriptionForReviewers": n => { accessReviewScheduleDefinition.descriptionForReviewers = n.getStringValue(); }, "displayName": n => { accessReviewScheduleDefinition.displayName = n.getStringValue(); }, "fallbackReviewers": n => { accessReviewScheduleDefinition.fallbackReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "instanceEnumerationScope": n => { accessReviewScheduleDefinition.instanceEnumerationScope = n.getObject(deserializeIntoAccessReviewScope); }, "instances": n => { accessReviewScheduleDefinition.instances = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewInstance); }, "lastModifiedDateTime": n => { accessReviewScheduleDefinition.lastModifiedDateTime = n.getDateValue(); }, "reviewers": n => { accessReviewScheduleDefinition.reviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "scope": n => { accessReviewScheduleDefinition.scope = n.getObject(deserializeIntoAccessReviewScope); }, "settings": n => { accessReviewScheduleDefinition.settings = n.getObject(deserializeIntoAccessReviewScheduleSettings); }, "stageSettings": n => { accessReviewScheduleDefinition.stageSettings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewStageSettings); }, "status": n => { accessReviewScheduleDefinition.status = n.getStringValue(); } });
}

function deserializeIntoAccessReviewStage(accessReviewStage = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(accessReviewStage)), { "decisions": n => { accessReviewStage.decisions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewInstanceDecisionItem); }, "endDateTime": n => { accessReviewStage.endDateTime = n.getDateValue(); }, "fallbackReviewers": n => { accessReviewStage.fallbackReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "reviewers": n => { accessReviewStage.reviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "startDateTime": n => { accessReviewStage.startDateTime = n.getDateValue(); }, "status": n => { accessReviewStage.status = n.getStringValue(); } });
}

function deserializeIntoAccessReviewInstance(accessReviewInstance = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(accessReviewInstance)), { "contactedReviewers": n => { accessReviewInstance.contactedReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewer); }, "decisions": n => { accessReviewInstance.decisions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewInstanceDecisionItem); }, "definition": n => { accessReviewInstance.definition = n.getObject(deserializeIntoAccessReviewScheduleDefinition); }, "endDateTime": n => { accessReviewInstance.endDateTime = n.getDateValue(); }, "errors": n => { accessReviewInstance.errors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewError); }, "fallbackReviewers": n => { accessReviewInstance.fallbackReviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "reviewers": n => { accessReviewInstance.reviewers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewReviewerScope); }, "scope": n => { accessReviewInstance.scope = n.getObject(deserializeIntoAccessReviewScope); }, "stages": n => { accessReviewInstance.stages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewStage); }, "startDateTime": n => { accessReviewInstance.startDateTime = n.getDateValue(); }, "status": n => { accessReviewInstance.status = n.getStringValue(); } });
}

var AgreementAcceptanceState;
(function (AgreementAcceptanceState) {
    AgreementAcceptanceState["Accepted"] = "accepted";
    AgreementAcceptanceState["Declined"] = "declined";
    AgreementAcceptanceState["UnknownFutureValue"] = "unknownFutureValue";
})(AgreementAcceptanceState || (AgreementAcceptanceState = {}));

function deserializeIntoAgreementAcceptance(agreementAcceptance = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(agreementAcceptance)), { "agreementFileId": n => { agreementAcceptance.agreementFileId = n.getStringValue(); }, "agreementId": n => { agreementAcceptance.agreementId = n.getStringValue(); }, "deviceDisplayName": n => { agreementAcceptance.deviceDisplayName = n.getStringValue(); }, "deviceId": n => { agreementAcceptance.deviceId = n.getStringValue(); }, "deviceOSType": n => { agreementAcceptance.deviceOSType = n.getStringValue(); }, "deviceOSVersion": n => { agreementAcceptance.deviceOSVersion = n.getStringValue(); }, "expirationDateTime": n => { agreementAcceptance.expirationDateTime = n.getDateValue(); }, "recordedDateTime": n => { agreementAcceptance.recordedDateTime = n.getDateValue(); }, "state": n => { agreementAcceptance.state = n.getEnumValue(AgreementAcceptanceState); }, "userDisplayName": n => { agreementAcceptance.userDisplayName = n.getStringValue(); }, "userEmail": n => { agreementAcceptance.userEmail = n.getStringValue(); }, "userId": n => { agreementAcceptance.userId = n.getStringValue(); }, "userPrincipalName": n => { agreementAcceptance.userPrincipalName = n.getStringValue(); } });
}

function deserializeIntoAppConsentRequestScope(appConsentRequestScope = {}) {
    return {
        "displayName": n => { appConsentRequestScope.displayName = n.getStringValue(); },
    };
}

function deserializeIntoApprovalStep(approvalStep = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(approvalStep)), { "assignedToMe": n => { approvalStep.assignedToMe = n.getBooleanValue(); }, "displayName": n => { approvalStep.displayName = n.getStringValue(); }, "justification": n => { approvalStep.justification = n.getStringValue(); }, "reviewedBy": n => { approvalStep.reviewedBy = n.getObject(deserializeIntoIdentity); }, "reviewedDateTime": n => { approvalStep.reviewedDateTime = n.getDateValue(); }, "reviewResult": n => { approvalStep.reviewResult = n.getStringValue(); }, "status": n => { approvalStep.status = n.getStringValue(); } });
}

function deserializeIntoApproval(approval = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(approval)), { "steps": n => { approval.steps = n.getCollectionOfObjectValuesFromMethod(deserializeIntoApprovalStep); } });
}

function deserializeIntoIdentitySet(identitySet = {}) {
    return {
        "application": n => { identitySet.application = n.getObject(deserializeIntoIdentity); },
        "device": n => { identitySet.device = n.getObject(deserializeIntoIdentity); },
        "user": n => { identitySet.user = n.getObject(deserializeIntoIdentity); },
    };
}

function deserializeIntoRequest(request = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(request)), { "approvalId": n => { request.approvalId = n.getStringValue(); }, "completedDateTime": n => { request.completedDateTime = n.getDateValue(); }, "createdBy": n => { request.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { request.createdDateTime = n.getDateValue(); }, "customData": n => { request.customData = n.getStringValue(); }, "status": n => { request.status = n.getStringValue(); } });
}

function deserializeIntoUserConsentRequest(userConsentRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoRequest(userConsentRequest)), { "approval": n => { userConsentRequest.approval = n.getObject(deserializeIntoApproval); }, "reason": n => { userConsentRequest.reason = n.getStringValue(); } });
}

function deserializeIntoAppConsentRequest(appConsentRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(appConsentRequest)), { "appDisplayName": n => { appConsentRequest.appDisplayName = n.getStringValue(); }, "appId": n => { appConsentRequest.appId = n.getStringValue(); }, "consentType": n => { appConsentRequest.consentType = n.getStringValue(); }, "pendingScopes": n => { appConsentRequest.pendingScopes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppConsentRequestScope); }, "userConsentRequests": n => { appConsentRequest.userConsentRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUserConsentRequest); } });
}

function deserializeIntoAppRoleAssignment(appRoleAssignment = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(appRoleAssignment)), { "appRoleId": n => { appRoleAssignment.appRoleId = n.getStringValue(); }, "creationTimestamp": n => { appRoleAssignment.creationTimestamp = n.getDateValue(); }, "principalDisplayName": n => { appRoleAssignment.principalDisplayName = n.getStringValue(); }, "principalId": n => { appRoleAssignment.principalId = n.getStringValue(); }, "principalType": n => { appRoleAssignment.principalType = n.getStringValue(); }, "resourceDisplayName": n => { appRoleAssignment.resourceDisplayName = n.getStringValue(); }, "resourceId": n => { appRoleAssignment.resourceId = n.getStringValue(); } });
}

function deserializeIntoAssignedLicense(assignedLicense = {}) {
    return {
        "disabledPlans": n => { assignedLicense.disabledPlans = n.getCollectionOfPrimitiveValues(); },
        "skuId": n => { assignedLicense.skuId = n.getStringValue(); },
    };
}

function deserializeIntoAssignedPlan(assignedPlan = {}) {
    return {
        "assignedDateTime": n => { assignedPlan.assignedDateTime = n.getDateValue(); },
        "capabilityStatus": n => { assignedPlan.capabilityStatus = n.getStringValue(); },
        "service": n => { assignedPlan.service = n.getStringValue(); },
        "servicePlanId": n => { assignedPlan.servicePlanId = n.getStringValue(); },
    };
}

function deserializeIntoAuthenticationMethod(authenticationMethod = {}) {
    return Object.assign({}, deserializeIntoEntity(authenticationMethod));
}

function deserializeIntoEmailAuthenticationMethod(emailAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(emailAuthenticationMethod)), { "emailAddress": n => { emailAuthenticationMethod.emailAddress = n.getStringValue(); } });
}

var AttestationLevel;
(function (AttestationLevel) {
    AttestationLevel["Attested"] = "attested";
    AttestationLevel["NotAttested"] = "notAttested";
    AttestationLevel["UnknownFutureValue"] = "unknownFutureValue";
})(AttestationLevel || (AttestationLevel = {}));

function deserializeIntoFido2AuthenticationMethod(fido2AuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(fido2AuthenticationMethod)), { "aaGuid": n => { fido2AuthenticationMethod.aaGuid = n.getStringValue(); }, "attestationCertificates": n => { fido2AuthenticationMethod.attestationCertificates = n.getCollectionOfPrimitiveValues(); }, "attestationLevel": n => { fido2AuthenticationMethod.attestationLevel = n.getEnumValue(AttestationLevel); }, "createdDateTime": n => { fido2AuthenticationMethod.createdDateTime = n.getDateValue(); }, "creationDateTime": n => { fido2AuthenticationMethod.creationDateTime = n.getDateValue(); }, "displayName": n => { fido2AuthenticationMethod.displayName = n.getStringValue(); }, "model": n => { fido2AuthenticationMethod.model = n.getStringValue(); } });
}

var LongRunningOperationStatus;
(function (LongRunningOperationStatus) {
    LongRunningOperationStatus["NotStarted"] = "notStarted";
    LongRunningOperationStatus["Running"] = "running";
    LongRunningOperationStatus["Succeeded"] = "succeeded";
    LongRunningOperationStatus["Failed"] = "failed";
    LongRunningOperationStatus["UnknownFutureValue"] = "unknownFutureValue";
})(LongRunningOperationStatus || (LongRunningOperationStatus = {}));

function deserializeIntoLongRunningOperation(longRunningOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(longRunningOperation)), { "createdDateTime": n => { longRunningOperation.createdDateTime = n.getDateValue(); }, "lastActionDateTime": n => { longRunningOperation.lastActionDateTime = n.getDateValue(); }, "resourceLocation": n => { longRunningOperation.resourceLocation = n.getStringValue(); }, "status": n => { longRunningOperation.status = n.getEnumValue(LongRunningOperationStatus); }, "statusDetail": n => { longRunningOperation.statusDetail = n.getStringValue(); } });
}

function deserializeIntoAlternativeSecurityId(alternativeSecurityId = {}) {
    return {
        "identityProvider": n => { alternativeSecurityId.identityProvider = n.getStringValue(); },
        "key": n => { alternativeSecurityId.key = n.getStringValue(); },
        "type": n => { alternativeSecurityId.type = n.getNumberValue(); },
    };
}

function deserializeIntoPayloadRequest(payloadRequest = {}) {
    return {};
}

function deserializeIntoPayloadResponse(payloadResponse = {}) {
    return Object.assign({}, deserializeIntoEntity(payloadResponse));
}

function deserializeIntoCommand(command = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(command)), { "appServiceName": n => { command.appServiceName = n.getStringValue(); }, "error": n => { command.error_escaped = n.getStringValue(); }, "packageFamilyName": n => { command.packageFamilyName = n.getStringValue(); }, "payload": n => { command.payload = n.getObject(deserializeIntoPayloadRequest); }, "permissionTicket": n => { command.permissionTicket = n.getStringValue(); }, "postBackUri": n => { command.postBackUri = n.getStringValue(); }, "responsepayload": n => { command.responsepayload = n.getObject(deserializeIntoPayloadResponse); }, "status": n => { command.status = n.getStringValue(); }, "type": n => { command.type = n.getStringValue(); } });
}

function deserializeIntoDirectoryObject(directoryObject = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(directoryObject)), { "deletedDateTime": n => { directoryObject.deletedDateTime = n.getDateValue(); } });
}

function deserializeIntoExtension(extension = {}) {
    return Object.assign({}, deserializeIntoEntity(extension));
}

function deserializeIntoOnPremisesExtensionAttributes(onPremisesExtensionAttributes = {}) {
    return {
        "extensionAttribute1": n => { onPremisesExtensionAttributes.extensionAttribute1 = n.getStringValue(); },
        "extensionAttribute10": n => { onPremisesExtensionAttributes.extensionAttribute10 = n.getStringValue(); },
        "extensionAttribute11": n => { onPremisesExtensionAttributes.extensionAttribute11 = n.getStringValue(); },
        "extensionAttribute12": n => { onPremisesExtensionAttributes.extensionAttribute12 = n.getStringValue(); },
        "extensionAttribute13": n => { onPremisesExtensionAttributes.extensionAttribute13 = n.getStringValue(); },
        "extensionAttribute14": n => { onPremisesExtensionAttributes.extensionAttribute14 = n.getStringValue(); },
        "extensionAttribute15": n => { onPremisesExtensionAttributes.extensionAttribute15 = n.getStringValue(); },
        "extensionAttribute2": n => { onPremisesExtensionAttributes.extensionAttribute2 = n.getStringValue(); },
        "extensionAttribute3": n => { onPremisesExtensionAttributes.extensionAttribute3 = n.getStringValue(); },
        "extensionAttribute4": n => { onPremisesExtensionAttributes.extensionAttribute4 = n.getStringValue(); },
        "extensionAttribute5": n => { onPremisesExtensionAttributes.extensionAttribute5 = n.getStringValue(); },
        "extensionAttribute6": n => { onPremisesExtensionAttributes.extensionAttribute6 = n.getStringValue(); },
        "extensionAttribute7": n => { onPremisesExtensionAttributes.extensionAttribute7 = n.getStringValue(); },
        "extensionAttribute8": n => { onPremisesExtensionAttributes.extensionAttribute8 = n.getStringValue(); },
        "extensionAttribute9": n => { onPremisesExtensionAttributes.extensionAttribute9 = n.getStringValue(); },
    };
}

var UsageRightState;
(function (UsageRightState) {
    UsageRightState["Active"] = "active";
    UsageRightState["Inactive"] = "inactive";
    UsageRightState["Warning"] = "warning";
    UsageRightState["Suspended"] = "suspended";
    UsageRightState["UnknownFutureValue"] = "unknownFutureValue";
})(UsageRightState || (UsageRightState = {}));

function deserializeIntoUsageRight(usageRight = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(usageRight)), { "catalogId": n => { usageRight.catalogId = n.getStringValue(); }, "serviceIdentifier": n => { usageRight.serviceIdentifier = n.getStringValue(); }, "state": n => { usageRight.state = n.getEnumValue(UsageRightState); } });
}

function deserializeIntoDevice(device = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(device)), { "accountEnabled": n => { device.accountEnabled = n.getBooleanValue(); }, "alternativeSecurityIds": n => { device.alternativeSecurityIds = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAlternativeSecurityId); }, "approximateLastSignInDateTime": n => { device.approximateLastSignInDateTime = n.getDateValue(); }, "commands": n => { device.commands = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCommand); }, "complianceExpirationDateTime": n => { device.complianceExpirationDateTime = n.getDateValue(); }, "deviceCategory": n => { device.deviceCategory = n.getStringValue(); }, "deviceId": n => { device.deviceId = n.getStringValue(); }, "deviceMetadata": n => { device.deviceMetadata = n.getStringValue(); }, "deviceOwnership": n => { device.deviceOwnership = n.getStringValue(); }, "deviceVersion": n => { device.deviceVersion = n.getNumberValue(); }, "displayName": n => { device.displayName = n.getStringValue(); }, "domainName": n => { device.domainName = n.getStringValue(); }, "enrollmentProfileName": n => { device.enrollmentProfileName = n.getStringValue(); }, "enrollmentType": n => { device.enrollmentType = n.getStringValue(); }, "extensionAttributes": n => { device.extensionAttributes = n.getObject(deserializeIntoOnPremisesExtensionAttributes); }, "extensions": n => { device.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "hostnames": n => { device.hostnames = n.getCollectionOfPrimitiveValues(); }, "isCompliant": n => { device.isCompliant = n.getBooleanValue(); }, "isManaged": n => { device.isManaged = n.getBooleanValue(); }, "isManagementRestricted": n => { device.isManagementRestricted = n.getBooleanValue(); }, "isRooted": n => { device.isRooted = n.getBooleanValue(); }, "kind": n => { device.kind = n.getStringValue(); }, "managementType": n => { device.managementType = n.getStringValue(); }, "manufacturer": n => { device.manufacturer = n.getStringValue(); }, "mdmAppId": n => { device.mdmAppId = n.getStringValue(); }, "memberOf": n => { device.memberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "model": n => { device.model = n.getStringValue(); }, "name": n => { device.name = n.getStringValue(); }, "onPremisesLastSyncDateTime": n => { device.onPremisesLastSyncDateTime = n.getDateValue(); }, "onPremisesSyncEnabled": n => { device.onPremisesSyncEnabled = n.getBooleanValue(); }, "operatingSystem": n => { device.operatingSystem = n.getStringValue(); }, "operatingSystemVersion": n => { device.operatingSystemVersion = n.getStringValue(); }, "physicalIds": n => { device.physicalIds = n.getCollectionOfPrimitiveValues(); }, "platform": n => { device.platform = n.getStringValue(); }, "profileType": n => { device.profileType = n.getStringValue(); }, "registeredOwners": n => { device.registeredOwners = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "registeredUsers": n => { device.registeredUsers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "registrationDateTime": n => { device.registrationDateTime = n.getDateValue(); }, "status": n => { device.status = n.getStringValue(); }, "systemLabels": n => { device.systemLabels = n.getCollectionOfPrimitiveValues(); }, "transitiveMemberOf": n => { device.transitiveMemberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "trustType": n => { device.trustType = n.getStringValue(); }, "usageRights": n => { device.usageRights = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUsageRight); } });
}

function deserializeIntoMicrosoftAuthenticatorAuthenticationMethod(microsoftAuthenticatorAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(microsoftAuthenticatorAuthenticationMethod)), { "createdDateTime": n => { microsoftAuthenticatorAuthenticationMethod.createdDateTime = n.getDateValue(); }, "device": n => { microsoftAuthenticatorAuthenticationMethod.device = n.getObject(deserializeIntoDevice); }, "deviceTag": n => { microsoftAuthenticatorAuthenticationMethod.deviceTag = n.getStringValue(); }, "displayName": n => { microsoftAuthenticatorAuthenticationMethod.displayName = n.getStringValue(); }, "phoneAppVersion": n => { microsoftAuthenticatorAuthenticationMethod.phoneAppVersion = n.getStringValue(); } });
}

function deserializeIntoPasswordAuthenticationMethod(passwordAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(passwordAuthenticationMethod)), { "createdDateTime": n => { passwordAuthenticationMethod.createdDateTime = n.getDateValue(); }, "creationDateTime": n => { passwordAuthenticationMethod.creationDateTime = n.getDateValue(); }, "password": n => { passwordAuthenticationMethod.password = n.getStringValue(); } });
}

function deserializeIntoPasswordlessMicrosoftAuthenticatorAuthenticationMethod(passwordlessMicrosoftAuthenticatorAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(passwordlessMicrosoftAuthenticatorAuthenticationMethod)), { "createdDateTime": n => { passwordlessMicrosoftAuthenticatorAuthenticationMethod.createdDateTime = n.getDateValue(); }, "creationDateTime": n => { passwordlessMicrosoftAuthenticatorAuthenticationMethod.creationDateTime = n.getDateValue(); }, "device": n => { passwordlessMicrosoftAuthenticatorAuthenticationMethod.device = n.getObject(deserializeIntoDevice); }, "displayName": n => { passwordlessMicrosoftAuthenticatorAuthenticationMethod.displayName = n.getStringValue(); } });
}

var AuthenticationMethodSignInState;
(function (AuthenticationMethodSignInState) {
    AuthenticationMethodSignInState["NotSupported"] = "notSupported";
    AuthenticationMethodSignInState["NotAllowedByPolicy"] = "notAllowedByPolicy";
    AuthenticationMethodSignInState["NotEnabled"] = "notEnabled";
    AuthenticationMethodSignInState["PhoneNumberNotUnique"] = "phoneNumberNotUnique";
    AuthenticationMethodSignInState["Ready"] = "ready";
    AuthenticationMethodSignInState["NotConfigured"] = "notConfigured";
    AuthenticationMethodSignInState["UnknownFutureValue"] = "unknownFutureValue";
})(AuthenticationMethodSignInState || (AuthenticationMethodSignInState = {}));

var AuthenticationPhoneType;
(function (AuthenticationPhoneType) {
    AuthenticationPhoneType["Mobile"] = "mobile";
    AuthenticationPhoneType["AlternateMobile"] = "alternateMobile";
    AuthenticationPhoneType["Office"] = "office";
    AuthenticationPhoneType["UnknownFutureValue"] = "unknownFutureValue";
})(AuthenticationPhoneType || (AuthenticationPhoneType = {}));

function deserializeIntoPhoneAuthenticationMethod(phoneAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(phoneAuthenticationMethod)), { "phoneNumber": n => { phoneAuthenticationMethod.phoneNumber = n.getStringValue(); }, "phoneType": n => { phoneAuthenticationMethod.phoneType = n.getEnumValue(AuthenticationPhoneType); }, "smsSignInState": n => { phoneAuthenticationMethod.smsSignInState = n.getEnumValue(AuthenticationMethodSignInState); } });
}

function deserializeIntoSoftwareOathAuthenticationMethod(softwareOathAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(softwareOathAuthenticationMethod)), { "secretKey": n => { softwareOathAuthenticationMethod.secretKey = n.getStringValue(); } });
}

function deserializeIntoTemporaryAccessPassAuthenticationMethod(temporaryAccessPassAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(temporaryAccessPassAuthenticationMethod)), { "createdDateTime": n => { temporaryAccessPassAuthenticationMethod.createdDateTime = n.getDateValue(); }, "isUsable": n => { temporaryAccessPassAuthenticationMethod.isUsable = n.getBooleanValue(); }, "isUsableOnce": n => { temporaryAccessPassAuthenticationMethod.isUsableOnce = n.getBooleanValue(); }, "lifetimeInMinutes": n => { temporaryAccessPassAuthenticationMethod.lifetimeInMinutes = n.getNumberValue(); }, "methodUsabilityReason": n => { temporaryAccessPassAuthenticationMethod.methodUsabilityReason = n.getStringValue(); }, "startDateTime": n => { temporaryAccessPassAuthenticationMethod.startDateTime = n.getDateValue(); }, "temporaryAccessPass": n => { temporaryAccessPassAuthenticationMethod.temporaryAccessPass = n.getStringValue(); } });
}

var AuthenticationMethodKeyStrength;
(function (AuthenticationMethodKeyStrength) {
    AuthenticationMethodKeyStrength["Normal"] = "normal";
    AuthenticationMethodKeyStrength["Weak"] = "weak";
    AuthenticationMethodKeyStrength["Unknown"] = "unknown";
})(AuthenticationMethodKeyStrength || (AuthenticationMethodKeyStrength = {}));

function deserializeIntoWindowsHelloForBusinessAuthenticationMethod(windowsHelloForBusinessAuthenticationMethod = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAuthenticationMethod(windowsHelloForBusinessAuthenticationMethod)), { "createdDateTime": n => { windowsHelloForBusinessAuthenticationMethod.createdDateTime = n.getDateValue(); }, "device": n => { windowsHelloForBusinessAuthenticationMethod.device = n.getObject(deserializeIntoDevice); }, "displayName": n => { windowsHelloForBusinessAuthenticationMethod.displayName = n.getStringValue(); }, "keyStrength": n => { windowsHelloForBusinessAuthenticationMethod.keyStrength = n.getEnumValue(AuthenticationMethodKeyStrength); } });
}

function deserializeIntoAuthentication(authentication = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(authentication)), { "emailMethods": n => { authentication.emailMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEmailAuthenticationMethod); }, "fido2Methods": n => { authentication.fido2Methods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFido2AuthenticationMethod); }, "methods": n => { authentication.methods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAuthenticationMethod); }, "microsoftAuthenticatorMethods": n => { authentication.microsoftAuthenticatorMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMicrosoftAuthenticatorAuthenticationMethod); }, "operations": n => { authentication.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLongRunningOperation); }, "passwordlessMicrosoftAuthenticatorMethods": n => { authentication.passwordlessMicrosoftAuthenticatorMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPasswordlessMicrosoftAuthenticatorAuthenticationMethod); }, "passwordMethods": n => { authentication.passwordMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPasswordAuthenticationMethod); }, "phoneMethods": n => { authentication.phoneMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPhoneAuthenticationMethod); }, "softwareOathMethods": n => { authentication.softwareOathMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSoftwareOathAuthenticationMethod); }, "temporaryAccessPassMethods": n => { authentication.temporaryAccessPassMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTemporaryAccessPassAuthenticationMethod); }, "windowsHelloForBusinessMethods": n => { authentication.windowsHelloForBusinessMethods = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWindowsHelloForBusinessAuthenticationMethod); } });
}

function deserializeIntoAuthorizationInfo(authorizationInfo = {}) {
    return {
        "certificateUserIds": n => { authorizationInfo.certificateUserIds = n.getCollectionOfPrimitiveValues(); },
    };
}

var CalendarColor;
(function (CalendarColor) {
    CalendarColor["Auto"] = "auto";
    CalendarColor["LightBlue"] = "lightBlue";
    CalendarColor["LightGreen"] = "lightGreen";
    CalendarColor["LightOrange"] = "lightOrange";
    CalendarColor["LightGray"] = "lightGray";
    CalendarColor["LightYellow"] = "lightYellow";
    CalendarColor["LightTeal"] = "lightTeal";
    CalendarColor["LightPink"] = "lightPink";
    CalendarColor["LightBrown"] = "lightBrown";
    CalendarColor["LightRed"] = "lightRed";
    CalendarColor["MaxColor"] = "maxColor";
})(CalendarColor || (CalendarColor = {}));

var CalendarRoleType;
(function (CalendarRoleType) {
    CalendarRoleType["None"] = "none";
    CalendarRoleType["FreeBusyRead"] = "freeBusyRead";
    CalendarRoleType["LimitedRead"] = "limitedRead";
    CalendarRoleType["Read"] = "read";
    CalendarRoleType["Write"] = "write";
    CalendarRoleType["DelegateWithoutPrivateEventAccess"] = "delegateWithoutPrivateEventAccess";
    CalendarRoleType["DelegateWithPrivateEventAccess"] = "delegateWithPrivateEventAccess";
    CalendarRoleType["Custom"] = "custom";
})(CalendarRoleType || (CalendarRoleType = {}));

function deserializeIntoEmailAddress(emailAddress = {}) {
    return {
        "address": n => { emailAddress.address = n.getStringValue(); },
        "name": n => { emailAddress.name = n.getStringValue(); },
    };
}

function deserializeIntoCalendarPermission(calendarPermission = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(calendarPermission)), { "allowedRoles": n => { calendarPermission.allowedRoles = n.getEnumValues(CalendarRoleType); }, "emailAddress": n => { calendarPermission.emailAddress = n.getObject(deserializeIntoEmailAddress); }, "isInsideOrganization": n => { calendarPermission.isInsideOrganization = n.getBooleanValue(); }, "isRemovable": n => { calendarPermission.isRemovable = n.getBooleanValue(); }, "role": n => { calendarPermission.role = n.getEnumValue(CalendarRoleType); } });
}

function deserializeIntoAttachment(attachment = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(attachment)), { "contentType": n => { attachment.contentType = n.getStringValue(); }, "isInline": n => { attachment.isInline = n.getBooleanValue(); }, "lastModifiedDateTime": n => { attachment.lastModifiedDateTime = n.getDateValue(); }, "name": n => { attachment.name = n.getStringValue(); }, "size": n => { attachment.size = n.getNumberValue(); } });
}

var AttendeeType;
(function (AttendeeType) {
    AttendeeType["Required"] = "required";
    AttendeeType["Optional"] = "optional";
    AttendeeType["Resource"] = "resource";
})(AttendeeType || (AttendeeType = {}));

function deserializeIntoRecipient(recipient = {}) {
    return {
        "emailAddress": n => { recipient.emailAddress = n.getObject(deserializeIntoEmailAddress); },
    };
}

function deserializeIntoAttendeeBase(attendeeBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoRecipient(attendeeBase)), { "type": n => { attendeeBase.type = n.getEnumValue(AttendeeType); } });
}

var ResponseType;
(function (ResponseType) {
    ResponseType["None"] = "none";
    ResponseType["Organizer"] = "organizer";
    ResponseType["TentativelyAccepted"] = "tentativelyAccepted";
    ResponseType["Accepted"] = "accepted";
    ResponseType["Declined"] = "declined";
    ResponseType["NotResponded"] = "notResponded";
})(ResponseType || (ResponseType = {}));

function deserializeIntoResponseStatus(responseStatus = {}) {
    return {
        "response": n => { responseStatus.response = n.getEnumValue(ResponseType); },
        "time": n => { responseStatus.time = n.getDateValue(); },
    };
}

function deserializeIntoDateTimeTimeZone(dateTimeTimeZone = {}) {
    return {
        "dateTime": n => { dateTimeTimeZone.dateTime = n.getStringValue(); },
        "timeZone": n => { dateTimeTimeZone.timeZone = n.getStringValue(); },
    };
}

function deserializeIntoTimeSlot(timeSlot = {}) {
    return {
        "end": n => { timeSlot.end = n.getObject(deserializeIntoDateTimeTimeZone); },
        "start": n => { timeSlot.start = n.getObject(deserializeIntoDateTimeTimeZone); },
    };
}

function deserializeIntoAttendee(attendee = {}) {
    return Object.assign(Object.assign({}, deserializeIntoAttendeeBase(attendee)), { "proposedNewTime": n => { attendee.proposedNewTime = n.getObject(deserializeIntoTimeSlot); }, "status": n => { attendee.status = n.getObject(deserializeIntoResponseStatus); } });
}

var BodyType;
(function (BodyType) {
    BodyType["Text"] = "text";
    BodyType["Html"] = "html";
})(BodyType || (BodyType = {}));

function deserializeIntoItemBody(itemBody = {}) {
    return {
        "content": n => { itemBody.content = n.getStringValue(); },
        "contentType": n => { itemBody.contentType = n.getEnumValue(BodyType); },
    };
}

function deserializeIntoOutlookGeoCoordinates(outlookGeoCoordinates = {}) {
    return {
        "accuracy": n => { outlookGeoCoordinates.accuracy = n.getNumberValue(); },
        "altitude": n => { outlookGeoCoordinates.altitude = n.getNumberValue(); },
        "altitudeAccuracy": n => { outlookGeoCoordinates.altitudeAccuracy = n.getNumberValue(); },
        "latitude": n => { outlookGeoCoordinates.latitude = n.getNumberValue(); },
        "longitude": n => { outlookGeoCoordinates.longitude = n.getNumberValue(); },
    };
}

var PhysicalAddressType;
(function (PhysicalAddressType) {
    PhysicalAddressType["Unknown"] = "unknown";
    PhysicalAddressType["Home"] = "home";
    PhysicalAddressType["Business"] = "business";
    PhysicalAddressType["Other"] = "other";
})(PhysicalAddressType || (PhysicalAddressType = {}));

function deserializeIntoPhysicalAddress(physicalAddress = {}) {
    return {
        "city": n => { physicalAddress.city = n.getStringValue(); },
        "countryOrRegion": n => { physicalAddress.countryOrRegion = n.getStringValue(); },
        "postalCode": n => { physicalAddress.postalCode = n.getStringValue(); },
        "postOfficeBox": n => { physicalAddress.postOfficeBox = n.getStringValue(); },
        "state": n => { physicalAddress.state = n.getStringValue(); },
        "street": n => { physicalAddress.street = n.getStringValue(); },
        "type": n => { physicalAddress.type = n.getEnumValue(PhysicalAddressType); },
    };
}

var LocationType;
(function (LocationType) {
    LocationType["Default_escaped"] = "default";
    LocationType["ConferenceRoom"] = "conferenceRoom";
    LocationType["HomeAddress"] = "homeAddress";
    LocationType["BusinessAddress"] = "businessAddress";
    LocationType["GeoCoordinates"] = "geoCoordinates";
    LocationType["StreetAddress"] = "streetAddress";
    LocationType["Hotel"] = "hotel";
    LocationType["Restaurant"] = "restaurant";
    LocationType["LocalBusiness"] = "localBusiness";
    LocationType["PostalAddress"] = "postalAddress";
})(LocationType || (LocationType = {}));

var LocationUniqueIdType;
(function (LocationUniqueIdType) {
    LocationUniqueIdType["Unknown"] = "unknown";
    LocationUniqueIdType["LocationStore"] = "locationStore";
    LocationUniqueIdType["Directory"] = "directory";
    LocationUniqueIdType["Private"] = "private";
    LocationUniqueIdType["Bing"] = "bing";
})(LocationUniqueIdType || (LocationUniqueIdType = {}));

function deserializeIntoLocation(location = {}) {
    return {
        "address": n => { location.address = n.getObject(deserializeIntoPhysicalAddress); },
        "coordinates": n => { location.coordinates = n.getObject(deserializeIntoOutlookGeoCoordinates); },
        "displayName": n => { location.displayName = n.getStringValue(); },
        "locationEmailAddress": n => { location.locationEmailAddress = n.getStringValue(); },
        "locationType": n => { location.locationType = n.getEnumValue(LocationType); },
        "locationUri": n => { location.locationUri = n.getStringValue(); },
        "uniqueId": n => { location.uniqueId = n.getStringValue(); },
        "uniqueIdType": n => { location.uniqueIdType = n.getEnumValue(LocationUniqueIdType); },
    };
}

function deserializeIntoMultiValueLegacyExtendedProperty(multiValueLegacyExtendedProperty = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(multiValueLegacyExtendedProperty)), { "value": n => { multiValueLegacyExtendedProperty.value = n.getCollectionOfPrimitiveValues(); } });
}

var PhoneType;
(function (PhoneType) {
    PhoneType["Home"] = "home";
    PhoneType["Business"] = "business";
    PhoneType["Mobile"] = "mobile";
    PhoneType["Other"] = "other";
    PhoneType["Assistant"] = "assistant";
    PhoneType["HomeFax"] = "homeFax";
    PhoneType["BusinessFax"] = "businessFax";
    PhoneType["OtherFax"] = "otherFax";
    PhoneType["Pager"] = "pager";
    PhoneType["Radio"] = "radio";
})(PhoneType || (PhoneType = {}));

function deserializeIntoPhone(phone = {}) {
    return {
        "number": n => { phone.number = n.getStringValue(); },
        "type": n => { phone.type = n.getEnumValue(PhoneType); },
    };
}

function deserializeIntoOnlineMeetingInfo(onlineMeetingInfo = {}) {
    return {
        "conferenceId": n => { onlineMeetingInfo.conferenceId = n.getStringValue(); },
        "joinUrl": n => { onlineMeetingInfo.joinUrl = n.getStringValue(); },
        "phones": n => { onlineMeetingInfo.phones = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPhone); },
        "quickDial": n => { onlineMeetingInfo.quickDial = n.getStringValue(); },
        "tollFreeNumbers": n => { onlineMeetingInfo.tollFreeNumbers = n.getCollectionOfPrimitiveValues(); },
        "tollNumber": n => { onlineMeetingInfo.tollNumber = n.getStringValue(); },
    };
}

function deserializeIntoOutlookItem(outlookItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(outlookItem)), { "categories": n => { outlookItem.categories = n.getCollectionOfPrimitiveValues(); }, "changeKey": n => { outlookItem.changeKey = n.getStringValue(); }, "createdDateTime": n => { outlookItem.createdDateTime = n.getDateValue(); }, "lastModifiedDateTime": n => { outlookItem.lastModifiedDateTime = n.getDateValue(); } });
}

function deserializeIntoSingleValueLegacyExtendedProperty(singleValueLegacyExtendedProperty = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(singleValueLegacyExtendedProperty)), { "value": n => { singleValueLegacyExtendedProperty.value = n.getStringValue(); } });
}

var EventType;
(function (EventType) {
    EventType["SingleInstance"] = "singleInstance";
    EventType["Occurrence"] = "occurrence";
    EventType["Exception"] = "exception";
    EventType["SeriesMaster"] = "seriesMaster";
})(EventType || (EventType = {}));

var FreeBusyStatus;
(function (FreeBusyStatus) {
    FreeBusyStatus["Unknown"] = "unknown";
    FreeBusyStatus["Free"] = "free";
    FreeBusyStatus["Tentative"] = "tentative";
    FreeBusyStatus["Busy"] = "busy";
    FreeBusyStatus["Oof"] = "oof";
    FreeBusyStatus["WorkingElsewhere"] = "workingElsewhere";
})(FreeBusyStatus || (FreeBusyStatus = {}));

var Importance;
(function (Importance) {
    Importance["Low"] = "low";
    Importance["Normal"] = "normal";
    Importance["High"] = "high";
})(Importance || (Importance = {}));

var OnlineMeetingProviderType;
(function (OnlineMeetingProviderType) {
    OnlineMeetingProviderType["Unknown"] = "unknown";
    OnlineMeetingProviderType["SkypeForBusiness"] = "skypeForBusiness";
    OnlineMeetingProviderType["SkypeForConsumer"] = "skypeForConsumer";
    OnlineMeetingProviderType["TeamsForBusiness"] = "teamsForBusiness";
})(OnlineMeetingProviderType || (OnlineMeetingProviderType = {}));

var Sensitivity;
(function (Sensitivity) {
    Sensitivity["Normal"] = "normal";
    Sensitivity["Personal"] = "personal";
    Sensitivity["Private"] = "private";
    Sensitivity["Confidential"] = "confidential";
})(Sensitivity || (Sensitivity = {}));

function deserializeIntoEvent(event = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOutlookItem(event)), { "allowNewTimeProposals": n => { event.allowNewTimeProposals = n.getBooleanValue(); }, "attachments": n => { event.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachment); }, "attendees": n => { event.attendees = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttendee); }, "body": n => { event.body = n.getObject(deserializeIntoItemBody); }, "bodyPreview": n => { event.bodyPreview = n.getStringValue(); }, "calendar": n => { event.calendar = n.getObject(deserializeIntoCalendar); }, "cancelledOccurrences": n => { event.cancelledOccurrences = n.getCollectionOfPrimitiveValues(); }, "end": n => { event.end = n.getObject(deserializeIntoDateTimeTimeZone); }, "exceptionOccurrences": n => { event.exceptionOccurrences = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "extensions": n => { event.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "hasAttachments": n => { event.hasAttachments = n.getBooleanValue(); }, "hideAttendees": n => { event.hideAttendees = n.getBooleanValue(); }, "importance": n => { event.importance = n.getEnumValue(Importance); }, "instances": n => { event.instances = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "isAllDay": n => { event.isAllDay = n.getBooleanValue(); }, "isCancelled": n => { event.isCancelled = n.getBooleanValue(); }, "isDraft": n => { event.isDraft = n.getBooleanValue(); }, "isOnlineMeeting": n => { event.isOnlineMeeting = n.getBooleanValue(); }, "isOrganizer": n => { event.isOrganizer = n.getBooleanValue(); }, "isReminderOn": n => { event.isReminderOn = n.getBooleanValue(); }, "location": n => { event.location = n.getObject(deserializeIntoLocation); }, "locations": n => { event.locations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocation); }, "multiValueExtendedProperties": n => { event.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "occurrenceId": n => { event.occurrenceId = n.getStringValue(); }, "onlineMeeting": n => { event.onlineMeeting = n.getObject(deserializeIntoOnlineMeetingInfo); }, "onlineMeetingProvider": n => { event.onlineMeetingProvider = n.getEnumValue(OnlineMeetingProviderType); }, "onlineMeetingUrl": n => { event.onlineMeetingUrl = n.getStringValue(); }, "organizer": n => { event.organizer = n.getObject(deserializeIntoRecipient); }, "originalEndTimeZone": n => { event.originalEndTimeZone = n.getStringValue(); }, "originalStart": n => { event.originalStart = n.getDateValue(); }, "originalStartTimeZone": n => { event.originalStartTimeZone = n.getStringValue(); }, "recurrence": n => { event.recurrence = n.getObject(deserializeIntoPatternedRecurrence); }, "reminderMinutesBeforeStart": n => { event.reminderMinutesBeforeStart = n.getNumberValue(); }, "responseRequested": n => { event.responseRequested = n.getBooleanValue(); }, "responseStatus": n => { event.responseStatus = n.getObject(deserializeIntoResponseStatus); }, "sensitivity": n => { event.sensitivity = n.getEnumValue(Sensitivity); }, "seriesMasterId": n => { event.seriesMasterId = n.getStringValue(); }, "showAs": n => { event.showAs = n.getEnumValue(FreeBusyStatus); }, "singleValueExtendedProperties": n => { event.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "start": n => { event.start = n.getObject(deserializeIntoDateTimeTimeZone); }, "subject": n => { event.subject = n.getStringValue(); }, "transactionId": n => { event.transactionId = n.getStringValue(); }, "type": n => { event.type = n.getEnumValue(EventType); }, "uid": n => { event.uid = n.getStringValue(); }, "webLink": n => { event.webLink = n.getStringValue(); } });
}

function deserializeIntoCalendar(calendar = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(calendar)), { "allowedOnlineMeetingProviders": n => { calendar.allowedOnlineMeetingProviders = n.getEnumValues(OnlineMeetingProviderType); }, "calendarGroupId": n => { calendar.calendarGroupId = n.getStringValue(); }, "calendarPermissions": n => { calendar.calendarPermissions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCalendarPermission); }, "calendarView": n => { calendar.calendarView = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "canEdit": n => { calendar.canEdit = n.getBooleanValue(); }, "canShare": n => { calendar.canShare = n.getBooleanValue(); }, "canViewPrivateItems": n => { calendar.canViewPrivateItems = n.getBooleanValue(); }, "changeKey": n => { calendar.changeKey = n.getStringValue(); }, "color": n => { calendar.color = n.getEnumValue(CalendarColor); }, "defaultOnlineMeetingProvider": n => { calendar.defaultOnlineMeetingProvider = n.getEnumValue(OnlineMeetingProviderType); }, "events": n => { calendar.events = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "hexColor": n => { calendar.hexColor = n.getStringValue(); }, "isDefaultCalendar": n => { calendar.isDefaultCalendar = n.getBooleanValue(); }, "isRemovable": n => { calendar.isRemovable = n.getBooleanValue(); }, "isShared": n => { calendar.isShared = n.getBooleanValue(); }, "isSharedWithMe": n => { calendar.isSharedWithMe = n.getBooleanValue(); }, "isTallyingResponses": n => { calendar.isTallyingResponses = n.getBooleanValue(); }, "multiValueExtendedProperties": n => { calendar.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "name": n => { calendar.name = n.getStringValue(); }, "owner": n => { calendar.owner = n.getObject(deserializeIntoEmailAddress); }, "singleValueExtendedProperties": n => { calendar.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); } });
}

function deserializeIntoCalendarGroup(calendarGroup = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(calendarGroup)), { "calendars": n => { calendarGroup.calendars = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCalendar); }, "changeKey": n => { calendarGroup.changeKey = n.getStringValue(); }, "classId": n => { calendarGroup.classId = n.getStringValue(); }, "name": n => { calendarGroup.name = n.getStringValue(); } });
}

var ChatType;
(function (ChatType) {
    ChatType["OneOnOne"] = "oneOnOne";
    ChatType["Group"] = "group";
    ChatType["Meeting"] = "meeting";
    ChatType["UnknownFutureValue"] = "unknownFutureValue";
})(ChatType || (ChatType = {}));

var ChatMessageImportance;
(function (ChatMessageImportance) {
    ChatMessageImportance["Normal"] = "normal";
    ChatMessageImportance["High"] = "high";
    ChatMessageImportance["Urgent"] = "urgent";
})(ChatMessageImportance || (ChatMessageImportance = {}));

var ChatMessageType;
(function (ChatMessageType) {
    ChatMessageType["Message"] = "message";
    ChatMessageType["ChatEvent"] = "chatEvent";
    ChatMessageType["Typing"] = "typing";
    ChatMessageType["UnknownFutureValue"] = "unknownFutureValue";
    ChatMessageType["SystemEventMessage"] = "systemEventMessage";
})(ChatMessageType || (ChatMessageType = {}));

function deserializeIntoChannelIdentity(channelIdentity = {}) {
    return {
        "channelId": n => { channelIdentity.channelId = n.getStringValue(); },
        "teamId": n => { channelIdentity.teamId = n.getStringValue(); },
    };
}

function deserializeIntoChatMessageAttachment(chatMessageAttachment = {}) {
    return {
        "content": n => { chatMessageAttachment.content = n.getStringValue(); },
        "contentType": n => { chatMessageAttachment.contentType = n.getStringValue(); },
        "contentUrl": n => { chatMessageAttachment.contentUrl = n.getStringValue(); },
        "id": n => { chatMessageAttachment.id = n.getStringValue(); },
        "name": n => { chatMessageAttachment.name = n.getStringValue(); },
        "teamsAppId": n => { chatMessageAttachment.teamsAppId = n.getStringValue(); },
        "thumbnailUrl": n => { chatMessageAttachment.thumbnailUrl = n.getStringValue(); },
    };
}

function deserializeIntoChatMessageFromIdentitySet(chatMessageFromIdentitySet = {}) {
    return Object.assign({}, deserializeIntoIdentitySet(chatMessageFromIdentitySet));
}

var ChatMessageActions;
(function (ChatMessageActions) {
    ChatMessageActions["ReactionAdded"] = "reactionAdded";
    ChatMessageActions["ReactionRemoved"] = "reactionRemoved";
    ChatMessageActions["ActionUndefined"] = "actionUndefined";
    ChatMessageActions["UnknownFutureValue"] = "unknownFutureValue";
})(ChatMessageActions || (ChatMessageActions = {}));

function deserializeIntoChatMessageReactionIdentitySet(chatMessageReactionIdentitySet = {}) {
    return Object.assign({}, deserializeIntoIdentitySet(chatMessageReactionIdentitySet));
}

function deserializeIntoChatMessageReaction(chatMessageReaction = {}) {
    return {
        "createdDateTime": n => { chatMessageReaction.createdDateTime = n.getDateValue(); },
        "reactionType": n => { chatMessageReaction.reactionType = n.getStringValue(); },
        "user": n => { chatMessageReaction.user = n.getObject(deserializeIntoChatMessageReactionIdentitySet); },
    };
}

function deserializeIntoChatMessageHistoryItem(chatMessageHistoryItem = {}) {
    return {
        "actions": n => { chatMessageHistoryItem.actions = n.getEnumValue(ChatMessageActions); },
        "modifiedDateTime": n => { chatMessageHistoryItem.modifiedDateTime = n.getDateValue(); },
        "reaction": n => { chatMessageHistoryItem.reaction = n.getObject(deserializeIntoChatMessageReaction); },
    };
}

function deserializeIntoTeamworkHostedContent(teamworkHostedContent = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamworkHostedContent)), { "contentBytes": n => { teamworkHostedContent.contentBytes = n.getStringValue(); }, "contentType": n => { teamworkHostedContent.contentType = n.getStringValue(); } });
}

function deserializeIntoChatMessageHostedContent(chatMessageHostedContent = {}) {
    return Object.assign({}, deserializeIntoTeamworkHostedContent(chatMessageHostedContent));
}

var TeamworkConversationIdentityType;
(function (TeamworkConversationIdentityType) {
    TeamworkConversationIdentityType["Team"] = "team";
    TeamworkConversationIdentityType["Channel"] = "channel";
    TeamworkConversationIdentityType["Chat"] = "chat";
    TeamworkConversationIdentityType["UnknownFutureValue"] = "unknownFutureValue";
})(TeamworkConversationIdentityType || (TeamworkConversationIdentityType = {}));

function deserializeIntoTeamworkConversationIdentity(teamworkConversationIdentity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentity(teamworkConversationIdentity)), { "conversationIdentityType": n => { teamworkConversationIdentity.conversationIdentityType = n.getEnumValue(TeamworkConversationIdentityType); } });
}

function deserializeIntoTeamworkTagIdentity(teamworkTagIdentity = {}) {
    return Object.assign({}, deserializeIntoIdentity(teamworkTagIdentity));
}

function deserializeIntoChatMessageMentionedIdentitySet(chatMessageMentionedIdentitySet = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentitySet(chatMessageMentionedIdentitySet)), { "conversation": n => { chatMessageMentionedIdentitySet.conversation = n.getObject(deserializeIntoTeamworkConversationIdentity); }, "tag": n => { chatMessageMentionedIdentitySet.tag = n.getObject(deserializeIntoTeamworkTagIdentity); } });
}

function deserializeIntoChatMessageMention(chatMessageMention = {}) {
    return {
        "id": n => { chatMessageMention.id = n.getNumberValue(); },
        "mentioned": n => { chatMessageMention.mentioned = n.getObject(deserializeIntoChatMessageMentionedIdentitySet); },
        "mentionText": n => { chatMessageMention.mentionText = n.getStringValue(); },
    };
}

var ChatMessagePolicyViolationDlpActionTypes;
(function (ChatMessagePolicyViolationDlpActionTypes) {
    ChatMessagePolicyViolationDlpActionTypes["None"] = "none";
    ChatMessagePolicyViolationDlpActionTypes["NotifySender"] = "notifySender";
    ChatMessagePolicyViolationDlpActionTypes["BlockAccess"] = "blockAccess";
    ChatMessagePolicyViolationDlpActionTypes["BlockAccessExternal"] = "blockAccessExternal";
})(ChatMessagePolicyViolationDlpActionTypes || (ChatMessagePolicyViolationDlpActionTypes = {}));

var ChatMessagePolicyViolationUserActionTypes;
(function (ChatMessagePolicyViolationUserActionTypes) {
    ChatMessagePolicyViolationUserActionTypes["None"] = "none";
    ChatMessagePolicyViolationUserActionTypes["Override"] = "override";
    ChatMessagePolicyViolationUserActionTypes["ReportFalsePositive"] = "reportFalsePositive";
})(ChatMessagePolicyViolationUserActionTypes || (ChatMessagePolicyViolationUserActionTypes = {}));

var ChatMessagePolicyViolationVerdictDetailsTypes;
(function (ChatMessagePolicyViolationVerdictDetailsTypes) {
    ChatMessagePolicyViolationVerdictDetailsTypes["None"] = "none";
    ChatMessagePolicyViolationVerdictDetailsTypes["AllowFalsePositiveOverride"] = "allowFalsePositiveOverride";
    ChatMessagePolicyViolationVerdictDetailsTypes["AllowOverrideWithoutJustification"] = "allowOverrideWithoutJustification";
    ChatMessagePolicyViolationVerdictDetailsTypes["AllowOverrideWithJustification"] = "allowOverrideWithJustification";
})(ChatMessagePolicyViolationVerdictDetailsTypes || (ChatMessagePolicyViolationVerdictDetailsTypes = {}));

function deserializeIntoChatMessagePolicyViolationPolicyTip(chatMessagePolicyViolationPolicyTip = {}) {
    return {
        "complianceUrl": n => { chatMessagePolicyViolationPolicyTip.complianceUrl = n.getStringValue(); },
        "generalText": n => { chatMessagePolicyViolationPolicyTip.generalText = n.getStringValue(); },
        "matchedConditionDescriptions": n => { chatMessagePolicyViolationPolicyTip.matchedConditionDescriptions = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoChatMessagePolicyViolation(chatMessagePolicyViolation = {}) {
    return {
        "dlpAction": n => { chatMessagePolicyViolation.dlpAction = n.getEnumValue(ChatMessagePolicyViolationDlpActionTypes); },
        "justificationText": n => { chatMessagePolicyViolation.justificationText = n.getStringValue(); },
        "policyTip": n => { chatMessagePolicyViolation.policyTip = n.getObject(deserializeIntoChatMessagePolicyViolationPolicyTip); },
        "userAction": n => { chatMessagePolicyViolation.userAction = n.getEnumValue(ChatMessagePolicyViolationUserActionTypes); },
        "verdictDetails": n => { chatMessagePolicyViolation.verdictDetails = n.getEnumValue(ChatMessagePolicyViolationVerdictDetailsTypes); },
    };
}

function deserializeIntoEventMessageDetail(eventMessageDetail = {}) {
    return {};
}

function deserializeIntoChatMessage(chatMessage = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(chatMessage)), { "attachments": n => { chatMessage.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessageAttachment); }, "body": n => { chatMessage.body = n.getObject(deserializeIntoItemBody); }, "channelIdentity": n => { chatMessage.channelIdentity = n.getObject(deserializeIntoChannelIdentity); }, "chatId": n => { chatMessage.chatId = n.getStringValue(); }, "createdDateTime": n => { chatMessage.createdDateTime = n.getDateValue(); }, "deletedDateTime": n => { chatMessage.deletedDateTime = n.getDateValue(); }, "etag": n => { chatMessage.etag = n.getStringValue(); }, "eventDetail": n => { chatMessage.eventDetail = n.getObject(deserializeIntoEventMessageDetail); }, "from": n => { chatMessage.from = n.getObject(deserializeIntoChatMessageFromIdentitySet); }, "hostedContents": n => { chatMessage.hostedContents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessageHostedContent); }, "importance": n => { chatMessage.importance = n.getEnumValue(ChatMessageImportance); }, "lastEditedDateTime": n => { chatMessage.lastEditedDateTime = n.getDateValue(); }, "lastModifiedDateTime": n => { chatMessage.lastModifiedDateTime = n.getDateValue(); }, "locale": n => { chatMessage.locale = n.getStringValue(); }, "mentions": n => { chatMessage.mentions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessageMention); }, "messageHistory": n => { chatMessage.messageHistory = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessageHistoryItem); }, "messageType": n => { chatMessage.messageType = n.getEnumValue(ChatMessageType); }, "onBehalfOf": n => { chatMessage.onBehalfOf = n.getObject(deserializeIntoChatMessageFromIdentitySet); }, "policyViolation": n => { chatMessage.policyViolation = n.getObject(deserializeIntoChatMessagePolicyViolation); }, "reactions": n => { chatMessage.reactions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessageReaction); }, "replies": n => { chatMessage.replies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessage); }, "replyToId": n => { chatMessage.replyToId = n.getStringValue(); }, "subject": n => { chatMessage.subject = n.getStringValue(); }, "summary": n => { chatMessage.summary = n.getStringValue(); }, "webUrl": n => { chatMessage.webUrl = n.getStringValue(); } });
}

function deserializeIntoChatMessageInfo(chatMessageInfo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(chatMessageInfo)), { "body": n => { chatMessageInfo.body = n.getObject(deserializeIntoItemBody); }, "createdDateTime": n => { chatMessageInfo.createdDateTime = n.getDateValue(); }, "eventDetail": n => { chatMessageInfo.eventDetail = n.getObject(deserializeIntoEventMessageDetail); }, "from": n => { chatMessageInfo.from = n.getObject(deserializeIntoChatMessageFromIdentitySet); }, "isDeleted": n => { chatMessageInfo.isDeleted = n.getBooleanValue(); }, "messageType": n => { chatMessageInfo.messageType = n.getEnumValue(ChatMessageType); } });
}

function deserializeIntoChatViewpoint(chatViewpoint = {}) {
    return {
        "isHidden": n => { chatViewpoint.isHidden = n.getBooleanValue(); },
        "lastMessageReadDateTime": n => { chatViewpoint.lastMessageReadDateTime = n.getDateValue(); },
    };
}

function deserializeIntoConversationMember(conversationMember = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(conversationMember)), { "displayName": n => { conversationMember.displayName = n.getStringValue(); }, "roles": n => { conversationMember.roles = n.getCollectionOfPrimitiveValues(); }, "visibleHistoryStartDateTime": n => { conversationMember.visibleHistoryStartDateTime = n.getDateValue(); } });
}

function deserializeIntoPinnedChatMessageInfo(pinnedChatMessageInfo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(pinnedChatMessageInfo)), { "message": n => { pinnedChatMessageInfo.message = n.getObject(deserializeIntoChatMessage); } });
}

function deserializeIntoResourceSpecificPermissionGrant(resourceSpecificPermissionGrant = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(resourceSpecificPermissionGrant)), { "clientAppId": n => { resourceSpecificPermissionGrant.clientAppId = n.getStringValue(); }, "clientId": n => { resourceSpecificPermissionGrant.clientId = n.getStringValue(); }, "permission": n => { resourceSpecificPermissionGrant.permission = n.getStringValue(); }, "permissionType": n => { resourceSpecificPermissionGrant.permissionType = n.getStringValue(); }, "resourceAppId": n => { resourceSpecificPermissionGrant.resourceAppId = n.getStringValue(); } });
}

function deserializeIntoTeamsAppIcon(teamsAppIcon = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsAppIcon)), { "hostedContent": n => { teamsAppIcon.hostedContent = n.getObject(deserializeIntoTeamworkHostedContent); }, "webUrl": n => { teamsAppIcon.webUrl = n.getStringValue(); } });
}

function deserializeIntoTeamworkBot(teamworkBot = {}) {
    return Object.assign({}, deserializeIntoEntity(teamworkBot));
}

var TeamsAppInstallationScopes;
(function (TeamsAppInstallationScopes) {
    TeamsAppInstallationScopes["Team"] = "team";
    TeamsAppInstallationScopes["GroupChat"] = "groupChat";
    TeamsAppInstallationScopes["Personal"] = "personal";
    TeamsAppInstallationScopes["UnknownFutureValue"] = "unknownFutureValue";
})(TeamsAppInstallationScopes || (TeamsAppInstallationScopes = {}));

var TeamsAppPublishingState;
(function (TeamsAppPublishingState) {
    TeamsAppPublishingState["Submitted"] = "submitted";
    TeamsAppPublishingState["Rejected"] = "rejected";
    TeamsAppPublishingState["Published"] = "published";
    TeamsAppPublishingState["UnknownFutureValue"] = "unknownFutureValue";
})(TeamsAppPublishingState || (TeamsAppPublishingState = {}));

function deserializeIntoTeamsAppDefinition(teamsAppDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsAppDefinition)), { "allowedInstallationScopes": n => { teamsAppDefinition.allowedInstallationScopes = n.getEnumValue(TeamsAppInstallationScopes); }, "azureADAppId": n => { teamsAppDefinition.azureADAppId = n.getStringValue(); }, "bot": n => { teamsAppDefinition.bot = n.getObject(deserializeIntoTeamworkBot); }, "colorIcon": n => { teamsAppDefinition.colorIcon = n.getObject(deserializeIntoTeamsAppIcon); }, "createdBy": n => { teamsAppDefinition.createdBy = n.getObject(deserializeIntoIdentitySet); }, "description": n => { teamsAppDefinition.description = n.getStringValue(); }, "displayName": n => { teamsAppDefinition.displayName = n.getStringValue(); }, "lastModifiedDateTime": n => { teamsAppDefinition.lastModifiedDateTime = n.getDateValue(); }, "outlineIcon": n => { teamsAppDefinition.outlineIcon = n.getObject(deserializeIntoTeamsAppIcon); }, "publishingState": n => { teamsAppDefinition.publishingState = n.getEnumValue(TeamsAppPublishingState); }, "shortdescription": n => { teamsAppDefinition.shortdescription = n.getStringValue(); }, "teamsAppId": n => { teamsAppDefinition.teamsAppId = n.getStringValue(); }, "version": n => { teamsAppDefinition.version = n.getStringValue(); } });
}

var TeamsAppDistributionMethod;
(function (TeamsAppDistributionMethod) {
    TeamsAppDistributionMethod["Store"] = "store";
    TeamsAppDistributionMethod["Organization"] = "organization";
    TeamsAppDistributionMethod["Sideloaded"] = "sideloaded";
    TeamsAppDistributionMethod["UnknownFutureValue"] = "unknownFutureValue";
})(TeamsAppDistributionMethod || (TeamsAppDistributionMethod = {}));

function deserializeIntoTeamsApp(teamsApp = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsApp)), { "appDefinitions": n => { teamsApp.appDefinitions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsAppDefinition); }, "displayName": n => { teamsApp.displayName = n.getStringValue(); }, "distributionMethod": n => { teamsApp.distributionMethod = n.getEnumValue(TeamsAppDistributionMethod); }, "externalId": n => { teamsApp.externalId = n.getStringValue(); } });
}

function deserializeIntoTeamsAppInstallation(teamsAppInstallation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsAppInstallation)), { "teamsApp": n => { teamsAppInstallation.teamsApp = n.getObject(deserializeIntoTeamsApp); }, "teamsAppDefinition": n => { teamsAppInstallation.teamsAppDefinition = n.getObject(deserializeIntoTeamsAppDefinition); } });
}

function deserializeIntoOperationError(operationError = {}) {
    return {
        "code": n => { operationError.code = n.getStringValue(); },
        "message": n => { operationError.message = n.getStringValue(); },
    };
}

var TeamsAsyncOperationStatus;
(function (TeamsAsyncOperationStatus) {
    TeamsAsyncOperationStatus["Invalid"] = "invalid";
    TeamsAsyncOperationStatus["NotStarted"] = "notStarted";
    TeamsAsyncOperationStatus["InProgress"] = "inProgress";
    TeamsAsyncOperationStatus["Succeeded"] = "succeeded";
    TeamsAsyncOperationStatus["Failed"] = "failed";
    TeamsAsyncOperationStatus["UnknownFutureValue"] = "unknownFutureValue";
})(TeamsAsyncOperationStatus || (TeamsAsyncOperationStatus = {}));

var TeamsAsyncOperationType;
(function (TeamsAsyncOperationType) {
    TeamsAsyncOperationType["Invalid"] = "invalid";
    TeamsAsyncOperationType["CloneTeam"] = "cloneTeam";
    TeamsAsyncOperationType["ArchiveTeam"] = "archiveTeam";
    TeamsAsyncOperationType["UnarchiveTeam"] = "unarchiveTeam";
    TeamsAsyncOperationType["CreateTeam"] = "createTeam";
    TeamsAsyncOperationType["UnknownFutureValue"] = "unknownFutureValue";
    TeamsAsyncOperationType["TeamifyGroup"] = "teamifyGroup";
    TeamsAsyncOperationType["CreateChannel"] = "createChannel";
    TeamsAsyncOperationType["CreateChat"] = "createChat";
})(TeamsAsyncOperationType || (TeamsAsyncOperationType = {}));

function deserializeIntoTeamsAsyncOperation(teamsAsyncOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsAsyncOperation)), { "attemptsCount": n => { teamsAsyncOperation.attemptsCount = n.getNumberValue(); }, "createdDateTime": n => { teamsAsyncOperation.createdDateTime = n.getDateValue(); }, "error": n => { teamsAsyncOperation.error_escaped = n.getObject(deserializeIntoOperationError); }, "lastActionDateTime": n => { teamsAsyncOperation.lastActionDateTime = n.getDateValue(); }, "operationType": n => { teamsAsyncOperation.operationType = n.getEnumValue(TeamsAsyncOperationType); }, "status": n => { teamsAsyncOperation.status = n.getEnumValue(TeamsAsyncOperationStatus); }, "targetResourceId": n => { teamsAsyncOperation.targetResourceId = n.getStringValue(); }, "targetResourceLocation": n => { teamsAsyncOperation.targetResourceLocation = n.getStringValue(); } });
}

function deserializeIntoTeamsTabConfiguration(teamsTabConfiguration = {}) {
    return {
        "contentUrl": n => { teamsTabConfiguration.contentUrl = n.getStringValue(); },
        "entityId": n => { teamsTabConfiguration.entityId = n.getStringValue(); },
        "removeUrl": n => { teamsTabConfiguration.removeUrl = n.getStringValue(); },
        "websiteUrl": n => { teamsTabConfiguration.websiteUrl = n.getStringValue(); },
    };
}

function deserializeIntoTeamsTab(teamsTab = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamsTab)), { "configuration": n => { teamsTab.configuration = n.getObject(deserializeIntoTeamsTabConfiguration); }, "displayName": n => { teamsTab.displayName = n.getStringValue(); }, "messageId": n => { teamsTab.messageId = n.getStringValue(); }, "sortOrderIndex": n => { teamsTab.sortOrderIndex = n.getStringValue(); }, "teamsApp": n => { teamsTab.teamsApp = n.getObject(deserializeIntoTeamsApp); }, "teamsAppId": n => { teamsTab.teamsAppId = n.getStringValue(); }, "webUrl": n => { teamsTab.webUrl = n.getStringValue(); } });
}

var TeamworkUserIdentityType;
(function (TeamworkUserIdentityType) {
    TeamworkUserIdentityType["AadUser"] = "aadUser";
    TeamworkUserIdentityType["OnPremiseAadUser"] = "onPremiseAadUser";
    TeamworkUserIdentityType["AnonymousGuest"] = "anonymousGuest";
    TeamworkUserIdentityType["FederatedUser"] = "federatedUser";
    TeamworkUserIdentityType["PersonalMicrosoftAccountUser"] = "personalMicrosoftAccountUser";
    TeamworkUserIdentityType["SkypeUser"] = "skypeUser";
    TeamworkUserIdentityType["PhoneUser"] = "phoneUser";
    TeamworkUserIdentityType["UnknownFutureValue"] = "unknownFutureValue";
    TeamworkUserIdentityType["EmailUser"] = "emailUser";
    TeamworkUserIdentityType["AzureCommunicationServicesUser"] = "azureCommunicationServicesUser";
})(TeamworkUserIdentityType || (TeamworkUserIdentityType = {}));

function deserializeIntoTeamworkUserIdentity(teamworkUserIdentity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentity(teamworkUserIdentity)), { "userIdentityType": n => { teamworkUserIdentity.userIdentityType = n.getEnumValue(TeamworkUserIdentityType); } });
}

function deserializeIntoTeamworkOnlineMeetingInfo(teamworkOnlineMeetingInfo = {}) {
    return {
        "calendarEventId": n => { teamworkOnlineMeetingInfo.calendarEventId = n.getStringValue(); },
        "joinWebUrl": n => { teamworkOnlineMeetingInfo.joinWebUrl = n.getStringValue(); },
        "organizer": n => { teamworkOnlineMeetingInfo.organizer = n.getObject(deserializeIntoTeamworkUserIdentity); },
    };
}

function deserializeIntoChat(chat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(chat)), { "chatType": n => { chat.chatType = n.getEnumValue(ChatType); }, "createdDateTime": n => { chat.createdDateTime = n.getDateValue(); }, "installedApps": n => { chat.installedApps = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsAppInstallation); }, "lastMessagePreview": n => { chat.lastMessagePreview = n.getObject(deserializeIntoChatMessageInfo); }, "lastUpdatedDateTime": n => { chat.lastUpdatedDateTime = n.getDateValue(); }, "members": n => { chat.members = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationMember); }, "messages": n => { chat.messages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessage); }, "onlineMeetingInfo": n => { chat.onlineMeetingInfo = n.getObject(deserializeIntoTeamworkOnlineMeetingInfo); }, "operations": n => { chat.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsAsyncOperation); }, "permissionGrants": n => { chat.permissionGrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoResourceSpecificPermissionGrant); }, "pinnedMessages": n => { chat.pinnedMessages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPinnedChatMessageInfo); }, "tabs": n => { chat.tabs = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsTab); }, "tenantId": n => { chat.tenantId = n.getStringValue(); }, "topic": n => { chat.topic = n.getStringValue(); }, "viewpoint": n => { chat.viewpoint = n.getObject(deserializeIntoChatViewpoint); }, "webUrl": n => { chat.webUrl = n.getStringValue(); } });
}

var CloudPcDiskEncryptionState;
(function (CloudPcDiskEncryptionState) {
    CloudPcDiskEncryptionState["NotAvailable"] = "notAvailable";
    CloudPcDiskEncryptionState["NotEncrypted"] = "notEncrypted";
    CloudPcDiskEncryptionState["EncryptedUsingPlatformManagedKey"] = "encryptedUsingPlatformManagedKey";
    CloudPcDiskEncryptionState["EncryptedUsingCustomerManagedKey"] = "encryptedUsingCustomerManagedKey";
    CloudPcDiskEncryptionState["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcDiskEncryptionState || (CloudPcDiskEncryptionState = {}));

var CloudPcOperatingSystem;
(function (CloudPcOperatingSystem) {
    CloudPcOperatingSystem["Windows10"] = "windows10";
    CloudPcOperatingSystem["Windows11"] = "windows11";
    CloudPcOperatingSystem["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcOperatingSystem || (CloudPcOperatingSystem = {}));

var CloudPcProvisioningType;
(function (CloudPcProvisioningType) {
    CloudPcProvisioningType["Dedicated"] = "dedicated";
    CloudPcProvisioningType["Shared"] = "shared";
    CloudPcProvisioningType["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcProvisioningType || (CloudPcProvisioningType = {}));

var CloudPcServicePlanType;
(function (CloudPcServicePlanType) {
    CloudPcServicePlanType["Enterprise"] = "enterprise";
    CloudPcServicePlanType["Business"] = "business";
    CloudPcServicePlanType["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcServicePlanType || (CloudPcServicePlanType = {}));

var CloudPcStatus;
(function (CloudPcStatus) {
    CloudPcStatus["NotProvisioned"] = "notProvisioned";
    CloudPcStatus["Provisioning"] = "provisioning";
    CloudPcStatus["Provisioned"] = "provisioned";
    CloudPcStatus["InGracePeriod"] = "inGracePeriod";
    CloudPcStatus["Deprovisioning"] = "deprovisioning";
    CloudPcStatus["Failed"] = "failed";
    CloudPcStatus["ProvisionedWithWarnings"] = "provisionedWithWarnings";
    CloudPcStatus["Resizing"] = "resizing";
    CloudPcStatus["Restoring"] = "restoring";
    CloudPcStatus["PendingProvision"] = "pendingProvision";
    CloudPcStatus["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcStatus || (CloudPcStatus = {}));

var CloudPcUserAccountType;
(function (CloudPcUserAccountType) {
    CloudPcUserAccountType["StandardUser"] = "standardUser";
    CloudPcUserAccountType["Administrator"] = "administrator";
    CloudPcUserAccountType["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcUserAccountType || (CloudPcUserAccountType = {}));

var CloudPcConnectivityStatus;
(function (CloudPcConnectivityStatus) {
    CloudPcConnectivityStatus["Unknown"] = "unknown";
    CloudPcConnectivityStatus["Available"] = "available";
    CloudPcConnectivityStatus["AvailableWithWarning"] = "availableWithWarning";
    CloudPcConnectivityStatus["Unavailable"] = "unavailable";
    CloudPcConnectivityStatus["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcConnectivityStatus || (CloudPcConnectivityStatus = {}));

var CloudPcConnectivityEventResult;
(function (CloudPcConnectivityEventResult) {
    CloudPcConnectivityEventResult["Unknown"] = "unknown";
    CloudPcConnectivityEventResult["Success"] = "success";
    CloudPcConnectivityEventResult["Failure"] = "failure";
    CloudPcConnectivityEventResult["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcConnectivityEventResult || (CloudPcConnectivityEventResult = {}));

function deserializeIntoCloudPcHealthCheckItem(cloudPcHealthCheckItem = {}) {
    return {
        "additionalDetails": n => { cloudPcHealthCheckItem.additionalDetails = n.getStringValue(); },
        "displayName": n => { cloudPcHealthCheckItem.displayName = n.getStringValue(); },
        "lastHealthCheckDateTime": n => { cloudPcHealthCheckItem.lastHealthCheckDateTime = n.getDateValue(); },
        "result": n => { cloudPcHealthCheckItem.result = n.getEnumValue(CloudPcConnectivityEventResult); },
    };
}

function deserializeIntoCloudPcConnectivityResult(cloudPcConnectivityResult = {}) {
    return {
        "failedHealthCheckItems": n => { cloudPcConnectivityResult.failedHealthCheckItems = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCloudPcHealthCheckItem); },
        "status": n => { cloudPcConnectivityResult.status = n.getEnumValue(CloudPcConnectivityStatus); },
        "updatedDateTime": n => { cloudPcConnectivityResult.updatedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoCloudPcLoginResult(cloudPcLoginResult = {}) {
    return {
        "time": n => { cloudPcLoginResult.time = n.getDateValue(); },
    };
}

var CloudPcPartnerAgentInstallStatus;
(function (CloudPcPartnerAgentInstallStatus) {
    CloudPcPartnerAgentInstallStatus["Installed"] = "installed";
    CloudPcPartnerAgentInstallStatus["InstallFailed"] = "installFailed";
    CloudPcPartnerAgentInstallStatus["Installing"] = "installing";
    CloudPcPartnerAgentInstallStatus["Uninstalling"] = "uninstalling";
    CloudPcPartnerAgentInstallStatus["UninstallFailed"] = "uninstallFailed";
    CloudPcPartnerAgentInstallStatus["Licensed"] = "licensed";
    CloudPcPartnerAgentInstallStatus["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcPartnerAgentInstallStatus || (CloudPcPartnerAgentInstallStatus = {}));

var CloudPcPartnerAgentName;
(function (CloudPcPartnerAgentName) {
    CloudPcPartnerAgentName["Citrix"] = "citrix";
    CloudPcPartnerAgentName["UnknownFutureValue"] = "unknownFutureValue";
})(CloudPcPartnerAgentName || (CloudPcPartnerAgentName = {}));

function deserializeIntoCloudPcPartnerAgentInstallResult(cloudPcPartnerAgentInstallResult = {}) {
    return {
        "installStatus": n => { cloudPcPartnerAgentInstallResult.installStatus = n.getEnumValue(CloudPcPartnerAgentInstallStatus); },
        "isThirdPartyPartner": n => { cloudPcPartnerAgentInstallResult.isThirdPartyPartner = n.getBooleanValue(); },
        "partnerAgentName": n => { cloudPcPartnerAgentInstallResult.partnerAgentName = n.getEnumValue(CloudPcPartnerAgentName); },
        "retriable": n => { cloudPcPartnerAgentInstallResult.retriable = n.getBooleanValue(); },
    };
}

var ActionState;
(function (ActionState) {
    ActionState["None"] = "none";
    ActionState["Pending"] = "pending";
    ActionState["Canceled"] = "canceled";
    ActionState["Active"] = "active";
    ActionState["Done"] = "done";
    ActionState["Failed"] = "failed";
    ActionState["NotSupported"] = "notSupported";
})(ActionState || (ActionState = {}));

function deserializeIntoKeyValuePair(keyValuePair = {}) {
    return {
        "name": n => { keyValuePair.name = n.getStringValue(); },
        "value": n => { keyValuePair.value = n.getStringValue(); },
    };
}

function deserializeIntoCloudPcStatusDetails(cloudPcStatusDetails = {}) {
    return {
        "additionalInformation": n => { cloudPcStatusDetails.additionalInformation = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValuePair); },
        "code": n => { cloudPcStatusDetails.code = n.getStringValue(); },
        "message": n => { cloudPcStatusDetails.message = n.getStringValue(); },
    };
}

function deserializeIntoCloudPcRemoteActionResult(cloudPcRemoteActionResult = {}) {
    return {
        "actionName": n => { cloudPcRemoteActionResult.actionName = n.getStringValue(); },
        "actionState": n => { cloudPcRemoteActionResult.actionState = n.getEnumValue(ActionState); },
        "cloudPcId": n => { cloudPcRemoteActionResult.cloudPcId = n.getStringValue(); },
        "lastUpdatedDateTime": n => { cloudPcRemoteActionResult.lastUpdatedDateTime = n.getDateValue(); },
        "managedDeviceId": n => { cloudPcRemoteActionResult.managedDeviceId = n.getStringValue(); },
        "startDateTime": n => { cloudPcRemoteActionResult.startDateTime = n.getDateValue(); },
        "statusDetails": n => { cloudPcRemoteActionResult.statusDetails = n.getObject(deserializeIntoCloudPcStatusDetails); },
    };
}

function deserializeIntoCloudPC(cloudPC = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(cloudPC)), { "aadDeviceId": n => { cloudPC.aadDeviceId = n.getStringValue(); }, "connectivityResult": n => { cloudPC.connectivityResult = n.getObject(deserializeIntoCloudPcConnectivityResult); }, "diskEncryptionState": n => { cloudPC.diskEncryptionState = n.getEnumValue(CloudPcDiskEncryptionState); }, "displayName": n => { cloudPC.displayName = n.getStringValue(); }, "gracePeriodEndDateTime": n => { cloudPC.gracePeriodEndDateTime = n.getDateValue(); }, "imageDisplayName": n => { cloudPC.imageDisplayName = n.getStringValue(); }, "lastLoginResult": n => { cloudPC.lastLoginResult = n.getObject(deserializeIntoCloudPcLoginResult); }, "lastModifiedDateTime": n => { cloudPC.lastModifiedDateTime = n.getDateValue(); }, "lastRemoteActionResult": n => { cloudPC.lastRemoteActionResult = n.getObject(deserializeIntoCloudPcRemoteActionResult); }, "managedDeviceId": n => { cloudPC.managedDeviceId = n.getStringValue(); }, "managedDeviceName": n => { cloudPC.managedDeviceName = n.getStringValue(); }, "onPremisesConnectionName": n => { cloudPC.onPremisesConnectionName = n.getStringValue(); }, "osVersion": n => { cloudPC.osVersion = n.getEnumValue(CloudPcOperatingSystem); }, "partnerAgentInstallResults": n => { cloudPC.partnerAgentInstallResults = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCloudPcPartnerAgentInstallResult); }, "provisioningPolicyId": n => { cloudPC.provisioningPolicyId = n.getStringValue(); }, "provisioningPolicyName": n => { cloudPC.provisioningPolicyName = n.getStringValue(); }, "provisioningType": n => { cloudPC.provisioningType = n.getEnumValue(CloudPcProvisioningType); }, "servicePlanId": n => { cloudPC.servicePlanId = n.getStringValue(); }, "servicePlanName": n => { cloudPC.servicePlanName = n.getStringValue(); }, "servicePlanType": n => { cloudPC.servicePlanType = n.getEnumValue(CloudPcServicePlanType); }, "status": n => { cloudPC.status = n.getEnumValue(CloudPcStatus); }, "statusDetails": n => { cloudPC.statusDetails = n.getObject(deserializeIntoCloudPcStatusDetails); }, "userAccountType": n => { cloudPC.userAccountType = n.getEnumValue(CloudPcUserAccountType); }, "userPrincipalName": n => { cloudPC.userPrincipalName = n.getStringValue(); } });
}

var FollowupFlagStatus;
(function (FollowupFlagStatus) {
    FollowupFlagStatus["NotFlagged"] = "notFlagged";
    FollowupFlagStatus["Complete"] = "complete";
    FollowupFlagStatus["Flagged"] = "flagged";
})(FollowupFlagStatus || (FollowupFlagStatus = {}));

function deserializeIntoFollowupFlag(followupFlag = {}) {
    return {
        "completedDateTime": n => { followupFlag.completedDateTime = n.getObject(deserializeIntoDateTimeTimeZone); },
        "dueDateTime": n => { followupFlag.dueDateTime = n.getObject(deserializeIntoDateTimeTimeZone); },
        "flagStatus": n => { followupFlag.flagStatus = n.getEnumValue(FollowupFlagStatus); },
        "startDateTime": n => { followupFlag.startDateTime = n.getObject(deserializeIntoDateTimeTimeZone); },
    };
}

function deserializeIntoProfilePhoto(profilePhoto = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(profilePhoto)), { "height": n => { profilePhoto.height = n.getNumberValue(); }, "width": n => { profilePhoto.width = n.getNumberValue(); } });
}

var EmailType;
(function (EmailType) {
    EmailType["Unknown"] = "unknown";
    EmailType["Work"] = "work";
    EmailType["Personal"] = "personal";
    EmailType["Main"] = "main";
    EmailType["Other"] = "other";
})(EmailType || (EmailType = {}));

function deserializeIntoTypedEmailAddress(typedEmailAddress = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEmailAddress(typedEmailAddress)), { "otherLabel": n => { typedEmailAddress.otherLabel = n.getStringValue(); }, "type": n => { typedEmailAddress.type = n.getEnumValue(EmailType); } });
}

var WebsiteType;
(function (WebsiteType) {
    WebsiteType["Other"] = "other";
    WebsiteType["Home"] = "home";
    WebsiteType["Work"] = "work";
    WebsiteType["Blog"] = "blog";
    WebsiteType["Profile"] = "profile";
})(WebsiteType || (WebsiteType = {}));

function deserializeIntoWebsite(website = {}) {
    return {
        "address": n => { website.address = n.getStringValue(); },
        "displayName": n => { website.displayName = n.getStringValue(); },
        "type": n => { website.type = n.getEnumValue(WebsiteType); },
    };
}

function deserializeIntoContact(contact = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOutlookItem(contact)), { "assistantName": n => { contact.assistantName = n.getStringValue(); }, "birthday": n => { contact.birthday = n.getDateValue(); }, "children": n => { contact.children = n.getCollectionOfPrimitiveValues(); }, "companyName": n => { contact.companyName = n.getStringValue(); }, "department": n => { contact.department = n.getStringValue(); }, "displayName": n => { contact.displayName = n.getStringValue(); }, "emailAddresses": n => { contact.emailAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTypedEmailAddress); }, "extensions": n => { contact.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "fileAs": n => { contact.fileAs = n.getStringValue(); }, "flag": n => { contact.flag = n.getObject(deserializeIntoFollowupFlag); }, "gender": n => { contact.gender = n.getStringValue(); }, "generation": n => { contact.generation = n.getStringValue(); }, "givenName": n => { contact.givenName = n.getStringValue(); }, "imAddresses": n => { contact.imAddresses = n.getCollectionOfPrimitiveValues(); }, "initials": n => { contact.initials = n.getStringValue(); }, "isFavorite": n => { contact.isFavorite = n.getBooleanValue(); }, "jobTitle": n => { contact.jobTitle = n.getStringValue(); }, "manager": n => { contact.manager = n.getStringValue(); }, "middleName": n => { contact.middleName = n.getStringValue(); }, "multiValueExtendedProperties": n => { contact.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "nickName": n => { contact.nickName = n.getStringValue(); }, "officeLocation": n => { contact.officeLocation = n.getStringValue(); }, "parentFolderId": n => { contact.parentFolderId = n.getStringValue(); }, "personalNotes": n => { contact.personalNotes = n.getStringValue(); }, "phones": n => { contact.phones = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPhone); }, "photo": n => { contact.photo = n.getObject(deserializeIntoProfilePhoto); }, "postalAddresses": n => { contact.postalAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPhysicalAddress); }, "profession": n => { contact.profession = n.getStringValue(); }, "singleValueExtendedProperties": n => { contact.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "spouseName": n => { contact.spouseName = n.getStringValue(); }, "surname": n => { contact.surname = n.getStringValue(); }, "title": n => { contact.title = n.getStringValue(); }, "websites": n => { contact.websites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWebsite); }, "weddingAnniversary": n => { contact.weddingAnniversary = n.getDateOnlyValue(); }, "yomiCompanyName": n => { contact.yomiCompanyName = n.getStringValue(); }, "yomiGivenName": n => { contact.yomiGivenName = n.getStringValue(); }, "yomiSurname": n => { contact.yomiSurname = n.getStringValue(); } });
}

function deserializeIntoContactFolder(contactFolder = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(contactFolder)), { "childFolders": n => { contactFolder.childFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContactFolder); }, "contacts": n => { contactFolder.contacts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContact); }, "displayName": n => { contactFolder.displayName = n.getStringValue(); }, "multiValueExtendedProperties": n => { contactFolder.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "parentFolderId": n => { contactFolder.parentFolderId = n.getStringValue(); }, "singleValueExtendedProperties": n => { contactFolder.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "wellKnownName": n => { contactFolder.wellKnownName = n.getStringValue(); } });
}

function deserializeIntoCustomSecurityAttributeValue(customSecurityAttributeValue = {}) {
    return {};
}

var DeviceAndAppManagementAssignmentFilterType;
(function (DeviceAndAppManagementAssignmentFilterType) {
    /** Default value. Do not use. */
    DeviceAndAppManagementAssignmentFilterType["None"] = "none";
    /** Indicates in-filter, rule matching will offer the payload to devices. */
    DeviceAndAppManagementAssignmentFilterType["Include"] = "include";
    /** Indicates out-filter, rule matching will not offer the payload to devices. */
    DeviceAndAppManagementAssignmentFilterType["Exclude"] = "exclude";
})(DeviceAndAppManagementAssignmentFilterType || (DeviceAndAppManagementAssignmentFilterType = {}));

function deserializeIntoDeviceAndAppManagementAssignmentTarget(deviceAndAppManagementAssignmentTarget = {}) {
    return {
        "deviceAndAppManagementAssignmentFilterId": n => { deviceAndAppManagementAssignmentTarget.deviceAndAppManagementAssignmentFilterId = n.getStringValue(); },
        "deviceAndAppManagementAssignmentFilterType": n => { deviceAndAppManagementAssignmentTarget.deviceAndAppManagementAssignmentFilterType = n.getEnumValue(DeviceAndAppManagementAssignmentFilterType); },
    };
}

var DeviceAndAppManagementAssignmentSource;
(function (DeviceAndAppManagementAssignmentSource) {
    /** Direct indicates a direct assignment. */
    DeviceAndAppManagementAssignmentSource["Direct"] = "direct";
    /** PolicySets indicates assignment was made via PolicySet assignment. */
    DeviceAndAppManagementAssignmentSource["PolicySets"] = "policySets";
})(DeviceAndAppManagementAssignmentSource || (DeviceAndAppManagementAssignmentSource = {}));

function deserializeIntoEnrollmentConfigurationAssignment(enrollmentConfigurationAssignment = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(enrollmentConfigurationAssignment)), { "source": n => { enrollmentConfigurationAssignment.source = n.getEnumValue(DeviceAndAppManagementAssignmentSource); }, "sourceId": n => { enrollmentConfigurationAssignment.sourceId = n.getStringValue(); }, "target": n => { enrollmentConfigurationAssignment.target = n.getObject(deserializeIntoDeviceAndAppManagementAssignmentTarget); } });
}

var DeviceEnrollmentConfigurationType;
(function (DeviceEnrollmentConfigurationType) {
    /** Default. Set to unknown if the configuration type cannot be determined. */
    DeviceEnrollmentConfigurationType["Unknown"] = "unknown";
    /** Indicates that configuration is of type limit which refers to number of devices a user is allowed to enroll. */
    DeviceEnrollmentConfigurationType["Limit"] = "limit";
    /** Indicates that configuration is of type platform restriction which refers to types of devices a user is allowed to enroll. */
    DeviceEnrollmentConfigurationType["PlatformRestrictions"] = "platformRestrictions";
    /** Indicates that configuration is of type Windows Hello which refers to authentication method devices would use. */
    DeviceEnrollmentConfigurationType["WindowsHelloForBusiness"] = "windowsHelloForBusiness";
    /** Indicates that configuration is of type default limit which refers to types of devices a user is allowed to enroll by default. */
    DeviceEnrollmentConfigurationType["DefaultLimit"] = "defaultLimit";
    /** Indicates that configuration is of type default platform restriction which refers to types of devices a user is allowed to enroll by default. */
    DeviceEnrollmentConfigurationType["DefaultPlatformRestrictions"] = "defaultPlatformRestrictions";
    /** Indicates that configuration is of type default Windows Hello which refers to authentication method devices would use by default. */
    DeviceEnrollmentConfigurationType["DefaultWindowsHelloForBusiness"] = "defaultWindowsHelloForBusiness";
    /** Indicates that configuration is of type default Enrollment status page which refers to startup page displayed during OOBE in Autopilot devices by default. */
    DeviceEnrollmentConfigurationType["DefaultWindows10EnrollmentCompletionPageConfiguration"] = "defaultWindows10EnrollmentCompletionPageConfiguration";
    /** Indicates that configuration is of type Enrollment status page which refers to startup page displayed during OOBE in Autopilot devices. */
    DeviceEnrollmentConfigurationType["Windows10EnrollmentCompletionPageConfiguration"] = "windows10EnrollmentCompletionPageConfiguration";
    /** Indicates that configuration is of type Comanagement Authority which refers to policies applied to Co-Managed devices. */
    DeviceEnrollmentConfigurationType["DeviceComanagementAuthorityConfiguration"] = "deviceComanagementAuthorityConfiguration";
    /** Indicates that configuration is of type single platform restriction which refers to types of devices a user is allowed to enroll. */
    DeviceEnrollmentConfigurationType["SinglePlatformRestriction"] = "singlePlatformRestriction";
    /** Unknown future value */
    DeviceEnrollmentConfigurationType["UnknownFutureValue"] = "unknownFutureValue";
    /** Indicates that configuration is of type Enrollment Notification which refers to types of notification a user receives during enrollment. */
    DeviceEnrollmentConfigurationType["EnrollmentNotificationsConfiguration"] = "enrollmentNotificationsConfiguration";
})(DeviceEnrollmentConfigurationType || (DeviceEnrollmentConfigurationType = {}));

function deserializeIntoDeviceEnrollmentConfiguration(deviceEnrollmentConfiguration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceEnrollmentConfiguration)), { "assignments": n => { deviceEnrollmentConfiguration.assignments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEnrollmentConfigurationAssignment); }, "createdDateTime": n => { deviceEnrollmentConfiguration.createdDateTime = n.getDateValue(); }, "description": n => { deviceEnrollmentConfiguration.description = n.getStringValue(); }, "deviceEnrollmentConfigurationType": n => { deviceEnrollmentConfiguration.deviceEnrollmentConfigurationType = n.getEnumValue(DeviceEnrollmentConfigurationType); }, "displayName": n => { deviceEnrollmentConfiguration.displayName = n.getStringValue(); }, "lastModifiedDateTime": n => { deviceEnrollmentConfiguration.lastModifiedDateTime = n.getDateValue(); }, "priority": n => { deviceEnrollmentConfiguration.priority = n.getNumberValue(); }, "roleScopeTagIds": n => { deviceEnrollmentConfiguration.roleScopeTagIds = n.getCollectionOfPrimitiveValues(); }, "version": n => { deviceEnrollmentConfiguration.version = n.getNumberValue(); } });
}

function deserializeIntoDeviceKey(deviceKey = {}) {
    return {
        "deviceId": n => { deviceKey.deviceId = n.getStringValue(); },
        "keyMaterial": n => { deviceKey.keyMaterial = n.getStringValue(); },
        "keyType": n => { deviceKey.keyType = n.getStringValue(); },
    };
}

function deserializeIntoDeviceManagementTroubleshootingErrorResource(deviceManagementTroubleshootingErrorResource = {}) {
    return {
        "link": n => { deviceManagementTroubleshootingErrorResource.link = n.getStringValue(); },
        "text": n => { deviceManagementTroubleshootingErrorResource.text = n.getStringValue(); },
    };
}

function deserializeIntoDeviceManagementTroubleshootingErrorDetails(deviceManagementTroubleshootingErrorDetails = {}) {
    return {
        "context": n => { deviceManagementTroubleshootingErrorDetails.context = n.getStringValue(); },
        "failure": n => { deviceManagementTroubleshootingErrorDetails.failure = n.getStringValue(); },
        "failureDetails": n => { deviceManagementTroubleshootingErrorDetails.failureDetails = n.getStringValue(); },
        "remediation": n => { deviceManagementTroubleshootingErrorDetails.remediation = n.getStringValue(); },
        "resources": n => { deviceManagementTroubleshootingErrorDetails.resources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceManagementTroubleshootingErrorResource); },
    };
}

function deserializeIntoDeviceManagementTroubleshootingEvent(deviceManagementTroubleshootingEvent = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceManagementTroubleshootingEvent)), { "additionalInformation": n => { deviceManagementTroubleshootingEvent.additionalInformation = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValuePair); }, "correlationId": n => { deviceManagementTroubleshootingEvent.correlationId = n.getStringValue(); }, "eventDateTime": n => { deviceManagementTroubleshootingEvent.eventDateTime = n.getDateValue(); }, "eventName": n => { deviceManagementTroubleshootingEvent.eventName = n.getStringValue(); }, "troubleshootingErrorDetails": n => { deviceManagementTroubleshootingEvent.troubleshootingErrorDetails = n.getObject(deserializeIntoDeviceManagementTroubleshootingErrorDetails); } });
}

function deserializeIntoSharepointIds(sharepointIds = {}) {
    return {
        "listId": n => { sharepointIds.listId = n.getStringValue(); },
        "listItemId": n => { sharepointIds.listItemId = n.getStringValue(); },
        "listItemUniqueId": n => { sharepointIds.listItemUniqueId = n.getStringValue(); },
        "siteId": n => { sharepointIds.siteId = n.getStringValue(); },
        "siteUrl": n => { sharepointIds.siteUrl = n.getStringValue(); },
        "tenantId": n => { sharepointIds.tenantId = n.getStringValue(); },
        "webId": n => { sharepointIds.webId = n.getStringValue(); },
    };
}

function deserializeIntoItemReference(itemReference = {}) {
    return {
        "driveId": n => { itemReference.driveId = n.getStringValue(); },
        "driveType": n => { itemReference.driveType = n.getStringValue(); },
        "id": n => { itemReference.id = n.getStringValue(); },
        "name": n => { itemReference.name = n.getStringValue(); },
        "path": n => { itemReference.path = n.getStringValue(); },
        "shareId": n => { itemReference.shareId = n.getStringValue(); },
        "sharepointIds": n => { itemReference.sharepointIds = n.getObject(deserializeIntoSharepointIds); },
        "siteId": n => { itemReference.siteId = n.getStringValue(); },
    };
}

function deserializeIntoBaseItem(baseItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(baseItem)), { "createdBy": n => { baseItem.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdByUser": n => { baseItem.createdByUser = n.getObject(deserializeIntoUser); }, "createdDateTime": n => { baseItem.createdDateTime = n.getDateValue(); }, "description": n => { baseItem.description = n.getStringValue(); }, "eTag": n => { baseItem.eTag = n.getStringValue(); }, "lastModifiedBy": n => { baseItem.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedByUser": n => { baseItem.lastModifiedByUser = n.getObject(deserializeIntoUser); }, "lastModifiedDateTime": n => { baseItem.lastModifiedDateTime = n.getDateValue(); }, "name": n => { baseItem.name = n.getStringValue(); }, "parentReference": n => { baseItem.parentReference = n.getObject(deserializeIntoItemReference); }, "webUrl": n => { baseItem.webUrl = n.getStringValue(); } });
}

function deserializeIntoAudio(audio = {}) {
    return {
        "album": n => { audio.album = n.getStringValue(); },
        "albumArtist": n => { audio.albumArtist = n.getStringValue(); },
        "artist": n => { audio.artist = n.getStringValue(); },
        "bitrate": n => { audio.bitrate = n.getNumberValue(); },
        "composers": n => { audio.composers = n.getStringValue(); },
        "copyright": n => { audio.copyright = n.getStringValue(); },
        "disc": n => { audio.disc = n.getNumberValue(); },
        "discCount": n => { audio.discCount = n.getNumberValue(); },
        "duration": n => { audio.duration = n.getNumberValue(); },
        "genre": n => { audio.genre = n.getStringValue(); },
        "hasDrm": n => { audio.hasDrm = n.getBooleanValue(); },
        "isVariableBitrate": n => { audio.isVariableBitrate = n.getBooleanValue(); },
        "title": n => { audio.title = n.getStringValue(); },
        "track": n => { audio.track = n.getNumberValue(); },
        "trackCount": n => { audio.trackCount = n.getNumberValue(); },
        "year": n => { audio.year = n.getNumberValue(); },
    };
}

function deserializeIntoAlbum(album = {}) {
    return {
        "coverImageItemId": n => { album.coverImageItemId = n.getStringValue(); },
    };
}

function deserializeIntoBundle(bundle = {}) {
    return {
        "album": n => { bundle.album = n.getObject(deserializeIntoAlbum); },
        "childCount": n => { bundle.childCount = n.getNumberValue(); },
    };
}

function deserializeIntoDeleted(deleted = {}) {
    return {
        "state": n => { deleted.state = n.getStringValue(); },
    };
}

var DriveItemSourceApplication;
(function (DriveItemSourceApplication) {
    DriveItemSourceApplication["Teams"] = "teams";
    DriveItemSourceApplication["Yammer"] = "yammer";
    DriveItemSourceApplication["SharePoint"] = "sharePoint";
    DriveItemSourceApplication["OneDrive"] = "oneDrive";
    DriveItemSourceApplication["Stream"] = "stream";
    DriveItemSourceApplication["PowerPoint"] = "powerPoint";
    DriveItemSourceApplication["Office"] = "office";
    DriveItemSourceApplication["UnknownFutureValue"] = "unknownFutureValue";
})(DriveItemSourceApplication || (DriveItemSourceApplication = {}));

function deserializeIntoDriveItemSource(driveItemSource = {}) {
    return {
        "application": n => { driveItemSource.application = n.getEnumValue(DriveItemSourceApplication); },
        "externalId": n => { driveItemSource.externalId = n.getStringValue(); },
    };
}

function deserializeIntoPublicationFacet(publicationFacet = {}) {
    return {
        "level": n => { publicationFacet.level = n.getStringValue(); },
        "versionId": n => { publicationFacet.versionId = n.getStringValue(); },
    };
}

function deserializeIntoBaseItemVersion(baseItemVersion = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(baseItemVersion)), { "lastModifiedBy": n => { baseItemVersion.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedDateTime": n => { baseItemVersion.lastModifiedDateTime = n.getDateValue(); }, "publication": n => { baseItemVersion.publication = n.getObject(deserializeIntoPublicationFacet); } });
}

function deserializeIntoDriveItemVersion(driveItemVersion = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItemVersion(driveItemVersion)), { "content": n => { driveItemVersion.content = n.getStringValue(); }, "size": n => { driveItemVersion.size = n.getNumberValue(); } });
}

function deserializeIntoHashes(hashes = {}) {
    return {
        "crc32Hash": n => { hashes.crc32Hash = n.getStringValue(); },
        "quickXorHash": n => { hashes.quickXorHash = n.getStringValue(); },
        "sha1Hash": n => { hashes.sha1Hash = n.getStringValue(); },
        "sha256Hash": n => { hashes.sha256Hash = n.getStringValue(); },
    };
}

function deserializeIntoFile(file = {}) {
    return {
        "hashes": n => { file.hashes = n.getObject(deserializeIntoHashes); },
        "mimeType": n => { file.mimeType = n.getStringValue(); },
        "processingMetadata": n => { file.processingMetadata = n.getBooleanValue(); },
    };
}

function deserializeIntoFileSystemInfo(fileSystemInfo = {}) {
    return {
        "createdDateTime": n => { fileSystemInfo.createdDateTime = n.getDateValue(); },
        "lastAccessedDateTime": n => { fileSystemInfo.lastAccessedDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { fileSystemInfo.lastModifiedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoFolderView(folderView = {}) {
    return {
        "sortBy": n => { folderView.sortBy = n.getStringValue(); },
        "sortOrder": n => { folderView.sortOrder = n.getStringValue(); },
        "viewType": n => { folderView.viewType = n.getStringValue(); },
    };
}

function deserializeIntoFolder(folder = {}) {
    return {
        "childCount": n => { folder.childCount = n.getNumberValue(); },
        "view": n => { folder.view = n.getObject(deserializeIntoFolderView); },
    };
}

function deserializeIntoGeoCoordinates(geoCoordinates = {}) {
    return {
        "altitude": n => { geoCoordinates.altitude = n.getNumberValue(); },
        "latitude": n => { geoCoordinates.latitude = n.getNumberValue(); },
        "longitude": n => { geoCoordinates.longitude = n.getNumberValue(); },
    };
}

function deserializeIntoImage(image = {}) {
    return {
        "height": n => { image.height = n.getNumberValue(); },
        "width": n => { image.width = n.getNumberValue(); },
    };
}

function deserializeIntoCommentAction(commentAction = {}) {
    return {
        "isReply": n => { commentAction.isReply = n.getBooleanValue(); },
        "parentAuthor": n => { commentAction.parentAuthor = n.getObject(deserializeIntoIdentitySet); },
        "participants": n => { commentAction.participants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIdentitySet); },
    };
}

function deserializeIntoCreateAction(createAction = {}) {
    return {};
}

function deserializeIntoDeleteAction(deleteAction = {}) {
    return {
        "name": n => { deleteAction.name = n.getStringValue(); },
        "objectType": n => { deleteAction.objectType = n.getStringValue(); },
    };
}

function deserializeIntoEditAction(editAction = {}) {
    return {};
}

function deserializeIntoMentionAction(mentionAction = {}) {
    return {
        "mentionees": n => { mentionAction.mentionees = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIdentitySet); },
    };
}

function deserializeIntoMoveAction(moveAction = {}) {
    return {
        "from": n => { moveAction.from = n.getStringValue(); },
        "to": n => { moveAction.to = n.getStringValue(); },
    };
}

function deserializeIntoRenameAction(renameAction = {}) {
    return {
        "newName": n => { renameAction.newName = n.getStringValue(); },
        "oldName": n => { renameAction.oldName = n.getStringValue(); },
    };
}

function deserializeIntoRestoreAction(restoreAction = {}) {
    return {};
}

function deserializeIntoShareAction(shareAction = {}) {
    return {
        "recipients": n => { shareAction.recipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIdentitySet); },
    };
}

function deserializeIntoVersionAction(versionAction = {}) {
    return {
        "newVersion": n => { versionAction.newVersion = n.getStringValue(); },
    };
}

function deserializeIntoItemActionSet(itemActionSet = {}) {
    return {
        "comment": n => { itemActionSet.comment = n.getObject(deserializeIntoCommentAction); },
        "create": n => { itemActionSet.create = n.getObject(deserializeIntoCreateAction); },
        "delete": n => { itemActionSet.delete = n.getObject(deserializeIntoDeleteAction); },
        "edit": n => { itemActionSet.edit = n.getObject(deserializeIntoEditAction); },
        "mention": n => { itemActionSet.mention = n.getObject(deserializeIntoMentionAction); },
        "move": n => { itemActionSet.move = n.getObject(deserializeIntoMoveAction); },
        "rename": n => { itemActionSet.rename = n.getObject(deserializeIntoRenameAction); },
        "restore": n => { itemActionSet.restore = n.getObject(deserializeIntoRestoreAction); },
        "share": n => { itemActionSet.share = n.getObject(deserializeIntoShareAction); },
        "version": n => { itemActionSet.version = n.getObject(deserializeIntoVersionAction); },
    };
}

function deserializeIntoItemActivityTimeSet(itemActivityTimeSet = {}) {
    return {
        "lastRecordedDateTime": n => { itemActivityTimeSet.lastRecordedDateTime = n.getDateValue(); },
        "observedDateTime": n => { itemActivityTimeSet.observedDateTime = n.getDateValue(); },
        "recordedDateTime": n => { itemActivityTimeSet.recordedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoContentTypeInfo(contentTypeInfo = {}) {
    return {
        "id": n => { contentTypeInfo.id = n.getStringValue(); },
        "name": n => { contentTypeInfo.name = n.getStringValue(); },
    };
}

function deserializeIntoDocumentSetVersionItem(documentSetVersionItem = {}) {
    return {
        "itemId": n => { documentSetVersionItem.itemId = n.getStringValue(); },
        "title": n => { documentSetVersionItem.title = n.getStringValue(); },
        "versionId": n => { documentSetVersionItem.versionId = n.getStringValue(); },
    };
}

function deserializeIntoFieldValueSet(fieldValueSet = {}) {
    return Object.assign({}, deserializeIntoEntity(fieldValueSet));
}

function deserializeIntoListItemVersion(listItemVersion = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItemVersion(listItemVersion)), { "fields": n => { listItemVersion.fields = n.getObject(deserializeIntoFieldValueSet); } });
}

function deserializeIntoDocumentSetVersion(documentSetVersion = {}) {
    return Object.assign(Object.assign({}, deserializeIntoListItemVersion(documentSetVersion)), { "comment": n => { documentSetVersion.comment = n.getStringValue(); }, "createdBy": n => { documentSetVersion.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { documentSetVersion.createdDateTime = n.getDateValue(); }, "items": n => { documentSetVersion.items = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDocumentSetVersionItem); }, "shouldCaptureMinorVersion": n => { documentSetVersion.shouldCaptureMinorVersion = n.getBooleanValue(); } });
}

function deserializeIntoIncompleteData(incompleteData = {}) {
    return {
        "missingDataBeforeDateTime": n => { incompleteData.missingDataBeforeDateTime = n.getDateValue(); },
        "wasThrottled": n => { incompleteData.wasThrottled = n.getBooleanValue(); },
    };
}

function deserializeIntoItemActionStat(itemActionStat = {}) {
    return {
        "actionCount": n => { itemActionStat.actionCount = n.getNumberValue(); },
        "actorCount": n => { itemActionStat.actorCount = n.getNumberValue(); },
    };
}

function deserializeIntoAccessAction(accessAction = {}) {
    return {};
}

function deserializeIntoItemActivity(itemActivity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(itemActivity)), { "access": n => { itemActivity.access = n.getObject(deserializeIntoAccessAction); }, "activityDateTime": n => { itemActivity.activityDateTime = n.getDateValue(); }, "actor": n => { itemActivity.actor = n.getObject(deserializeIntoIdentitySet); }, "driveItem": n => { itemActivity.driveItem = n.getObject(deserializeIntoDriveItem); } });
}

function deserializeIntoItemActivityStat(itemActivityStat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(itemActivityStat)), { "access": n => { itemActivityStat.access = n.getObject(deserializeIntoItemActionStat); }, "activities": n => { itemActivityStat.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivity); }, "create": n => { itemActivityStat.create = n.getObject(deserializeIntoItemActionStat); }, "delete": n => { itemActivityStat.delete = n.getObject(deserializeIntoItemActionStat); }, "edit": n => { itemActivityStat.edit = n.getObject(deserializeIntoItemActionStat); }, "endDateTime": n => { itemActivityStat.endDateTime = n.getDateValue(); }, "incompleteData": n => { itemActivityStat.incompleteData = n.getObject(deserializeIntoIncompleteData); }, "isTrending": n => { itemActivityStat.isTrending = n.getBooleanValue(); }, "move": n => { itemActivityStat.move = n.getObject(deserializeIntoItemActionStat); }, "startDateTime": n => { itemActivityStat.startDateTime = n.getDateValue(); } });
}

function deserializeIntoItemAnalytics(itemAnalytics = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(itemAnalytics)), { "allTime": n => { itemAnalytics.allTime = n.getObject(deserializeIntoItemActivityStat); }, "itemActivityStats": n => { itemAnalytics.itemActivityStats = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivityStat); }, "lastSevenDays": n => { itemAnalytics.lastSevenDays = n.getObject(deserializeIntoItemActivityStat); } });
}

function deserializeIntoListItem(listItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(listItem)), { "activities": n => { listItem.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivityOLD); }, "analytics": n => { listItem.analytics = n.getObject(deserializeIntoItemAnalytics); }, "contentType": n => { listItem.contentType = n.getObject(deserializeIntoContentTypeInfo); }, "deleted": n => { listItem.deleted = n.getObject(deserializeIntoDeleted); }, "documentSetVersions": n => { listItem.documentSetVersions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDocumentSetVersion); }, "driveItem": n => { listItem.driveItem = n.getObject(deserializeIntoDriveItem); }, "fields": n => { listItem.fields = n.getObject(deserializeIntoFieldValueSet); }, "sharepointIds": n => { listItem.sharepointIds = n.getObject(deserializeIntoSharepointIds); }, "versions": n => { listItem.versions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoListItemVersion); } });
}

function deserializeIntoItemActivityOLD(itemActivityOLD = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(itemActivityOLD)), { "action": n => { itemActivityOLD.action = n.getObject(deserializeIntoItemActionSet); }, "actor": n => { itemActivityOLD.actor = n.getObject(deserializeIntoIdentitySet); }, "driveItem": n => { itemActivityOLD.driveItem = n.getObject(deserializeIntoDriveItem); }, "listItem": n => { itemActivityOLD.listItem = n.getObject(deserializeIntoListItem); }, "times": n => { itemActivityOLD.times = n.getObject(deserializeIntoItemActivityTimeSet); } });
}

function deserializeIntoMalware(malware = {}) {
    return {
        "description": n => { malware.description = n.getStringValue(); },
    };
}

var MediaSourceContentCategory;
(function (MediaSourceContentCategory) {
    MediaSourceContentCategory["Meeting"] = "meeting";
    MediaSourceContentCategory["LiveStream"] = "liveStream";
    MediaSourceContentCategory["Presentation"] = "presentation";
    MediaSourceContentCategory["ScreenRecording"] = "screenRecording";
    MediaSourceContentCategory["UnknownFutureValue"] = "unknownFutureValue";
})(MediaSourceContentCategory || (MediaSourceContentCategory = {}));

function deserializeIntoMediaSource(mediaSource = {}) {
    return {
        "contentCategory": n => { mediaSource.contentCategory = n.getEnumValue(MediaSourceContentCategory); },
    };
}

function deserializeIntoMedia(media = {}) {
    return {
        "isTranscriptionShown": n => { media.isTranscriptionShown = n.getBooleanValue(); },
        "mediaSource": n => { media.mediaSource = n.getObject(deserializeIntoMediaSource); },
    };
}

function deserializeIntoPackage(x = {}) {
    return {
        "type": n => { x.type = n.getStringValue(); },
    };
}

function deserializeIntoPendingContentUpdate(pendingContentUpdate = {}) {
    return {
        "queuedDateTime": n => { pendingContentUpdate.queuedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoPendingOperations(pendingOperations = {}) {
    return {
        "pendingContentUpdate": n => { pendingOperations.pendingContentUpdate = n.getObject(deserializeIntoPendingContentUpdate); },
    };
}

function deserializeIntoSharePointIdentity(sharePointIdentity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentity(sharePointIdentity)), { "loginName": n => { sharePointIdentity.loginName = n.getStringValue(); } });
}

function deserializeIntoSharePointIdentitySet(sharePointIdentitySet = {}) {
    return Object.assign(Object.assign({}, deserializeIntoIdentitySet(sharePointIdentitySet)), { "group": n => { sharePointIdentitySet.group = n.getObject(deserializeIntoIdentity); }, "siteGroup": n => { sharePointIdentitySet.siteGroup = n.getObject(deserializeIntoSharePointIdentity); }, "siteUser": n => { sharePointIdentitySet.siteUser = n.getObject(deserializeIntoSharePointIdentity); } });
}

function deserializeIntoSharingInvitation(sharingInvitation = {}) {
    return {
        "email": n => { sharingInvitation.email = n.getStringValue(); },
        "invitedBy": n => { sharingInvitation.invitedBy = n.getObject(deserializeIntoIdentitySet); },
        "redeemedBy": n => { sharingInvitation.redeemedBy = n.getStringValue(); },
        "signInRequired": n => { sharingInvitation.signInRequired = n.getBooleanValue(); },
    };
}

function deserializeIntoSharingLink(sharingLink = {}) {
    return {
        "application": n => { sharingLink.application = n.getObject(deserializeIntoIdentity); },
        "configuratorUrl": n => { sharingLink.configuratorUrl = n.getStringValue(); },
        "preventsDownload": n => { sharingLink.preventsDownload = n.getBooleanValue(); },
        "scope": n => { sharingLink.scope = n.getStringValue(); },
        "type": n => { sharingLink.type = n.getStringValue(); },
        "webHtml": n => { sharingLink.webHtml = n.getStringValue(); },
        "webUrl": n => { sharingLink.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoPermission(permission = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(permission)), { "expirationDateTime": n => { permission.expirationDateTime = n.getDateValue(); }, "grantedTo": n => { permission.grantedTo = n.getObject(deserializeIntoIdentitySet); }, "grantedToIdentities": n => { permission.grantedToIdentities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIdentitySet); }, "grantedToIdentitiesV2": n => { permission.grantedToIdentitiesV2 = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSharePointIdentitySet); }, "grantedToV2": n => { permission.grantedToV2 = n.getObject(deserializeIntoSharePointIdentitySet); }, "hasPassword": n => { permission.hasPassword = n.getBooleanValue(); }, "inheritedFrom": n => { permission.inheritedFrom = n.getObject(deserializeIntoItemReference); }, "invitation": n => { permission.invitation = n.getObject(deserializeIntoSharingInvitation); }, "link": n => { permission.link = n.getObject(deserializeIntoSharingLink); }, "roles": n => { permission.roles = n.getCollectionOfPrimitiveValues(); }, "shareId": n => { permission.shareId = n.getStringValue(); } });
}

function deserializeIntoPhoto(photo = {}) {
    return {
        "cameraMake": n => { photo.cameraMake = n.getStringValue(); },
        "cameraModel": n => { photo.cameraModel = n.getStringValue(); },
        "exposureDenominator": n => { photo.exposureDenominator = n.getNumberValue(); },
        "exposureNumerator": n => { photo.exposureNumerator = n.getNumberValue(); },
        "fNumber": n => { photo.fNumber = n.getNumberValue(); },
        "focalLength": n => { photo.focalLength = n.getNumberValue(); },
        "iso": n => { photo.iso = n.getNumberValue(); },
        "orientation": n => { photo.orientation = n.getNumberValue(); },
        "takenDateTime": n => { photo.takenDateTime = n.getDateValue(); },
    };
}

function deserializeIntoShared(shared = {}) {
    return {
        "owner": n => { shared.owner = n.getObject(deserializeIntoIdentitySet); },
        "scope": n => { shared.scope = n.getStringValue(); },
        "sharedBy": n => { shared.sharedBy = n.getObject(deserializeIntoIdentitySet); },
        "sharedDateTime": n => { shared.sharedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoSpecialFolder(specialFolder = {}) {
    return {
        "name": n => { specialFolder.name = n.getStringValue(); },
    };
}

function deserializeIntoVideo(video = {}) {
    return {
        "audioBitsPerSample": n => { video.audioBitsPerSample = n.getNumberValue(); },
        "audioChannels": n => { video.audioChannels = n.getNumberValue(); },
        "audioFormat": n => { video.audioFormat = n.getStringValue(); },
        "audioSamplesPerSecond": n => { video.audioSamplesPerSecond = n.getNumberValue(); },
        "bitrate": n => { video.bitrate = n.getNumberValue(); },
        "duration": n => { video.duration = n.getNumberValue(); },
        "fourCC": n => { video.fourCC = n.getStringValue(); },
        "frameRate": n => { video.frameRate = n.getNumberValue(); },
        "height": n => { video.height = n.getNumberValue(); },
        "width": n => { video.width = n.getNumberValue(); },
    };
}

function deserializeIntoRemoteItem(remoteItem = {}) {
    return {
        "createdBy": n => { remoteItem.createdBy = n.getObject(deserializeIntoIdentitySet); },
        "createdDateTime": n => { remoteItem.createdDateTime = n.getDateValue(); },
        "file": n => { remoteItem.file = n.getObject(deserializeIntoFile); },
        "fileSystemInfo": n => { remoteItem.fileSystemInfo = n.getObject(deserializeIntoFileSystemInfo); },
        "folder": n => { remoteItem.folder = n.getObject(deserializeIntoFolder); },
        "id": n => { remoteItem.id = n.getStringValue(); },
        "image": n => { remoteItem.image = n.getObject(deserializeIntoImage); },
        "lastModifiedBy": n => { remoteItem.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); },
        "lastModifiedDateTime": n => { remoteItem.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { remoteItem.name = n.getStringValue(); },
        "package": n => { remoteItem.package = n.getObject(deserializeIntoPackage); },
        "parentReference": n => { remoteItem.parentReference = n.getObject(deserializeIntoItemReference); },
        "shared": n => { remoteItem.shared = n.getObject(deserializeIntoShared); },
        "sharepointIds": n => { remoteItem.sharepointIds = n.getObject(deserializeIntoSharepointIds); },
        "size": n => { remoteItem.size = n.getNumberValue(); },
        "specialFolder": n => { remoteItem.specialFolder = n.getObject(deserializeIntoSpecialFolder); },
        "video": n => { remoteItem.video = n.getObject(deserializeIntoVideo); },
        "webDavUrl": n => { remoteItem.webDavUrl = n.getStringValue(); },
        "webUrl": n => { remoteItem.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoRoot(root = {}) {
    return {};
}

function deserializeIntoSearchResult(searchResult = {}) {
    return {
        "onClickTelemetryUrl": n => { searchResult.onClickTelemetryUrl = n.getStringValue(); },
    };
}

function deserializeIntoSubscription(subscription = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(subscription)), { "applicationId": n => { subscription.applicationId = n.getStringValue(); }, "changeType": n => { subscription.changeType = n.getStringValue(); }, "clientState": n => { subscription.clientState = n.getStringValue(); }, "creatorId": n => { subscription.creatorId = n.getStringValue(); }, "encryptionCertificate": n => { subscription.encryptionCertificate = n.getStringValue(); }, "encryptionCertificateId": n => { subscription.encryptionCertificateId = n.getStringValue(); }, "expirationDateTime": n => { subscription.expirationDateTime = n.getDateValue(); }, "includeResourceData": n => { subscription.includeResourceData = n.getBooleanValue(); }, "latestSupportedTlsVersion": n => { subscription.latestSupportedTlsVersion = n.getStringValue(); }, "lifecycleNotificationUrl": n => { subscription.lifecycleNotificationUrl = n.getStringValue(); }, "notificationContentType": n => { subscription.notificationContentType = n.getStringValue(); }, "notificationQueryOptions": n => { subscription.notificationQueryOptions = n.getStringValue(); }, "notificationUrl": n => { subscription.notificationUrl = n.getStringValue(); }, "notificationUrlAppId": n => { subscription.notificationUrlAppId = n.getStringValue(); }, "resource": n => { subscription.resource = n.getStringValue(); } });
}

function deserializeIntoThumbnail(thumbnail = {}) {
    return {
        "content": n => { thumbnail.content = n.getStringValue(); },
        "height": n => { thumbnail.height = n.getNumberValue(); },
        "sourceItemId": n => { thumbnail.sourceItemId = n.getStringValue(); },
        "url": n => { thumbnail.url = n.getStringValue(); },
        "width": n => { thumbnail.width = n.getNumberValue(); },
    };
}

function deserializeIntoThumbnailSet(thumbnailSet = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(thumbnailSet)), { "large": n => { thumbnailSet.large = n.getObject(deserializeIntoThumbnail); }, "medium": n => { thumbnailSet.medium = n.getObject(deserializeIntoThumbnail); }, "small": n => { thumbnailSet.small = n.getObject(deserializeIntoThumbnail); }, "source": n => { thumbnailSet.source = n.getObject(deserializeIntoThumbnail); } });
}

function deserializeIntoWorkbookApplication(workbookApplication = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookApplication)), { "calculationMode": n => { workbookApplication.calculationMode = n.getStringValue(); } });
}

function deserializeIntoWorkbookCommentReply(workbookCommentReply = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookCommentReply)), { "content": n => { workbookCommentReply.content = n.getStringValue(); }, "contentType": n => { workbookCommentReply.contentType = n.getStringValue(); } });
}

function deserializeIntoWorkbookComment(workbookComment = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookComment)), { "content": n => { workbookComment.content = n.getStringValue(); }, "contentType": n => { workbookComment.contentType = n.getStringValue(); }, "replies": n => { workbookComment.replies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookCommentReply); } });
}

function deserializeIntoWorkbookFunctions(workbookFunctions = {}) {
    return Object.assign({}, deserializeIntoEntity(workbookFunctions));
}

function deserializeIntoJson(json = {}) {
    return {};
}

function deserializeIntoWorkbookChartFill(workbookChartFill = {}) {
    return Object.assign({}, deserializeIntoEntity(workbookChartFill));
}

function deserializeIntoWorkbookChartFont(workbookChartFont = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartFont)), { "bold": n => { workbookChartFont.bold = n.getBooleanValue(); }, "color": n => { workbookChartFont.color = n.getStringValue(); }, "italic": n => { workbookChartFont.italic = n.getBooleanValue(); }, "name": n => { workbookChartFont.name = n.getStringValue(); }, "size": n => { workbookChartFont.size = n.getNumberValue(); }, "underline": n => { workbookChartFont.underline = n.getStringValue(); } });
}

function deserializeIntoWorkbookChartAreaFormat(workbookChartAreaFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAreaFormat)), { "fill": n => { workbookChartAreaFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); }, "font": n => { workbookChartAreaFormat.font = n.getObject(deserializeIntoWorkbookChartFont); } });
}

function deserializeIntoWorkbookChartLineFormat(workbookChartLineFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartLineFormat)), { "color": n => { workbookChartLineFormat.color = n.getStringValue(); } });
}

function deserializeIntoWorkbookChartAxisFormat(workbookChartAxisFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAxisFormat)), { "font": n => { workbookChartAxisFormat.font = n.getObject(deserializeIntoWorkbookChartFont); }, "line": n => { workbookChartAxisFormat.line = n.getObject(deserializeIntoWorkbookChartLineFormat); } });
}

function deserializeIntoWorkbookChartAxisTitleFormat(workbookChartAxisTitleFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAxisTitleFormat)), { "font": n => { workbookChartAxisTitleFormat.font = n.getObject(deserializeIntoWorkbookChartFont); } });
}

function deserializeIntoWorkbookChartAxisTitle(workbookChartAxisTitle = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAxisTitle)), { "format": n => { workbookChartAxisTitle.format = n.getObject(deserializeIntoWorkbookChartAxisTitleFormat); }, "text": n => { workbookChartAxisTitle.text = n.getStringValue(); }, "visible": n => { workbookChartAxisTitle.visible = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookChartGridlinesFormat(workbookChartGridlinesFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartGridlinesFormat)), { "line": n => { workbookChartGridlinesFormat.line = n.getObject(deserializeIntoWorkbookChartLineFormat); } });
}

function deserializeIntoWorkbookChartGridlines(workbookChartGridlines = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartGridlines)), { "format": n => { workbookChartGridlines.format = n.getObject(deserializeIntoWorkbookChartGridlinesFormat); }, "visible": n => { workbookChartGridlines.visible = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookChartAxis(workbookChartAxis = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAxis)), { "format": n => { workbookChartAxis.format = n.getObject(deserializeIntoWorkbookChartAxisFormat); }, "majorGridlines": n => { workbookChartAxis.majorGridlines = n.getObject(deserializeIntoWorkbookChartGridlines); }, "majorUnit": n => { workbookChartAxis.majorUnit = n.getObject(deserializeIntoJson); }, "maximum": n => { workbookChartAxis.maximum = n.getObject(deserializeIntoJson); }, "minimum": n => { workbookChartAxis.minimum = n.getObject(deserializeIntoJson); }, "minorGridlines": n => { workbookChartAxis.minorGridlines = n.getObject(deserializeIntoWorkbookChartGridlines); }, "minorUnit": n => { workbookChartAxis.minorUnit = n.getObject(deserializeIntoJson); }, "title": n => { workbookChartAxis.title = n.getObject(deserializeIntoWorkbookChartAxisTitle); } });
}

function deserializeIntoWorkbookChartAxes(workbookChartAxes = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartAxes)), { "categoryAxis": n => { workbookChartAxes.categoryAxis = n.getObject(deserializeIntoWorkbookChartAxis); }, "seriesAxis": n => { workbookChartAxes.seriesAxis = n.getObject(deserializeIntoWorkbookChartAxis); }, "valueAxis": n => { workbookChartAxes.valueAxis = n.getObject(deserializeIntoWorkbookChartAxis); } });
}

function deserializeIntoWorkbookChartDataLabelFormat(workbookChartDataLabelFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartDataLabelFormat)), { "fill": n => { workbookChartDataLabelFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); }, "font": n => { workbookChartDataLabelFormat.font = n.getObject(deserializeIntoWorkbookChartFont); } });
}

function deserializeIntoWorkbookChartDataLabels(workbookChartDataLabels = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartDataLabels)), { "format": n => { workbookChartDataLabels.format = n.getObject(deserializeIntoWorkbookChartDataLabelFormat); }, "position": n => { workbookChartDataLabels.position = n.getStringValue(); }, "separator": n => { workbookChartDataLabels.separator = n.getStringValue(); }, "showBubbleSize": n => { workbookChartDataLabels.showBubbleSize = n.getBooleanValue(); }, "showCategoryName": n => { workbookChartDataLabels.showCategoryName = n.getBooleanValue(); }, "showLegendKey": n => { workbookChartDataLabels.showLegendKey = n.getBooleanValue(); }, "showPercentage": n => { workbookChartDataLabels.showPercentage = n.getBooleanValue(); }, "showSeriesName": n => { workbookChartDataLabels.showSeriesName = n.getBooleanValue(); }, "showValue": n => { workbookChartDataLabels.showValue = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookChartLegendFormat(workbookChartLegendFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartLegendFormat)), { "fill": n => { workbookChartLegendFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); }, "font": n => { workbookChartLegendFormat.font = n.getObject(deserializeIntoWorkbookChartFont); } });
}

function deserializeIntoWorkbookChartLegend(workbookChartLegend = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartLegend)), { "format": n => { workbookChartLegend.format = n.getObject(deserializeIntoWorkbookChartLegendFormat); }, "overlay": n => { workbookChartLegend.overlay = n.getBooleanValue(); }, "position": n => { workbookChartLegend.position = n.getStringValue(); }, "visible": n => { workbookChartLegend.visible = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookChartPointFormat(workbookChartPointFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartPointFormat)), { "fill": n => { workbookChartPointFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); } });
}

function deserializeIntoWorkbookChartPoint(workbookChartPoint = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartPoint)), { "format": n => { workbookChartPoint.format = n.getObject(deserializeIntoWorkbookChartPointFormat); }, "value": n => { workbookChartPoint.value = n.getObject(deserializeIntoJson); } });
}

function deserializeIntoWorkbookChartSeriesFormat(workbookChartSeriesFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartSeriesFormat)), { "fill": n => { workbookChartSeriesFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); }, "line": n => { workbookChartSeriesFormat.line = n.getObject(deserializeIntoWorkbookChartLineFormat); } });
}

function deserializeIntoWorkbookChartSeries(workbookChartSeries = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartSeries)), { "format": n => { workbookChartSeries.format = n.getObject(deserializeIntoWorkbookChartSeriesFormat); }, "name": n => { workbookChartSeries.name = n.getStringValue(); }, "points": n => { workbookChartSeries.points = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookChartPoint); } });
}

function deserializeIntoWorkbookChartTitleFormat(workbookChartTitleFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartTitleFormat)), { "fill": n => { workbookChartTitleFormat.fill = n.getObject(deserializeIntoWorkbookChartFill); }, "font": n => { workbookChartTitleFormat.font = n.getObject(deserializeIntoWorkbookChartFont); } });
}

function deserializeIntoWorkbookChartTitle(workbookChartTitle = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChartTitle)), { "format": n => { workbookChartTitle.format = n.getObject(deserializeIntoWorkbookChartTitleFormat); }, "overlay": n => { workbookChartTitle.overlay = n.getBooleanValue(); }, "text": n => { workbookChartTitle.text = n.getStringValue(); }, "visible": n => { workbookChartTitle.visible = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookChart(workbookChart = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookChart)), { "axes": n => { workbookChart.axes = n.getObject(deserializeIntoWorkbookChartAxes); }, "dataLabels": n => { workbookChart.dataLabels = n.getObject(deserializeIntoWorkbookChartDataLabels); }, "format": n => { workbookChart.format = n.getObject(deserializeIntoWorkbookChartAreaFormat); }, "height": n => { workbookChart.height = n.getNumberValue(); }, "left": n => { workbookChart.left = n.getNumberValue(); }, "legend": n => { workbookChart.legend = n.getObject(deserializeIntoWorkbookChartLegend); }, "name": n => { workbookChart.name = n.getStringValue(); }, "series": n => { workbookChart.series = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookChartSeries); }, "title": n => { workbookChart.title = n.getObject(deserializeIntoWorkbookChartTitle); }, "top": n => { workbookChart.top = n.getNumberValue(); }, "width": n => { workbookChart.width = n.getNumberValue(); }, "worksheet": n => { workbookChart.worksheet = n.getObject(deserializeIntoWorkbookWorksheet); } });
}

function deserializeIntoWorkbookPivotTable(workbookPivotTable = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookPivotTable)), { "name": n => { workbookPivotTable.name = n.getStringValue(); }, "worksheet": n => { workbookPivotTable.worksheet = n.getObject(deserializeIntoWorkbookWorksheet); } });
}

function deserializeIntoWorkbookIcon(workbookIcon = {}) {
    return {
        "index": n => { workbookIcon.index = n.getNumberValue(); },
        "set": n => { workbookIcon.set = n.getStringValue(); },
    };
}

function deserializeIntoWorkbookFilterCriteria(workbookFilterCriteria = {}) {
    return {
        "color": n => { workbookFilterCriteria.color = n.getStringValue(); },
        "criterion1": n => { workbookFilterCriteria.criterion1 = n.getStringValue(); },
        "criterion2": n => { workbookFilterCriteria.criterion2 = n.getStringValue(); },
        "dynamicCriteria": n => { workbookFilterCriteria.dynamicCriteria = n.getStringValue(); },
        "filterOn": n => { workbookFilterCriteria.filterOn = n.getStringValue(); },
        "icon": n => { workbookFilterCriteria.icon = n.getObject(deserializeIntoWorkbookIcon); },
        "operator": n => { workbookFilterCriteria.operator = n.getStringValue(); },
        "values": n => { workbookFilterCriteria.values = n.getObject(deserializeIntoJson); },
    };
}

function deserializeIntoWorkbookFilter(workbookFilter = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookFilter)), { "criteria": n => { workbookFilter.criteria = n.getObject(deserializeIntoWorkbookFilterCriteria); } });
}

function deserializeIntoWorkbookTableColumn(workbookTableColumn = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookTableColumn)), { "filter": n => { workbookTableColumn.filter = n.getObject(deserializeIntoWorkbookFilter); }, "index": n => { workbookTableColumn.index = n.getNumberValue(); }, "name": n => { workbookTableColumn.name = n.getStringValue(); }, "values": n => { workbookTableColumn.values = n.getObject(deserializeIntoJson); } });
}

function deserializeIntoWorkbookTableRow(workbookTableRow = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookTableRow)), { "index": n => { workbookTableRow.index = n.getNumberValue(); }, "values": n => { workbookTableRow.values = n.getObject(deserializeIntoJson); } });
}

function deserializeIntoWorkbookSortField(workbookSortField = {}) {
    return {
        "ascending": n => { workbookSortField.ascending = n.getBooleanValue(); },
        "color": n => { workbookSortField.color = n.getStringValue(); },
        "dataOption": n => { workbookSortField.dataOption = n.getStringValue(); },
        "icon": n => { workbookSortField.icon = n.getObject(deserializeIntoWorkbookIcon); },
        "key": n => { workbookSortField.key = n.getNumberValue(); },
        "sortOn": n => { workbookSortField.sortOn = n.getStringValue(); },
    };
}

function deserializeIntoWorkbookTableSort(workbookTableSort = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookTableSort)), { "fields": n => { workbookTableSort.fields = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookSortField); }, "matchCase": n => { workbookTableSort.matchCase = n.getBooleanValue(); }, "method": n => { workbookTableSort.method = n.getStringValue(); } });
}

function deserializeIntoWorkbookTable(workbookTable = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookTable)), { "columns": n => { workbookTable.columns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookTableColumn); }, "highlightFirstColumn": n => { workbookTable.highlightFirstColumn = n.getBooleanValue(); }, "highlightLastColumn": n => { workbookTable.highlightLastColumn = n.getBooleanValue(); }, "legacyId": n => { workbookTable.legacyId = n.getStringValue(); }, "name": n => { workbookTable.name = n.getStringValue(); }, "rows": n => { workbookTable.rows = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookTableRow); }, "showBandedColumns": n => { workbookTable.showBandedColumns = n.getBooleanValue(); }, "showBandedRows": n => { workbookTable.showBandedRows = n.getBooleanValue(); }, "showFilterButton": n => { workbookTable.showFilterButton = n.getBooleanValue(); }, "showHeaders": n => { workbookTable.showHeaders = n.getBooleanValue(); }, "showTotals": n => { workbookTable.showTotals = n.getBooleanValue(); }, "sort": n => { workbookTable.sort = n.getObject(deserializeIntoWorkbookTableSort); }, "style": n => { workbookTable.style = n.getStringValue(); }, "worksheet": n => { workbookTable.worksheet = n.getObject(deserializeIntoWorkbookWorksheet); } });
}

function deserializeIntoWorkbookWorksheetProtectionOptions(workbookWorksheetProtectionOptions = {}) {
    return {
        "allowAutoFilter": n => { workbookWorksheetProtectionOptions.allowAutoFilter = n.getBooleanValue(); },
        "allowDeleteColumns": n => { workbookWorksheetProtectionOptions.allowDeleteColumns = n.getBooleanValue(); },
        "allowDeleteRows": n => { workbookWorksheetProtectionOptions.allowDeleteRows = n.getBooleanValue(); },
        "allowFormatCells": n => { workbookWorksheetProtectionOptions.allowFormatCells = n.getBooleanValue(); },
        "allowFormatColumns": n => { workbookWorksheetProtectionOptions.allowFormatColumns = n.getBooleanValue(); },
        "allowFormatRows": n => { workbookWorksheetProtectionOptions.allowFormatRows = n.getBooleanValue(); },
        "allowInsertColumns": n => { workbookWorksheetProtectionOptions.allowInsertColumns = n.getBooleanValue(); },
        "allowInsertHyperlinks": n => { workbookWorksheetProtectionOptions.allowInsertHyperlinks = n.getBooleanValue(); },
        "allowInsertRows": n => { workbookWorksheetProtectionOptions.allowInsertRows = n.getBooleanValue(); },
        "allowPivotTables": n => { workbookWorksheetProtectionOptions.allowPivotTables = n.getBooleanValue(); },
        "allowSort": n => { workbookWorksheetProtectionOptions.allowSort = n.getBooleanValue(); },
    };
}

function deserializeIntoWorkbookWorksheetProtection(workbookWorksheetProtection = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookWorksheetProtection)), { "options": n => { workbookWorksheetProtection.options = n.getObject(deserializeIntoWorkbookWorksheetProtectionOptions); }, "protected": n => { workbookWorksheetProtection.protected = n.getBooleanValue(); } });
}

function deserializeIntoWorkbookWorksheet(workbookWorksheet = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookWorksheet)), { "charts": n => { workbookWorksheet.charts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookChart); }, "name": n => { workbookWorksheet.name = n.getStringValue(); }, "names": n => { workbookWorksheet.names = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookNamedItem); }, "pivotTables": n => { workbookWorksheet.pivotTables = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookPivotTable); }, "position": n => { workbookWorksheet.position = n.getNumberValue(); }, "protection": n => { workbookWorksheet.protection = n.getObject(deserializeIntoWorkbookWorksheetProtection); }, "tables": n => { workbookWorksheet.tables = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookTable); }, "visibility": n => { workbookWorksheet.visibility = n.getStringValue(); } });
}

function deserializeIntoWorkbookNamedItem(workbookNamedItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookNamedItem)), { "comment": n => { workbookNamedItem.comment = n.getStringValue(); }, "name": n => { workbookNamedItem.name = n.getStringValue(); }, "scope": n => { workbookNamedItem.scope = n.getStringValue(); }, "type": n => { workbookNamedItem.type = n.getStringValue(); }, "value": n => { workbookNamedItem.value = n.getObject(deserializeIntoJson); }, "visible": n => { workbookNamedItem.visible = n.getBooleanValue(); }, "worksheet": n => { workbookNamedItem.worksheet = n.getObject(deserializeIntoWorkbookWorksheet); } });
}

function deserializeIntoWorkbookOperationError(workbookOperationError = {}) {
    return {
        "code": n => { workbookOperationError.code = n.getStringValue(); },
        "innerError": n => { workbookOperationError.innerError = n.getObject(deserializeIntoWorkbookOperationError); },
        "message": n => { workbookOperationError.message = n.getStringValue(); },
    };
}

var WorkbookOperationStatus;
(function (WorkbookOperationStatus) {
    WorkbookOperationStatus["NotStarted"] = "notStarted";
    WorkbookOperationStatus["Running"] = "running";
    WorkbookOperationStatus["Succeeded"] = "succeeded";
    WorkbookOperationStatus["Failed"] = "failed";
})(WorkbookOperationStatus || (WorkbookOperationStatus = {}));

function deserializeIntoWorkbookOperation(workbookOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbookOperation)), { "error": n => { workbookOperation.error_escaped = n.getObject(deserializeIntoWorkbookOperationError); }, "resourceLocation": n => { workbookOperation.resourceLocation = n.getStringValue(); }, "status": n => { workbookOperation.status = n.getEnumValue(WorkbookOperationStatus); } });
}

function deserializeIntoWorkbook(workbook = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(workbook)), { "application": n => { workbook.application = n.getObject(deserializeIntoWorkbookApplication); }, "comments": n => { workbook.comments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookComment); }, "functions": n => { workbook.functions = n.getObject(deserializeIntoWorkbookFunctions); }, "names": n => { workbook.names = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookNamedItem); }, "operations": n => { workbook.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookOperation); }, "tables": n => { workbook.tables = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookTable); }, "worksheets": n => { workbook.worksheets = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkbookWorksheet); } });
}

function deserializeIntoDriveItem(driveItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(driveItem)), { "activities": n => { driveItem.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivityOLD); }, "analytics": n => { driveItem.analytics = n.getObject(deserializeIntoItemAnalytics); }, "audio": n => { driveItem.audio = n.getObject(deserializeIntoAudio); }, "bundle": n => { driveItem.bundle = n.getObject(deserializeIntoBundle); }, "children": n => { driveItem.children = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItem); }, "content": n => { driveItem.content = n.getStringValue(); }, "cTag": n => { driveItem.cTag = n.getStringValue(); }, "deleted": n => { driveItem.deleted = n.getObject(deserializeIntoDeleted); }, "file": n => { driveItem.file = n.getObject(deserializeIntoFile); }, "fileSystemInfo": n => { driveItem.fileSystemInfo = n.getObject(deserializeIntoFileSystemInfo); }, "folder": n => { driveItem.folder = n.getObject(deserializeIntoFolder); }, "image": n => { driveItem.image = n.getObject(deserializeIntoImage); }, "listItem": n => { driveItem.listItem = n.getObject(deserializeIntoListItem); }, "location": n => { driveItem.location = n.getObject(deserializeIntoGeoCoordinates); }, "malware": n => { driveItem.malware = n.getObject(deserializeIntoMalware); }, "media": n => { driveItem.media = n.getObject(deserializeIntoMedia); }, "package": n => { driveItem.package = n.getObject(deserializeIntoPackage); }, "pendingOperations": n => { driveItem.pendingOperations = n.getObject(deserializeIntoPendingOperations); }, "permissions": n => { driveItem.permissions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPermission); }, "photo": n => { driveItem.photo = n.getObject(deserializeIntoPhoto); }, "publication": n => { driveItem.publication = n.getObject(deserializeIntoPublicationFacet); }, "remoteItem": n => { driveItem.remoteItem = n.getObject(deserializeIntoRemoteItem); }, "root": n => { driveItem.root = n.getObject(deserializeIntoRoot); }, "searchResult": n => { driveItem.searchResult = n.getObject(deserializeIntoSearchResult); }, "shared": n => { driveItem.shared = n.getObject(deserializeIntoShared); }, "sharepointIds": n => { driveItem.sharepointIds = n.getObject(deserializeIntoSharepointIds); }, "size": n => { driveItem.size = n.getNumberValue(); }, "source": n => { driveItem.source = n.getObject(deserializeIntoDriveItemSource); }, "specialFolder": n => { driveItem.specialFolder = n.getObject(deserializeIntoSpecialFolder); }, "subscriptions": n => { driveItem.subscriptions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSubscription); }, "thumbnails": n => { driveItem.thumbnails = n.getCollectionOfObjectValuesFromMethod(deserializeIntoThumbnailSet); }, "versions": n => { driveItem.versions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItemVersion); }, "video": n => { driveItem.video = n.getObject(deserializeIntoVideo); }, "webDavUrl": n => { driveItem.webDavUrl = n.getStringValue(); }, "workbook": n => { driveItem.workbook = n.getObject(deserializeIntoWorkbook); } });
}

var ColumnTypes;
(function (ColumnTypes) {
    ColumnTypes["Note"] = "note";
    ColumnTypes["Text"] = "text";
    ColumnTypes["Choice"] = "choice";
    ColumnTypes["Multichoice"] = "multichoice";
    ColumnTypes["Number"] = "number";
    ColumnTypes["Currency"] = "currency";
    ColumnTypes["DateTime"] = "dateTime";
    ColumnTypes["Lookup"] = "lookup";
    ColumnTypes["Boolean"] = "boolean";
    ColumnTypes["User"] = "user";
    ColumnTypes["Url"] = "url";
    ColumnTypes["Calculated"] = "calculated";
    ColumnTypes["Location"] = "location";
    ColumnTypes["Geolocation"] = "geolocation";
    ColumnTypes["Term"] = "term";
    ColumnTypes["Multiterm"] = "multiterm";
    ColumnTypes["Thumbnail"] = "thumbnail";
    ColumnTypes["ApprovalStatus"] = "approvalStatus";
    ColumnTypes["UnknownFutureValue"] = "unknownFutureValue";
})(ColumnTypes || (ColumnTypes = {}));

function deserializeIntoBooleanColumn(booleanColumn = {}) {
    return {};
}

function deserializeIntoCalculatedColumn(calculatedColumn = {}) {
    return {
        "format": n => { calculatedColumn.format = n.getStringValue(); },
        "formula": n => { calculatedColumn.formula = n.getStringValue(); },
        "outputType": n => { calculatedColumn.outputType = n.getStringValue(); },
    };
}

function deserializeIntoChoiceColumn(choiceColumn = {}) {
    return {
        "allowTextEntry": n => { choiceColumn.allowTextEntry = n.getBooleanValue(); },
        "choices": n => { choiceColumn.choices = n.getCollectionOfPrimitiveValues(); },
        "displayAs": n => { choiceColumn.displayAs = n.getStringValue(); },
    };
}

function deserializeIntoDisplayNameLocalization(displayNameLocalization = {}) {
    return {
        "displayName": n => { displayNameLocalization.displayName = n.getStringValue(); },
        "languageTag": n => { displayNameLocalization.languageTag = n.getStringValue(); },
    };
}

function deserializeIntoColumnValidation(columnValidation = {}) {
    return {
        "defaultLanguage": n => { columnValidation.defaultLanguage = n.getStringValue(); },
        "descriptions": n => { columnValidation.descriptions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDisplayNameLocalization); },
        "formula": n => { columnValidation.formula = n.getStringValue(); },
    };
}

function deserializeIntoContentApprovalStatusColumn(contentApprovalStatusColumn = {}) {
    return {};
}

function deserializeIntoCurrencyColumn(currencyColumn = {}) {
    return {
        "locale": n => { currencyColumn.locale = n.getStringValue(); },
    };
}

function deserializeIntoDateTimeColumn(dateTimeColumn = {}) {
    return {
        "displayAs": n => { dateTimeColumn.displayAs = n.getStringValue(); },
        "format": n => { dateTimeColumn.format = n.getStringValue(); },
    };
}

function deserializeIntoDefaultColumnValue(defaultColumnValue = {}) {
    return {
        "formula": n => { defaultColumnValue.formula = n.getStringValue(); },
        "value": n => { defaultColumnValue.value = n.getStringValue(); },
    };
}

function deserializeIntoGeolocationColumn(geolocationColumn = {}) {
    return {};
}

function deserializeIntoHyperlinkOrPictureColumn(hyperlinkOrPictureColumn = {}) {
    return {
        "isPicture": n => { hyperlinkOrPictureColumn.isPicture = n.getBooleanValue(); },
    };
}

function deserializeIntoLookupColumn(lookupColumn = {}) {
    return {
        "allowMultipleValues": n => { lookupColumn.allowMultipleValues = n.getBooleanValue(); },
        "allowUnlimitedLength": n => { lookupColumn.allowUnlimitedLength = n.getBooleanValue(); },
        "columnName": n => { lookupColumn.columnName = n.getStringValue(); },
        "listId": n => { lookupColumn.listId = n.getStringValue(); },
        "primaryLookupColumnId": n => { lookupColumn.primaryLookupColumnId = n.getStringValue(); },
    };
}

function deserializeIntoNumberColumn(numberColumn = {}) {
    return {
        "decimalPlaces": n => { numberColumn.decimalPlaces = n.getStringValue(); },
        "displayAs": n => { numberColumn.displayAs = n.getStringValue(); },
        "maximum": n => { numberColumn.maximum = n.getNumberValue(); },
        "minimum": n => { numberColumn.minimum = n.getNumberValue(); },
    };
}

function deserializeIntoPersonOrGroupColumn(personOrGroupColumn = {}) {
    return {
        "allowMultipleSelection": n => { personOrGroupColumn.allowMultipleSelection = n.getBooleanValue(); },
        "chooseFromType": n => { personOrGroupColumn.chooseFromType = n.getStringValue(); },
        "displayAs": n => { personOrGroupColumn.displayAs = n.getStringValue(); },
    };
}

function deserializeIntoKeyValue(keyValue = {}) {
    return {
        "key": n => { keyValue.key = n.getStringValue(); },
        "value": n => { keyValue.value = n.getStringValue(); },
    };
}

var TermGroupScope;
(function (TermGroupScope) {
    TermGroupScope["Global"] = "global";
    TermGroupScope["System"] = "system";
    TermGroupScope["SiteCollection"] = "siteCollection";
})(TermGroupScope || (TermGroupScope = {}));

function deserializeIntoGroup$1(group = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(group)), { "createdDateTime": n => { group.createdDateTime = n.getDateValue(); }, "description": n => { group.description = n.getStringValue(); }, "displayName": n => { group.displayName = n.getStringValue(); }, "parentSiteId": n => { group.parentSiteId = n.getStringValue(); }, "scope": n => { group.scope = n.getEnumValue(TermGroupScope); }, "sets": n => { group.sets = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSet); } });
}

function deserializeIntoLocalizedName(localizedName = {}) {
    return {
        "languageTag": n => { localizedName.languageTag = n.getStringValue(); },
        "name": n => { localizedName.name = n.getStringValue(); },
    };
}

function deserializeIntoLocalizedDescription(localizedDescription = {}) {
    return {
        "description": n => { localizedDescription.description = n.getStringValue(); },
        "languageTag": n => { localizedDescription.languageTag = n.getStringValue(); },
    };
}

function deserializeIntoLocalizedLabel(localizedLabel = {}) {
    return {
        "isDefault": n => { localizedLabel.isDefault = n.getBooleanValue(); },
        "languageTag": n => { localizedLabel.languageTag = n.getStringValue(); },
        "name": n => { localizedLabel.name = n.getStringValue(); },
    };
}

function deserializeIntoTerm(term = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(term)), { "children": n => { term.children = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTerm); }, "createdDateTime": n => { term.createdDateTime = n.getDateValue(); }, "descriptions": n => { term.descriptions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocalizedDescription); }, "labels": n => { term.labels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocalizedLabel); }, "lastModifiedDateTime": n => { term.lastModifiedDateTime = n.getDateValue(); }, "properties": n => { term.properties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValue); }, "relations": n => { term.relations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRelation); }, "set": n => { term.set = n.getObject(deserializeIntoSet); } });
}

var RelationType;
(function (RelationType) {
    RelationType["Pin"] = "pin";
    RelationType["Reuse"] = "reuse";
})(RelationType || (RelationType = {}));

function deserializeIntoRelation(relation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(relation)), { "fromTerm": n => { relation.fromTerm = n.getObject(deserializeIntoTerm); }, "relationship": n => { relation.relationship = n.getEnumValue(RelationType); }, "set": n => { relation.set = n.getObject(deserializeIntoSet); }, "toTerm": n => { relation.toTerm = n.getObject(deserializeIntoTerm); } });
}

function deserializeIntoSet(set = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(set)), { "children": n => { set.children = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTerm); }, "createdDateTime": n => { set.createdDateTime = n.getDateValue(); }, "description": n => { set.description = n.getStringValue(); }, "localizedNames": n => { set.localizedNames = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocalizedName); }, "parentGroup": n => { set.parentGroup = n.getObject(deserializeIntoGroup$1); }, "properties": n => { set.properties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValue); }, "relations": n => { set.relations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRelation); }, "terms": n => { set.terms = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTerm); } });
}

function deserializeIntoTermColumn(termColumn = {}) {
    return {
        "allowMultipleValues": n => { termColumn.allowMultipleValues = n.getBooleanValue(); },
        "parentTerm": n => { termColumn.parentTerm = n.getObject(deserializeIntoTerm); },
        "showFullyQualifiedName": n => { termColumn.showFullyQualifiedName = n.getBooleanValue(); },
        "termSet": n => { termColumn.termSet = n.getObject(deserializeIntoSet); },
    };
}

function deserializeIntoTextColumn(textColumn = {}) {
    return {
        "allowMultipleLines": n => { textColumn.allowMultipleLines = n.getBooleanValue(); },
        "appendChangesToExistingText": n => { textColumn.appendChangesToExistingText = n.getBooleanValue(); },
        "linesForEditing": n => { textColumn.linesForEditing = n.getNumberValue(); },
        "maxLength": n => { textColumn.maxLength = n.getNumberValue(); },
        "textType": n => { textColumn.textType = n.getStringValue(); },
    };
}

function deserializeIntoThumbnailColumn(thumbnailColumn = {}) {
    return {};
}

function deserializeIntoColumnDefinition(columnDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(columnDefinition)), { "boolean": n => { columnDefinition.boolean = n.getObject(deserializeIntoBooleanColumn); }, "calculated": n => { columnDefinition.calculated = n.getObject(deserializeIntoCalculatedColumn); }, "choice": n => { columnDefinition.choice = n.getObject(deserializeIntoChoiceColumn); }, "columnGroup": n => { columnDefinition.columnGroup = n.getStringValue(); }, "contentApprovalStatus": n => { columnDefinition.contentApprovalStatus = n.getObject(deserializeIntoContentApprovalStatusColumn); }, "currency": n => { columnDefinition.currency = n.getObject(deserializeIntoCurrencyColumn); }, "dateTime": n => { columnDefinition.dateTime = n.getObject(deserializeIntoDateTimeColumn); }, "defaultValue": n => { columnDefinition.defaultValue = n.getObject(deserializeIntoDefaultColumnValue); }, "description": n => { columnDefinition.description = n.getStringValue(); }, "displayName": n => { columnDefinition.displayName = n.getStringValue(); }, "enforceUniqueValues": n => { columnDefinition.enforceUniqueValues = n.getBooleanValue(); }, "geolocation": n => { columnDefinition.geolocation = n.getObject(deserializeIntoGeolocationColumn); }, "hidden": n => { columnDefinition.hidden = n.getBooleanValue(); }, "hyperlinkOrPicture": n => { columnDefinition.hyperlinkOrPicture = n.getObject(deserializeIntoHyperlinkOrPictureColumn); }, "indexed": n => { columnDefinition.indexed = n.getBooleanValue(); }, "isDeletable": n => { columnDefinition.isDeletable = n.getBooleanValue(); }, "isReorderable": n => { columnDefinition.isReorderable = n.getBooleanValue(); }, "isSealed": n => { columnDefinition.isSealed = n.getBooleanValue(); }, "lookup": n => { columnDefinition.lookup = n.getObject(deserializeIntoLookupColumn); }, "name": n => { columnDefinition.name = n.getStringValue(); }, "number": n => { columnDefinition.number = n.getObject(deserializeIntoNumberColumn); }, "personOrGroup": n => { columnDefinition.personOrGroup = n.getObject(deserializeIntoPersonOrGroupColumn); }, "propagateChanges": n => { columnDefinition.propagateChanges = n.getBooleanValue(); }, "readOnly": n => { columnDefinition.readOnly = n.getBooleanValue(); }, "required": n => { columnDefinition.required = n.getBooleanValue(); }, "sourceColumn": n => { columnDefinition.sourceColumn = n.getObject(deserializeIntoColumnDefinition); }, "sourceContentType": n => { columnDefinition.sourceContentType = n.getObject(deserializeIntoContentTypeInfo); }, "term": n => { columnDefinition.term = n.getObject(deserializeIntoTermColumn); }, "text": n => { columnDefinition.text = n.getObject(deserializeIntoTextColumn); }, "thumbnail": n => { columnDefinition.thumbnail = n.getObject(deserializeIntoThumbnailColumn); }, "type": n => { columnDefinition.type = n.getEnumValue(ColumnTypes); }, "validation": n => { columnDefinition.validation = n.getObject(deserializeIntoColumnValidation); } });
}

function deserializeIntoColumnLink(columnLink = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(columnLink)), { "name": n => { columnLink.name = n.getStringValue(); } });
}

function deserializeIntoContentTypeOrder(contentTypeOrder = {}) {
    return {
        "default": n => { contentTypeOrder.default_escaped = n.getBooleanValue(); },
        "position": n => { contentTypeOrder.position = n.getNumberValue(); },
    };
}

function deserializeIntoDocumentSetContent(documentSetContent = {}) {
    return {
        "contentType": n => { documentSetContent.contentType = n.getObject(deserializeIntoContentTypeInfo); },
        "fileName": n => { documentSetContent.fileName = n.getStringValue(); },
        "folderName": n => { documentSetContent.folderName = n.getStringValue(); },
    };
}

function deserializeIntoDocumentSet(documentSet = {}) {
    return {
        "allowedContentTypes": n => { documentSet.allowedContentTypes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContentTypeInfo); },
        "defaultContents": n => { documentSet.defaultContents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDocumentSetContent); },
        "propagateWelcomePageChanges": n => { documentSet.propagateWelcomePageChanges = n.getBooleanValue(); },
        "sharedColumns": n => { documentSet.sharedColumns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); },
        "shouldPrefixNameToFile": n => { documentSet.shouldPrefixNameToFile = n.getBooleanValue(); },
        "welcomePageColumns": n => { documentSet.welcomePageColumns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); },
        "welcomePageUrl": n => { documentSet.welcomePageUrl = n.getStringValue(); },
    };
}

function deserializeIntoContentType(contentType = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(contentType)), { "associatedHubsUrls": n => { contentType.associatedHubsUrls = n.getCollectionOfPrimitiveValues(); }, "base": n => { contentType.base = n.getObject(deserializeIntoContentType); }, "baseTypes": n => { contentType.baseTypes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContentType); }, "columnLinks": n => { contentType.columnLinks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnLink); }, "columnPositions": n => { contentType.columnPositions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); }, "columns": n => { contentType.columns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); }, "description": n => { contentType.description = n.getStringValue(); }, "documentSet": n => { contentType.documentSet = n.getObject(deserializeIntoDocumentSet); }, "documentTemplate": n => { contentType.documentTemplate = n.getObject(deserializeIntoDocumentSetContent); }, "group": n => { contentType.group = n.getStringValue(); }, "hidden": n => { contentType.hidden = n.getBooleanValue(); }, "inheritedFrom": n => { contentType.inheritedFrom = n.getObject(deserializeIntoItemReference); }, "isBuiltIn": n => { contentType.isBuiltIn = n.getBooleanValue(); }, "name": n => { contentType.name = n.getStringValue(); }, "order": n => { contentType.order = n.getObject(deserializeIntoContentTypeOrder); }, "parentId": n => { contentType.parentId = n.getStringValue(); }, "propagateChanges": n => { contentType.propagateChanges = n.getBooleanValue(); }, "readOnly": n => { contentType.readOnly = n.getBooleanValue(); }, "sealed": n => { contentType.sealed = n.getBooleanValue(); } });
}

function deserializeIntoListInfo(listInfo = {}) {
    return {
        "contentTypesEnabled": n => { listInfo.contentTypesEnabled = n.getBooleanValue(); },
        "hidden": n => { listInfo.hidden = n.getBooleanValue(); },
        "template": n => { listInfo.template = n.getStringValue(); },
    };
}

function deserializeIntoPublicErrorDetail(publicErrorDetail = {}) {
    return {
        "code": n => { publicErrorDetail.code = n.getStringValue(); },
        "message": n => { publicErrorDetail.message = n.getStringValue(); },
        "target": n => { publicErrorDetail.target = n.getStringValue(); },
    };
}

function deserializeIntoPublicInnerError(publicInnerError = {}) {
    return {
        "code": n => { publicInnerError.code = n.getStringValue(); },
        "details": n => { publicInnerError.details = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPublicErrorDetail); },
        "message": n => { publicInnerError.message = n.getStringValue(); },
        "target": n => { publicInnerError.target = n.getStringValue(); },
    };
}

function deserializeIntoPublicError(publicError = {}) {
    return {
        "code": n => { publicError.code = n.getStringValue(); },
        "details": n => { publicError.details = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPublicErrorDetail); },
        "innerError": n => { publicError.innerError = n.getObject(deserializeIntoPublicInnerError); },
        "message": n => { publicError.message = n.getStringValue(); },
        "target": n => { publicError.target = n.getStringValue(); },
    };
}

function deserializeIntoRichLongRunningOperation(richLongRunningOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoLongRunningOperation(richLongRunningOperation)), { "error": n => { richLongRunningOperation.error_escaped = n.getObject(deserializeIntoPublicError); }, "percentageComplete": n => { richLongRunningOperation.percentageComplete = n.getNumberValue(); }, "resourceId": n => { richLongRunningOperation.resourceId = n.getStringValue(); }, "type": n => { richLongRunningOperation.type = n.getStringValue(); } });
}

function deserializeIntoSystemFacet(systemFacet = {}) {
    return {};
}

function deserializeIntoList(list = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(list)), { "activities": n => { list.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivityOLD); }, "columns": n => { list.columns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); }, "contentTypes": n => { list.contentTypes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContentType); }, "displayName": n => { list.displayName = n.getStringValue(); }, "drive": n => { list.drive = n.getObject(deserializeIntoDrive); }, "items": n => { list.items = n.getCollectionOfObjectValuesFromMethod(deserializeIntoListItem); }, "list": n => { list.list = n.getObject(deserializeIntoListInfo); }, "operations": n => { list.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRichLongRunningOperation); }, "sharepointIds": n => { list.sharepointIds = n.getObject(deserializeIntoSharepointIds); }, "subscriptions": n => { list.subscriptions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSubscription); }, "system": n => { list.system = n.getObject(deserializeIntoSystemFacet); } });
}

function deserializeIntoStoragePlanInformation(storagePlanInformation = {}) {
    return {
        "upgradeAvailable": n => { storagePlanInformation.upgradeAvailable = n.getBooleanValue(); },
    };
}

function deserializeIntoQuota(quota = {}) {
    return {
        "deleted": n => { quota.deleted = n.getNumberValue(); },
        "remaining": n => { quota.remaining = n.getNumberValue(); },
        "state": n => { quota.state = n.getStringValue(); },
        "storagePlanInformation": n => { quota.storagePlanInformation = n.getObject(deserializeIntoStoragePlanInformation); },
        "total": n => { quota.total = n.getNumberValue(); },
        "used": n => { quota.used = n.getNumberValue(); },
    };
}

function deserializeIntoDrive(drive = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(drive)), { "activities": n => { drive.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemActivityOLD); }, "bundles": n => { drive.bundles = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItem); }, "driveType": n => { drive.driveType = n.getStringValue(); }, "following": n => { drive.following = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItem); }, "items": n => { drive.items = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItem); }, "list": n => { drive.list = n.getObject(deserializeIntoList); }, "owner": n => { drive.owner = n.getObject(deserializeIntoIdentitySet); }, "quota": n => { drive.quota = n.getObject(deserializeIntoQuota); }, "root": n => { drive.root = n.getObject(deserializeIntoDriveItem); }, "sharePointIds": n => { drive.sharePointIds = n.getObject(deserializeIntoSharepointIds); }, "special": n => { drive.special = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDriveItem); }, "system": n => { drive.system = n.getObject(deserializeIntoSystemFacet); } });
}

function deserializeIntoEmployeeOrgData(employeeOrgData = {}) {
    return {
        "costCenter": n => { employeeOrgData.costCenter = n.getStringValue(); },
        "division": n => { employeeOrgData.division = n.getStringValue(); },
    };
}

function deserializeIntoAssignedLabel(assignedLabel = {}) {
    return {
        "displayName": n => { assignedLabel.displayName = n.getStringValue(); },
        "labelId": n => { assignedLabel.labelId = n.getStringValue(); },
    };
}

function deserializeIntoMention(mention = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(mention)), { "application": n => { mention.application = n.getStringValue(); }, "clientReference": n => { mention.clientReference = n.getStringValue(); }, "createdBy": n => { mention.createdBy = n.getObject(deserializeIntoEmailAddress); }, "createdDateTime": n => { mention.createdDateTime = n.getDateValue(); }, "deepLink": n => { mention.deepLink = n.getStringValue(); }, "mentioned": n => { mention.mentioned = n.getObject(deserializeIntoEmailAddress); }, "mentionText": n => { mention.mentionText = n.getStringValue(); }, "serverCreatedDateTime": n => { mention.serverCreatedDateTime = n.getDateValue(); } });
}

function deserializeIntoPost(post = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOutlookItem(post)), { "attachments": n => { post.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachment); }, "body": n => { post.body = n.getObject(deserializeIntoItemBody); }, "conversationId": n => { post.conversationId = n.getStringValue(); }, "conversationThreadId": n => { post.conversationThreadId = n.getStringValue(); }, "extensions": n => { post.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "from": n => { post.from = n.getObject(deserializeIntoRecipient); }, "hasAttachments": n => { post.hasAttachments = n.getBooleanValue(); }, "importance": n => { post.importance = n.getEnumValue(Importance); }, "inReplyTo": n => { post.inReplyTo = n.getObject(deserializeIntoPost); }, "mentions": n => { post.mentions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMention); }, "multiValueExtendedProperties": n => { post.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "newParticipants": n => { post.newParticipants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "receivedDateTime": n => { post.receivedDateTime = n.getDateValue(); }, "sender": n => { post.sender = n.getObject(deserializeIntoRecipient); }, "singleValueExtendedProperties": n => { post.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); } });
}

function deserializeIntoConversationThread(conversationThread = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(conversationThread)), { "ccRecipients": n => { conversationThread.ccRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "hasAttachments": n => { conversationThread.hasAttachments = n.getBooleanValue(); }, "isLocked": n => { conversationThread.isLocked = n.getBooleanValue(); }, "lastDeliveredDateTime": n => { conversationThread.lastDeliveredDateTime = n.getDateValue(); }, "posts": n => { conversationThread.posts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPost); }, "preview": n => { conversationThread.preview = n.getStringValue(); }, "topic": n => { conversationThread.topic = n.getStringValue(); }, "toRecipients": n => { conversationThread.toRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "uniqueSenders": n => { conversationThread.uniqueSenders = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoConversation(conversation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(conversation)), { "hasAttachments": n => { conversation.hasAttachments = n.getBooleanValue(); }, "lastDeliveredDateTime": n => { conversation.lastDeliveredDateTime = n.getDateValue(); }, "preview": n => { conversation.preview = n.getStringValue(); }, "threads": n => { conversation.threads = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationThread); }, "topic": n => { conversation.topic = n.getStringValue(); }, "uniqueSenders": n => { conversation.uniqueSenders = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoSettingValue(settingValue = {}) {
    return {
        "name": n => { settingValue.name = n.getStringValue(); },
        "value": n => { settingValue.value = n.getStringValue(); },
    };
}

function deserializeIntoDirectorySetting(directorySetting = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(directorySetting)), { "displayName": n => { directorySetting.displayName = n.getStringValue(); }, "templateId": n => { directorySetting.templateId = n.getStringValue(); }, "values": n => { directorySetting.values = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSettingValue); } });
}

function deserializeIntoEndpoint(endpoint = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(endpoint)), { "capability": n => { endpoint.capability = n.getStringValue(); }, "providerId": n => { endpoint.providerId = n.getStringValue(); }, "providerName": n => { endpoint.providerName = n.getStringValue(); }, "providerResourceId": n => { endpoint.providerResourceId = n.getStringValue(); }, "uri": n => { endpoint.uri = n.getStringValue(); } });
}

function deserializeIntoGroupLifecyclePolicy(groupLifecyclePolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(groupLifecyclePolicy)), { "alternateNotificationEmails": n => { groupLifecyclePolicy.alternateNotificationEmails = n.getStringValue(); }, "groupLifetimeInDays": n => { groupLifecyclePolicy.groupLifetimeInDays = n.getNumberValue(); }, "managedGroupTypes": n => { groupLifecyclePolicy.managedGroupTypes = n.getStringValue(); } });
}

function deserializeIntoWritebackConfiguration(writebackConfiguration = {}) {
    return {
        "isEnabled": n => { writebackConfiguration.isEnabled = n.getBooleanValue(); },
    };
}

function deserializeIntoGroupWritebackConfiguration(groupWritebackConfiguration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoWritebackConfiguration(groupWritebackConfiguration)), { "onPremisesGroupType": n => { groupWritebackConfiguration.onPremisesGroupType = n.getStringValue(); } });
}

function deserializeIntoLicenseProcessingState(licenseProcessingState = {}) {
    return {
        "state": n => { licenseProcessingState.state = n.getStringValue(); },
    };
}

var MembershipRuleProcessingStatusDetails;
(function (MembershipRuleProcessingStatusDetails) {
    MembershipRuleProcessingStatusDetails["NotStarted"] = "NotStarted";
    MembershipRuleProcessingStatusDetails["Running"] = "Running";
    MembershipRuleProcessingStatusDetails["Failed"] = "Failed";
    MembershipRuleProcessingStatusDetails["Succeeded"] = "Succeeded";
    MembershipRuleProcessingStatusDetails["UnsupportedFutureValue"] = "UnsupportedFutureValue";
})(MembershipRuleProcessingStatusDetails || (MembershipRuleProcessingStatusDetails = {}));

function deserializeIntoMembershipRuleProcessingStatus(membershipRuleProcessingStatus = {}) {
    return {
        "errorMessage": n => { membershipRuleProcessingStatus.errorMessage = n.getStringValue(); },
        "lastMembershipUpdated": n => { membershipRuleProcessingStatus.lastMembershipUpdated = n.getDateValue(); },
        "status": n => { membershipRuleProcessingStatus.status = n.getEnumValue(MembershipRuleProcessingStatusDetails); },
    };
}

function deserializeIntoExternalLink(externalLink = {}) {
    return {
        "href": n => { externalLink.href = n.getStringValue(); },
    };
}

function deserializeIntoNotebookLinks(notebookLinks = {}) {
    return {
        "oneNoteClientUrl": n => { notebookLinks.oneNoteClientUrl = n.getObject(deserializeIntoExternalLink); },
        "oneNoteWebUrl": n => { notebookLinks.oneNoteWebUrl = n.getObject(deserializeIntoExternalLink); },
    };
}

function deserializeIntoOnenoteEntityBaseModel(onenoteEntityBaseModel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(onenoteEntityBaseModel)), { "self": n => { onenoteEntityBaseModel.self = n.getStringValue(); } });
}

function deserializeIntoOnenoteEntitySchemaObjectModel(onenoteEntitySchemaObjectModel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntityBaseModel(onenoteEntitySchemaObjectModel)), { "createdDateTime": n => { onenoteEntitySchemaObjectModel.createdDateTime = n.getDateValue(); } });
}

function deserializeIntoOnenoteEntityHierarchyModel(onenoteEntityHierarchyModel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntitySchemaObjectModel(onenoteEntityHierarchyModel)), { "createdBy": n => { onenoteEntityHierarchyModel.createdBy = n.getObject(deserializeIntoIdentitySet); }, "displayName": n => { onenoteEntityHierarchyModel.displayName = n.getStringValue(); }, "lastModifiedBy": n => { onenoteEntityHierarchyModel.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedDateTime": n => { onenoteEntityHierarchyModel.lastModifiedDateTime = n.getDateValue(); } });
}

function deserializeIntoPageLinks(pageLinks = {}) {
    return {
        "oneNoteClientUrl": n => { pageLinks.oneNoteClientUrl = n.getObject(deserializeIntoExternalLink); },
        "oneNoteWebUrl": n => { pageLinks.oneNoteWebUrl = n.getObject(deserializeIntoExternalLink); },
    };
}

function deserializeIntoOnenotePage(onenotePage = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntitySchemaObjectModel(onenotePage)), { "content": n => { onenotePage.content = n.getStringValue(); }, "contentUrl": n => { onenotePage.contentUrl = n.getStringValue(); }, "createdByAppId": n => { onenotePage.createdByAppId = n.getStringValue(); }, "lastModifiedDateTime": n => { onenotePage.lastModifiedDateTime = n.getDateValue(); }, "level": n => { onenotePage.level = n.getNumberValue(); }, "links": n => { onenotePage.links = n.getObject(deserializeIntoPageLinks); }, "order": n => { onenotePage.order = n.getNumberValue(); }, "parentNotebook": n => { onenotePage.parentNotebook = n.getObject(deserializeIntoNotebook); }, "parentSection": n => { onenotePage.parentSection = n.getObject(deserializeIntoOnenoteSection); }, "title": n => { onenotePage.title = n.getStringValue(); }, "userTags": n => { onenotePage.userTags = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoSectionGroup(sectionGroup = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntityHierarchyModel(sectionGroup)), { "parentNotebook": n => { sectionGroup.parentNotebook = n.getObject(deserializeIntoNotebook); }, "parentSectionGroup": n => { sectionGroup.parentSectionGroup = n.getObject(deserializeIntoSectionGroup); }, "sectionGroups": n => { sectionGroup.sectionGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSectionGroup); }, "sectionGroupsUrl": n => { sectionGroup.sectionGroupsUrl = n.getStringValue(); }, "sections": n => { sectionGroup.sections = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenoteSection); }, "sectionsUrl": n => { sectionGroup.sectionsUrl = n.getStringValue(); } });
}

function deserializeIntoSectionLinks(sectionLinks = {}) {
    return {
        "oneNoteClientUrl": n => { sectionLinks.oneNoteClientUrl = n.getObject(deserializeIntoExternalLink); },
        "oneNoteWebUrl": n => { sectionLinks.oneNoteWebUrl = n.getObject(deserializeIntoExternalLink); },
    };
}

function deserializeIntoOnenoteSection(onenoteSection = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntityHierarchyModel(onenoteSection)), { "isDefault": n => { onenoteSection.isDefault = n.getBooleanValue(); }, "links": n => { onenoteSection.links = n.getObject(deserializeIntoSectionLinks); }, "pages": n => { onenoteSection.pages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenotePage); }, "pagesUrl": n => { onenoteSection.pagesUrl = n.getStringValue(); }, "parentNotebook": n => { onenoteSection.parentNotebook = n.getObject(deserializeIntoNotebook); }, "parentSectionGroup": n => { onenoteSection.parentSectionGroup = n.getObject(deserializeIntoSectionGroup); } });
}

var OnenoteUserRole;
(function (OnenoteUserRole) {
    OnenoteUserRole["None"] = "None";
    OnenoteUserRole["Owner"] = "Owner";
    OnenoteUserRole["Contributor"] = "Contributor";
    OnenoteUserRole["Reader"] = "Reader";
})(OnenoteUserRole || (OnenoteUserRole = {}));

function deserializeIntoNotebook(notebook = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntityHierarchyModel(notebook)), { "isDefault": n => { notebook.isDefault = n.getBooleanValue(); }, "isShared": n => { notebook.isShared = n.getBooleanValue(); }, "links": n => { notebook.links = n.getObject(deserializeIntoNotebookLinks); }, "sectionGroups": n => { notebook.sectionGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSectionGroup); }, "sectionGroupsUrl": n => { notebook.sectionGroupsUrl = n.getStringValue(); }, "sections": n => { notebook.sections = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenoteSection); }, "sectionsUrl": n => { notebook.sectionsUrl = n.getStringValue(); }, "userRole": n => { notebook.userRole = n.getEnumValue(OnenoteUserRole); } });
}

function deserializeIntoOnenoteOperationError(onenoteOperationError = {}) {
    return {
        "code": n => { onenoteOperationError.code = n.getStringValue(); },
        "message": n => { onenoteOperationError.message = n.getStringValue(); },
    };
}

var OperationStatus;
(function (OperationStatus) {
    OperationStatus["NotStarted"] = "NotStarted";
    OperationStatus["Running"] = "Running";
    OperationStatus["Completed"] = "Completed";
    OperationStatus["Failed"] = "Failed";
})(OperationStatus || (OperationStatus = {}));

function deserializeIntoOperation(operation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(operation)), { "createdDateTime": n => { operation.createdDateTime = n.getDateValue(); }, "lastActionDateTime": n => { operation.lastActionDateTime = n.getDateValue(); }, "status": n => { operation.status = n.getEnumValue(OperationStatus); } });
}

function deserializeIntoOnenoteOperation(onenoteOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOperation(onenoteOperation)), { "error": n => { onenoteOperation.error_escaped = n.getObject(deserializeIntoOnenoteOperationError); }, "percentComplete": n => { onenoteOperation.percentComplete = n.getStringValue(); }, "resourceId": n => { onenoteOperation.resourceId = n.getStringValue(); }, "resourceLocation": n => { onenoteOperation.resourceLocation = n.getStringValue(); } });
}

function deserializeIntoOnenoteResource(onenoteResource = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOnenoteEntityBaseModel(onenoteResource)), { "content": n => { onenoteResource.content = n.getStringValue(); }, "contentUrl": n => { onenoteResource.contentUrl = n.getStringValue(); } });
}

function deserializeIntoOnenote(onenote = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(onenote)), { "notebooks": n => { onenote.notebooks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoNotebook); }, "operations": n => { onenote.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenoteOperation); }, "pages": n => { onenote.pages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenotePage); }, "resources": n => { onenote.resources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenoteResource); }, "sectionGroups": n => { onenote.sectionGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSectionGroup); }, "sections": n => { onenote.sections = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnenoteSection); } });
}

function deserializeIntoOnPremisesProvisioningError(onPremisesProvisioningError = {}) {
    return {
        "category": n => { onPremisesProvisioningError.category = n.getStringValue(); },
        "occurredDateTime": n => { onPremisesProvisioningError.occurredDateTime = n.getDateValue(); },
        "propertyCausingError": n => { onPremisesProvisioningError.propertyCausingError = n.getStringValue(); },
        "value": n => { onPremisesProvisioningError.value = n.getStringValue(); },
    };
}

var PlannerCreationSourceKind;
(function (PlannerCreationSourceKind) {
    PlannerCreationSourceKind["None"] = "none";
    PlannerCreationSourceKind["External"] = "external";
    PlannerCreationSourceKind["Publication"] = "publication";
    PlannerCreationSourceKind["UnknownFutureValue"] = "unknownFutureValue";
})(PlannerCreationSourceKind || (PlannerCreationSourceKind = {}));

function deserializeIntoPlannerBucketCreation(plannerBucketCreation = {}) {
    return {
        "creationSourceKind": n => { plannerBucketCreation.creationSourceKind = n.getEnumValue(PlannerCreationSourceKind); },
    };
}

function deserializeIntoPlannerDelta(plannerDelta = {}) {
    return Object.assign({}, deserializeIntoEntity(plannerDelta));
}

function deserializeIntoPlannerAppliedCategories(plannerAppliedCategories = {}) {
    return {};
}

function deserializeIntoPlannerOrderHintsByAssignee(plannerOrderHintsByAssignee = {}) {
    return {};
}

function deserializeIntoPlannerAssignedToTaskBoardTaskFormat(plannerAssignedToTaskBoardTaskFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerAssignedToTaskBoardTaskFormat)), { "orderHintsByAssignee": n => { plannerAssignedToTaskBoardTaskFormat.orderHintsByAssignee = n.getObject(deserializeIntoPlannerOrderHintsByAssignee); }, "unassignedOrderHint": n => { plannerAssignedToTaskBoardTaskFormat.unassignedOrderHint = n.getStringValue(); } });
}

function deserializeIntoPlannerAssignments(plannerAssignments = {}) {
    return {};
}

function deserializeIntoPlannerBucketTaskBoardTaskFormat(plannerBucketTaskBoardTaskFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerBucketTaskBoardTaskFormat)), { "orderHint": n => { plannerBucketTaskBoardTaskFormat.orderHint = n.getStringValue(); } });
}

function deserializeIntoPlannerProgressTaskBoardTaskFormat(plannerProgressTaskBoardTaskFormat = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerProgressTaskBoardTaskFormat)), { "orderHint": n => { plannerProgressTaskBoardTaskFormat.orderHint = n.getStringValue(); } });
}

function deserializeIntoPlannerTeamsPublicationInfo(plannerTeamsPublicationInfo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerTaskCreation(plannerTeamsPublicationInfo)), { "lastModifiedDateTime": n => { plannerTeamsPublicationInfo.lastModifiedDateTime = n.getDateValue(); }, "publicationId": n => { plannerTeamsPublicationInfo.publicationId = n.getStringValue(); }, "publishedToPlanId": n => { plannerTeamsPublicationInfo.publishedToPlanId = n.getStringValue(); }, "publishingTeamId": n => { plannerTeamsPublicationInfo.publishingTeamId = n.getStringValue(); }, "publishingTeamName": n => { plannerTeamsPublicationInfo.publishingTeamName = n.getStringValue(); } });
}

function deserializeIntoPlannerTaskCreation(plannerTaskCreation = {}) {
    return {
        "creationSourceKind": n => { plannerTaskCreation.creationSourceKind = n.getEnumValue(PlannerCreationSourceKind); },
        "teamsPublicationInfo": n => { plannerTaskCreation.teamsPublicationInfo = n.getObject(deserializeIntoPlannerTeamsPublicationInfo); },
    };
}

function deserializeIntoPlannerChecklistItems(plannerChecklistItems = {}) {
    return {};
}

function deserializeIntoPlannerExternalReferences(plannerExternalReferences = {}) {
    return {};
}

var PlannerPreviewType;
(function (PlannerPreviewType) {
    PlannerPreviewType["Automatic"] = "automatic";
    PlannerPreviewType["NoPreview"] = "noPreview";
    PlannerPreviewType["Checklist"] = "checklist";
    PlannerPreviewType["Description"] = "description";
    PlannerPreviewType["Reference"] = "reference";
})(PlannerPreviewType || (PlannerPreviewType = {}));

function deserializeIntoPlannerTaskDetails(plannerTaskDetails = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerTaskDetails)), { "checklist": n => { plannerTaskDetails.checklist = n.getObject(deserializeIntoPlannerChecklistItems); }, "description": n => { plannerTaskDetails.description = n.getStringValue(); }, "notes": n => { plannerTaskDetails.notes = n.getObject(deserializeIntoItemBody); }, "previewType": n => { plannerTaskDetails.previewType = n.getEnumValue(PlannerPreviewType); }, "references": n => { plannerTaskDetails.references = n.getObject(deserializeIntoPlannerExternalReferences); } });
}

function deserializeIntoPlannerTask(plannerTask = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerTask)), { "activeChecklistItemCount": n => { plannerTask.activeChecklistItemCount = n.getNumberValue(); }, "appliedCategories": n => { plannerTask.appliedCategories = n.getObject(deserializeIntoPlannerAppliedCategories); }, "assignedToTaskBoardFormat": n => { plannerTask.assignedToTaskBoardFormat = n.getObject(deserializeIntoPlannerAssignedToTaskBoardTaskFormat); }, "assigneePriority": n => { plannerTask.assigneePriority = n.getStringValue(); }, "assignments": n => { plannerTask.assignments = n.getObject(deserializeIntoPlannerAssignments); }, "bucketId": n => { plannerTask.bucketId = n.getStringValue(); }, "bucketTaskBoardFormat": n => { plannerTask.bucketTaskBoardFormat = n.getObject(deserializeIntoPlannerBucketTaskBoardTaskFormat); }, "checklistItemCount": n => { plannerTask.checklistItemCount = n.getNumberValue(); }, "completedBy": n => { plannerTask.completedBy = n.getObject(deserializeIntoIdentitySet); }, "completedDateTime": n => { plannerTask.completedDateTime = n.getDateValue(); }, "conversationThreadId": n => { plannerTask.conversationThreadId = n.getStringValue(); }, "createdBy": n => { plannerTask.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { plannerTask.createdDateTime = n.getDateValue(); }, "creationSource": n => { plannerTask.creationSource = n.getObject(deserializeIntoPlannerTaskCreation); }, "details": n => { plannerTask.details = n.getObject(deserializeIntoPlannerTaskDetails); }, "dueDateTime": n => { plannerTask.dueDateTime = n.getDateValue(); }, "hasDescription": n => { plannerTask.hasDescription = n.getBooleanValue(); }, "orderHint": n => { plannerTask.orderHint = n.getStringValue(); }, "percentComplete": n => { plannerTask.percentComplete = n.getNumberValue(); }, "planId": n => { plannerTask.planId = n.getStringValue(); }, "previewType": n => { plannerTask.previewType = n.getEnumValue(PlannerPreviewType); }, "priority": n => { plannerTask.priority = n.getNumberValue(); }, "progressTaskBoardFormat": n => { plannerTask.progressTaskBoardFormat = n.getObject(deserializeIntoPlannerProgressTaskBoardTaskFormat); }, "referenceCount": n => { plannerTask.referenceCount = n.getNumberValue(); }, "startDateTime": n => { plannerTask.startDateTime = n.getDateValue(); }, "title": n => { plannerTask.title = n.getStringValue(); } });
}

function deserializeIntoPlannerBucket(plannerBucket = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerBucket)), { "creationSource": n => { plannerBucket.creationSource = n.getObject(deserializeIntoPlannerBucketCreation); }, "name": n => { plannerBucket.name = n.getStringValue(); }, "orderHint": n => { plannerBucket.orderHint = n.getStringValue(); }, "planId": n => { plannerBucket.planId = n.getStringValue(); }, "tasks": n => { plannerBucket.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerTask); } });
}

var PlannerContainerType;
(function (PlannerContainerType) {
    PlannerContainerType["Group"] = "group";
    PlannerContainerType["UnknownFutureValue"] = "unknownFutureValue";
    PlannerContainerType["Roster"] = "roster";
    PlannerContainerType["Project"] = "project";
})(PlannerContainerType || (PlannerContainerType = {}));

function deserializeIntoPlannerPlanContainer(plannerPlanContainer = {}) {
    return {
        "containerId": n => { plannerPlanContainer.containerId = n.getStringValue(); },
        "type": n => { plannerPlanContainer.type = n.getEnumValue(PlannerContainerType); },
        "url": n => { plannerPlanContainer.url = n.getStringValue(); },
    };
}

function deserializeIntoPlannerPlanContextCollection(plannerPlanContextCollection = {}) {
    return {};
}

function deserializeIntoPlannerPlanCreation(plannerPlanCreation = {}) {
    return {
        "creationSourceKind": n => { plannerPlanCreation.creationSourceKind = n.getEnumValue(PlannerCreationSourceKind); },
    };
}

function deserializeIntoPlannerCategoryDescriptions(plannerCategoryDescriptions = {}) {
    return {
        "category1": n => { plannerCategoryDescriptions.category1 = n.getStringValue(); },
        "category10": n => { plannerCategoryDescriptions.category10 = n.getStringValue(); },
        "category11": n => { plannerCategoryDescriptions.category11 = n.getStringValue(); },
        "category12": n => { plannerCategoryDescriptions.category12 = n.getStringValue(); },
        "category13": n => { plannerCategoryDescriptions.category13 = n.getStringValue(); },
        "category14": n => { plannerCategoryDescriptions.category14 = n.getStringValue(); },
        "category15": n => { plannerCategoryDescriptions.category15 = n.getStringValue(); },
        "category16": n => { plannerCategoryDescriptions.category16 = n.getStringValue(); },
        "category17": n => { plannerCategoryDescriptions.category17 = n.getStringValue(); },
        "category18": n => { plannerCategoryDescriptions.category18 = n.getStringValue(); },
        "category19": n => { plannerCategoryDescriptions.category19 = n.getStringValue(); },
        "category2": n => { plannerCategoryDescriptions.category2 = n.getStringValue(); },
        "category20": n => { plannerCategoryDescriptions.category20 = n.getStringValue(); },
        "category21": n => { plannerCategoryDescriptions.category21 = n.getStringValue(); },
        "category22": n => { plannerCategoryDescriptions.category22 = n.getStringValue(); },
        "category23": n => { plannerCategoryDescriptions.category23 = n.getStringValue(); },
        "category24": n => { plannerCategoryDescriptions.category24 = n.getStringValue(); },
        "category25": n => { plannerCategoryDescriptions.category25 = n.getStringValue(); },
        "category3": n => { plannerCategoryDescriptions.category3 = n.getStringValue(); },
        "category4": n => { plannerCategoryDescriptions.category4 = n.getStringValue(); },
        "category5": n => { plannerCategoryDescriptions.category5 = n.getStringValue(); },
        "category6": n => { plannerCategoryDescriptions.category6 = n.getStringValue(); },
        "category7": n => { plannerCategoryDescriptions.category7 = n.getStringValue(); },
        "category8": n => { plannerCategoryDescriptions.category8 = n.getStringValue(); },
        "category9": n => { plannerCategoryDescriptions.category9 = n.getStringValue(); },
    };
}

function deserializeIntoPlannerPlanContextDetailsCollection(plannerPlanContextDetailsCollection = {}) {
    return {};
}

function deserializeIntoPlannerUserIds(plannerUserIds = {}) {
    return {};
}

function deserializeIntoPlannerPlanDetails(plannerPlanDetails = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerPlanDetails)), { "categoryDescriptions": n => { plannerPlanDetails.categoryDescriptions = n.getObject(deserializeIntoPlannerCategoryDescriptions); }, "contextDetails": n => { plannerPlanDetails.contextDetails = n.getObject(deserializeIntoPlannerPlanContextDetailsCollection); }, "sharedWith": n => { plannerPlanDetails.sharedWith = n.getObject(deserializeIntoPlannerUserIds); } });
}

function deserializeIntoPlannerPlan(plannerPlan = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerPlan)), { "buckets": n => { plannerPlan.buckets = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerBucket); }, "container": n => { plannerPlan.container = n.getObject(deserializeIntoPlannerPlanContainer); }, "contexts": n => { plannerPlan.contexts = n.getObject(deserializeIntoPlannerPlanContextCollection); }, "createdBy": n => { plannerPlan.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { plannerPlan.createdDateTime = n.getDateValue(); }, "creationSource": n => { plannerPlan.creationSource = n.getObject(deserializeIntoPlannerPlanCreation); }, "details": n => { plannerPlan.details = n.getObject(deserializeIntoPlannerPlanDetails); }, "owner": n => { plannerPlan.owner = n.getStringValue(); }, "tasks": n => { plannerPlan.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerTask); }, "title": n => { plannerPlan.title = n.getStringValue(); } });
}

function deserializeIntoPlannerGroup(plannerGroup = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(plannerGroup)), { "plans": n => { plannerGroup.plans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerPlan); } });
}

function deserializeIntoSiteCollection(siteCollection = {}) {
    return {
        "dataLocationCode": n => { siteCollection.dataLocationCode = n.getStringValue(); },
        "hostname": n => { siteCollection.hostname = n.getStringValue(); },
        "root": n => { siteCollection.root = n.getObject(deserializeIntoRoot); },
    };
}

function deserializeIntoSitePageData(sitePageData = {}) {
    return {};
}

function deserializeIntoWebPart(webPart = {}) {
    return {
        "data": n => { webPart.data = n.getObject(deserializeIntoSitePageData); },
        "type": n => { webPart.type = n.getStringValue(); },
    };
}

function deserializeIntoSitePage(sitePage = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(sitePage)), { "contentType": n => { sitePage.contentType = n.getObject(deserializeIntoContentTypeInfo); }, "pageLayoutType": n => { sitePage.pageLayoutType = n.getStringValue(); }, "publishingState": n => { sitePage.publishingState = n.getObject(deserializeIntoPublicationFacet); }, "title": n => { sitePage.title = n.getStringValue(); }, "webParts": n => { sitePage.webParts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWebPart); } });
}

function deserializeIntoSiteSettings(siteSettings = {}) {
    return {
        "languageTag": n => { siteSettings.languageTag = n.getStringValue(); },
        "timeZone": n => { siteSettings.timeZone = n.getStringValue(); },
    };
}

function deserializeIntoStore(store = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(store)), { "defaultLanguageTag": n => { store.defaultLanguageTag = n.getStringValue(); }, "groups": n => { store.groups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoGroup$1); }, "languageTags": n => { store.languageTags = n.getCollectionOfPrimitiveValues(); }, "sets": n => { store.sets = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSet); } });
}

function deserializeIntoSite(site = {}) {
    return Object.assign(Object.assign({}, deserializeIntoBaseItem(site)), { "analytics": n => { site.analytics = n.getObject(deserializeIntoItemAnalytics); }, "columns": n => { site.columns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); }, "contentTypes": n => { site.contentTypes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContentType); }, "deleted": n => { site.deleted = n.getObject(deserializeIntoDeleted); }, "displayName": n => { site.displayName = n.getStringValue(); }, "drive": n => { site.drive = n.getObject(deserializeIntoDrive); }, "drives": n => { site.drives = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDrive); }, "externalColumns": n => { site.externalColumns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoColumnDefinition); }, "items": n => { site.items = n.getCollectionOfObjectValuesFromMethod(deserializeIntoBaseItem); }, "lists": n => { site.lists = n.getCollectionOfObjectValuesFromMethod(deserializeIntoList); }, "onenote": n => { site.onenote = n.getObject(deserializeIntoOnenote); }, "operations": n => { site.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRichLongRunningOperation); }, "pages": n => { site.pages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSitePage); }, "permissions": n => { site.permissions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPermission); }, "root": n => { site.root = n.getObject(deserializeIntoRoot); }, "settings": n => { site.settings = n.getObject(deserializeIntoSiteSettings); }, "sharepointIds": n => { site.sharepointIds = n.getObject(deserializeIntoSharepointIds); }, "siteCollection": n => { site.siteCollection = n.getObject(deserializeIntoSiteCollection); }, "sites": n => { site.sites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSite); }, "termStore": n => { site.termStore = n.getObject(deserializeIntoStore); } });
}

var ChannelMembershipType;
(function (ChannelMembershipType) {
    ChannelMembershipType["Standard"] = "standard";
    ChannelMembershipType["Private"] = "private";
    ChannelMembershipType["UnknownFutureValue"] = "unknownFutureValue";
    ChannelMembershipType["Shared"] = "shared";
})(ChannelMembershipType || (ChannelMembershipType = {}));

var ReplyRestriction;
(function (ReplyRestriction) {
    ReplyRestriction["Everyone"] = "everyone";
    ReplyRestriction["AuthorAndModerators"] = "authorAndModerators";
    ReplyRestriction["UnknownFutureValue"] = "unknownFutureValue";
})(ReplyRestriction || (ReplyRestriction = {}));

var UserNewMessageRestriction;
(function (UserNewMessageRestriction) {
    UserNewMessageRestriction["Everyone"] = "everyone";
    UserNewMessageRestriction["EveryoneExceptGuests"] = "everyoneExceptGuests";
    UserNewMessageRestriction["Moderators"] = "moderators";
    UserNewMessageRestriction["UnknownFutureValue"] = "unknownFutureValue";
})(UserNewMessageRestriction || (UserNewMessageRestriction = {}));

function deserializeIntoChannelModerationSettings(channelModerationSettings = {}) {
    return {
        "allowNewMessageFromBots": n => { channelModerationSettings.allowNewMessageFromBots = n.getBooleanValue(); },
        "allowNewMessageFromConnectors": n => { channelModerationSettings.allowNewMessageFromConnectors = n.getBooleanValue(); },
        "replyRestriction": n => { channelModerationSettings.replyRestriction = n.getEnumValue(ReplyRestriction); },
        "userNewMessageRestriction": n => { channelModerationSettings.userNewMessageRestriction = n.getEnumValue(UserNewMessageRestriction); },
    };
}

function deserializeIntoChannelSummary(channelSummary = {}) {
    return {
        "guestsCount": n => { channelSummary.guestsCount = n.getNumberValue(); },
        "hasMembersFromOtherTenants": n => { channelSummary.hasMembersFromOtherTenants = n.getBooleanValue(); },
        "membersCount": n => { channelSummary.membersCount = n.getNumberValue(); },
        "ownersCount": n => { channelSummary.ownersCount = n.getNumberValue(); },
    };
}

function deserializeIntoTeamInfo(teamInfo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamInfo)), { "displayName": n => { teamInfo.displayName = n.getStringValue(); }, "team": n => { teamInfo.team = n.getObject(deserializeIntoTeam); }, "tenantId": n => { teamInfo.tenantId = n.getStringValue(); } });
}

function deserializeIntoSharedWithChannelTeamInfo(sharedWithChannelTeamInfo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoTeamInfo(sharedWithChannelTeamInfo)), { "allowedMembers": n => { sharedWithChannelTeamInfo.allowedMembers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationMember); }, "isHostTeam": n => { sharedWithChannelTeamInfo.isHostTeam = n.getBooleanValue(); } });
}

function deserializeIntoChannel(channel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(channel)), { "createdDateTime": n => { channel.createdDateTime = n.getDateValue(); }, "description": n => { channel.description = n.getStringValue(); }, "displayName": n => { channel.displayName = n.getStringValue(); }, "email": n => { channel.email = n.getStringValue(); }, "filesFolder": n => { channel.filesFolder = n.getObject(deserializeIntoDriveItem); }, "isFavoriteByDefault": n => { channel.isFavoriteByDefault = n.getBooleanValue(); }, "members": n => { channel.members = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationMember); }, "membershipType": n => { channel.membershipType = n.getEnumValue(ChannelMembershipType); }, "messages": n => { channel.messages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChatMessage); }, "moderationSettings": n => { channel.moderationSettings = n.getObject(deserializeIntoChannelModerationSettings); }, "sharedWithTeams": n => { channel.sharedWithTeams = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSharedWithChannelTeamInfo); }, "summary": n => { channel.summary = n.getObject(deserializeIntoChannelSummary); }, "tabs": n => { channel.tabs = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsTab); }, "tenantId": n => { channel.tenantId = n.getStringValue(); }, "webUrl": n => { channel.webUrl = n.getStringValue(); } });
}

function deserializeIntoChangeTrackedEntity(changeTrackedEntity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(changeTrackedEntity)), { "createdBy": n => { changeTrackedEntity.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { changeTrackedEntity.createdDateTime = n.getDateValue(); }, "lastModifiedBy": n => { changeTrackedEntity.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedDateTime": n => { changeTrackedEntity.lastModifiedDateTime = n.getDateValue(); } });
}

var ScheduleChangeRequestActor;
(function (ScheduleChangeRequestActor) {
    ScheduleChangeRequestActor["Sender"] = "sender";
    ScheduleChangeRequestActor["Recipient"] = "recipient";
    ScheduleChangeRequestActor["Manager"] = "manager";
    ScheduleChangeRequestActor["System"] = "system";
    ScheduleChangeRequestActor["UnknownFutureValue"] = "unknownFutureValue";
})(ScheduleChangeRequestActor || (ScheduleChangeRequestActor = {}));

var ScheduleChangeState;
(function (ScheduleChangeState) {
    ScheduleChangeState["Pending"] = "pending";
    ScheduleChangeState["Approved"] = "approved";
    ScheduleChangeState["Declined"] = "declined";
    ScheduleChangeState["UnknownFutureValue"] = "unknownFutureValue";
})(ScheduleChangeState || (ScheduleChangeState = {}));

function deserializeIntoScheduleChangeRequest(scheduleChangeRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(scheduleChangeRequest)), { "assignedTo": n => { scheduleChangeRequest.assignedTo = n.getEnumValue(ScheduleChangeRequestActor); }, "managerActionDateTime": n => { scheduleChangeRequest.managerActionDateTime = n.getDateValue(); }, "managerActionMessage": n => { scheduleChangeRequest.managerActionMessage = n.getStringValue(); }, "managerUserId": n => { scheduleChangeRequest.managerUserId = n.getStringValue(); }, "senderDateTime": n => { scheduleChangeRequest.senderDateTime = n.getDateValue(); }, "senderMessage": n => { scheduleChangeRequest.senderMessage = n.getStringValue(); }, "senderUserId": n => { scheduleChangeRequest.senderUserId = n.getStringValue(); }, "state": n => { scheduleChangeRequest.state = n.getEnumValue(ScheduleChangeState); } });
}

function deserializeIntoOfferShiftRequest(offerShiftRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoScheduleChangeRequest(offerShiftRequest)), { "recipientActionDateTime": n => { offerShiftRequest.recipientActionDateTime = n.getDateValue(); }, "recipientActionMessage": n => { offerShiftRequest.recipientActionMessage = n.getStringValue(); }, "recipientUserId": n => { offerShiftRequest.recipientUserId = n.getStringValue(); }, "senderShiftId": n => { offerShiftRequest.senderShiftId = n.getStringValue(); } });
}

var ScheduleEntityTheme;
(function (ScheduleEntityTheme) {
    ScheduleEntityTheme["White"] = "white";
    ScheduleEntityTheme["Blue"] = "blue";
    ScheduleEntityTheme["Green"] = "green";
    ScheduleEntityTheme["Purple"] = "purple";
    ScheduleEntityTheme["Pink"] = "pink";
    ScheduleEntityTheme["Yellow"] = "yellow";
    ScheduleEntityTheme["Gray"] = "gray";
    ScheduleEntityTheme["DarkBlue"] = "darkBlue";
    ScheduleEntityTheme["DarkGreen"] = "darkGreen";
    ScheduleEntityTheme["DarkPurple"] = "darkPurple";
    ScheduleEntityTheme["DarkPink"] = "darkPink";
    ScheduleEntityTheme["DarkYellow"] = "darkYellow";
    ScheduleEntityTheme["UnknownFutureValue"] = "unknownFutureValue";
})(ScheduleEntityTheme || (ScheduleEntityTheme = {}));

function deserializeIntoScheduleEntity(scheduleEntity = {}) {
    return {
        "endDateTime": n => { scheduleEntity.endDateTime = n.getDateValue(); },
        "startDateTime": n => { scheduleEntity.startDateTime = n.getDateValue(); },
        "theme": n => { scheduleEntity.theme = n.getEnumValue(ScheduleEntityTheme); },
    };
}

function deserializeIntoShiftActivity(shiftActivity = {}) {
    return {
        "code": n => { shiftActivity.code = n.getStringValue(); },
        "displayName": n => { shiftActivity.displayName = n.getStringValue(); },
        "endDateTime": n => { shiftActivity.endDateTime = n.getDateValue(); },
        "isPaid": n => { shiftActivity.isPaid = n.getBooleanValue(); },
        "startDateTime": n => { shiftActivity.startDateTime = n.getDateValue(); },
        "theme": n => { shiftActivity.theme = n.getEnumValue(ScheduleEntityTheme); },
    };
}

function deserializeIntoShiftItem(shiftItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoScheduleEntity(shiftItem)), { "activities": n => { shiftItem.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoShiftActivity); }, "displayName": n => { shiftItem.displayName = n.getStringValue(); }, "notes": n => { shiftItem.notes = n.getStringValue(); } });
}

function deserializeIntoOpenShiftItem(openShiftItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoShiftItem(openShiftItem)), { "openSlotCount": n => { openShiftItem.openSlotCount = n.getNumberValue(); } });
}

function deserializeIntoOpenShift(openShift = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(openShift)), { "draftOpenShift": n => { openShift.draftOpenShift = n.getObject(deserializeIntoOpenShiftItem); }, "isStagedForDeletion": n => { openShift.isStagedForDeletion = n.getBooleanValue(); }, "schedulingGroupId": n => { openShift.schedulingGroupId = n.getStringValue(); }, "sharedOpenShift": n => { openShift.sharedOpenShift = n.getObject(deserializeIntoOpenShiftItem); } });
}

function deserializeIntoOpenShiftChangeRequest(openShiftChangeRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoScheduleChangeRequest(openShiftChangeRequest)), { "openShiftId": n => { openShiftChangeRequest.openShiftId = n.getStringValue(); } });
}

function deserializeIntoSchedulingGroup(schedulingGroup = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(schedulingGroup)), { "displayName": n => { schedulingGroup.displayName = n.getStringValue(); }, "isActive": n => { schedulingGroup.isActive = n.getBooleanValue(); }, "userIds": n => { schedulingGroup.userIds = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoShift(shift = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(shift)), { "draftShift": n => { shift.draftShift = n.getObject(deserializeIntoShiftItem); }, "isStagedForDeletion": n => { shift.isStagedForDeletion = n.getBooleanValue(); }, "schedulingGroupId": n => { shift.schedulingGroupId = n.getStringValue(); }, "sharedShift": n => { shift.sharedShift = n.getObject(deserializeIntoShiftItem); }, "userId": n => { shift.userId = n.getStringValue(); } });
}

function deserializeIntoSwapShiftsChangeRequest(swapShiftsChangeRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOfferShiftRequest(swapShiftsChangeRequest)), { "recipientShiftId": n => { swapShiftsChangeRequest.recipientShiftId = n.getStringValue(); } });
}

var ConfirmedBy;
(function (ConfirmedBy) {
    ConfirmedBy["None"] = "none";
    ConfirmedBy["User"] = "user";
    ConfirmedBy["Manager"] = "manager";
    ConfirmedBy["UnknownFutureValue"] = "unknownFutureValue";
})(ConfirmedBy || (ConfirmedBy = {}));

function deserializeIntoTimeCardEvent(timeCardEvent = {}) {
    return {
        "atApprovedLocation": n => { timeCardEvent.atApprovedLocation = n.getBooleanValue(); },
        "dateTime": n => { timeCardEvent.dateTime = n.getDateValue(); },
        "notes": n => { timeCardEvent.notes = n.getObject(deserializeIntoItemBody); },
    };
}

function deserializeIntoTimeCardBreak(timeCardBreak = {}) {
    return {
        "breakId": n => { timeCardBreak.breakId = n.getStringValue(); },
        "end": n => { timeCardBreak.end = n.getObject(deserializeIntoTimeCardEvent); },
        "notes": n => { timeCardBreak.notes = n.getObject(deserializeIntoItemBody); },
        "start": n => { timeCardBreak.start = n.getObject(deserializeIntoTimeCardEvent); },
    };
}

function deserializeIntoTimeCardEntry(timeCardEntry = {}) {
    return {
        "breaks": n => { timeCardEntry.breaks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeCardBreak); },
        "clockInEvent": n => { timeCardEntry.clockInEvent = n.getObject(deserializeIntoTimeCardEvent); },
        "clockOutEvent": n => { timeCardEntry.clockOutEvent = n.getObject(deserializeIntoTimeCardEvent); },
    };
}

var TimeCardState;
(function (TimeCardState) {
    TimeCardState["ClockedIn"] = "clockedIn";
    TimeCardState["OnBreak"] = "onBreak";
    TimeCardState["ClockedOut"] = "clockedOut";
    TimeCardState["UnknownFutureValue"] = "unknownFutureValue";
})(TimeCardState || (TimeCardState = {}));

function deserializeIntoTimeCard(timeCard = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(timeCard)), { "breaks": n => { timeCard.breaks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeCardBreak); }, "clockInEvent": n => { timeCard.clockInEvent = n.getObject(deserializeIntoTimeCardEvent); }, "clockOutEvent": n => { timeCard.clockOutEvent = n.getObject(deserializeIntoTimeCardEvent); }, "confirmedBy": n => { timeCard.confirmedBy = n.getEnumValue(ConfirmedBy); }, "notes": n => { timeCard.notes = n.getObject(deserializeIntoItemBody); }, "originalEntry": n => { timeCard.originalEntry = n.getObject(deserializeIntoTimeCardEntry); }, "state": n => { timeCard.state = n.getEnumValue(TimeCardState); }, "userId": n => { timeCard.userId = n.getStringValue(); } });
}

function deserializeIntoTimeClockSettings(timeClockSettings = {}) {
    return {
        "approvedLocation": n => { timeClockSettings.approvedLocation = n.getObject(deserializeIntoGeoCoordinates); },
    };
}

function deserializeIntoTimeOffItem(timeOffItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoScheduleEntity(timeOffItem)), { "timeOffReasonId": n => { timeOffItem.timeOffReasonId = n.getStringValue(); } });
}

function deserializeIntoTimeOff(timeOff = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(timeOff)), { "draftTimeOff": n => { timeOff.draftTimeOff = n.getObject(deserializeIntoTimeOffItem); }, "isStagedForDeletion": n => { timeOff.isStagedForDeletion = n.getBooleanValue(); }, "sharedTimeOff": n => { timeOff.sharedTimeOff = n.getObject(deserializeIntoTimeOffItem); }, "userId": n => { timeOff.userId = n.getStringValue(); } });
}

var TimeOffReasonIconType;
(function (TimeOffReasonIconType) {
    TimeOffReasonIconType["None"] = "none";
    TimeOffReasonIconType["Car"] = "car";
    TimeOffReasonIconType["Calendar"] = "calendar";
    TimeOffReasonIconType["Running"] = "running";
    TimeOffReasonIconType["Plane"] = "plane";
    TimeOffReasonIconType["FirstAid"] = "firstAid";
    TimeOffReasonIconType["Doctor"] = "doctor";
    TimeOffReasonIconType["NotWorking"] = "notWorking";
    TimeOffReasonIconType["Clock"] = "clock";
    TimeOffReasonIconType["JuryDuty"] = "juryDuty";
    TimeOffReasonIconType["Globe"] = "globe";
    TimeOffReasonIconType["Cup"] = "cup";
    TimeOffReasonIconType["Phone"] = "phone";
    TimeOffReasonIconType["Weather"] = "weather";
    TimeOffReasonIconType["Umbrella"] = "umbrella";
    TimeOffReasonIconType["PiggyBank"] = "piggyBank";
    TimeOffReasonIconType["Dog"] = "dog";
    TimeOffReasonIconType["Cake"] = "cake";
    TimeOffReasonIconType["TrafficCone"] = "trafficCone";
    TimeOffReasonIconType["Pin"] = "pin";
    TimeOffReasonIconType["Sunny"] = "sunny";
    TimeOffReasonIconType["UnknownFutureValue"] = "unknownFutureValue";
})(TimeOffReasonIconType || (TimeOffReasonIconType = {}));

function deserializeIntoTimeOffReason(timeOffReason = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(timeOffReason)), { "displayName": n => { timeOffReason.displayName = n.getStringValue(); }, "iconType": n => { timeOffReason.iconType = n.getEnumValue(TimeOffReasonIconType); }, "isActive": n => { timeOffReason.isActive = n.getBooleanValue(); } });
}

function deserializeIntoTimeOffRequest(timeOffRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoScheduleChangeRequest(timeOffRequest)), { "endDateTime": n => { timeOffRequest.endDateTime = n.getDateValue(); }, "startDateTime": n => { timeOffRequest.startDateTime = n.getDateValue(); }, "timeOffReasonId": n => { timeOffRequest.timeOffReasonId = n.getStringValue(); } });
}

function deserializeIntoSchedule(schedule = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(schedule)), { "enabled": n => { schedule.enabled = n.getBooleanValue(); }, "offerShiftRequests": n => { schedule.offerShiftRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOfferShiftRequest); }, "offerShiftRequestsEnabled": n => { schedule.offerShiftRequestsEnabled = n.getBooleanValue(); }, "openShiftChangeRequests": n => { schedule.openShiftChangeRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOpenShiftChangeRequest); }, "openShifts": n => { schedule.openShifts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOpenShift); }, "openShiftsEnabled": n => { schedule.openShiftsEnabled = n.getBooleanValue(); }, "provisionStatus": n => { schedule.provisionStatus = n.getEnumValue(OperationStatus); }, "provisionStatusCode": n => { schedule.provisionStatusCode = n.getStringValue(); }, "schedulingGroups": n => { schedule.schedulingGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSchedulingGroup); }, "shifts": n => { schedule.shifts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoShift); }, "swapShiftsChangeRequests": n => { schedule.swapShiftsChangeRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSwapShiftsChangeRequest); }, "swapShiftsRequestsEnabled": n => { schedule.swapShiftsRequestsEnabled = n.getBooleanValue(); }, "timeCards": n => { schedule.timeCards = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeCard); }, "timeClockEnabled": n => { schedule.timeClockEnabled = n.getBooleanValue(); }, "timeClockSettings": n => { schedule.timeClockSettings = n.getObject(deserializeIntoTimeClockSettings); }, "timeOffReasons": n => { schedule.timeOffReasons = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeOffReason); }, "timeOffRequests": n => { schedule.timeOffRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeOffRequest); }, "timeOffRequestsEnabled": n => { schedule.timeOffRequestsEnabled = n.getBooleanValue(); }, "timesOff": n => { schedule.timesOff = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeOff); }, "timeZone": n => { schedule.timeZone = n.getStringValue(); }, "workforceIntegrationIds": n => { schedule.workforceIntegrationIds = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoTeamDiscoverySettings(teamDiscoverySettings = {}) {
    return {
        "showInTeamsSearchAndSuggestions": n => { teamDiscoverySettings.showInTeamsSearchAndSuggestions = n.getBooleanValue(); },
    };
}

var GiphyRatingType;
(function (GiphyRatingType) {
    GiphyRatingType["Strict"] = "strict";
    GiphyRatingType["Moderate"] = "moderate";
    GiphyRatingType["UnknownFutureValue"] = "unknownFutureValue";
})(GiphyRatingType || (GiphyRatingType = {}));

function deserializeIntoTeamFunSettings(teamFunSettings = {}) {
    return {
        "allowCustomMemes": n => { teamFunSettings.allowCustomMemes = n.getBooleanValue(); },
        "allowGiphy": n => { teamFunSettings.allowGiphy = n.getBooleanValue(); },
        "allowStickersAndMemes": n => { teamFunSettings.allowStickersAndMemes = n.getBooleanValue(); },
        "giphyContentRating": n => { teamFunSettings.giphyContentRating = n.getEnumValue(GiphyRatingType); },
    };
}

function deserializeIntoTeamGuestSettings(teamGuestSettings = {}) {
    return {
        "allowCreateUpdateChannels": n => { teamGuestSettings.allowCreateUpdateChannels = n.getBooleanValue(); },
        "allowDeleteChannels": n => { teamGuestSettings.allowDeleteChannels = n.getBooleanValue(); },
    };
}

function deserializeIntoTeamMemberSettings(teamMemberSettings = {}) {
    return {
        "allowAddRemoveApps": n => { teamMemberSettings.allowAddRemoveApps = n.getBooleanValue(); },
        "allowCreatePrivateChannels": n => { teamMemberSettings.allowCreatePrivateChannels = n.getBooleanValue(); },
        "allowCreateUpdateChannels": n => { teamMemberSettings.allowCreateUpdateChannels = n.getBooleanValue(); },
        "allowCreateUpdateRemoveConnectors": n => { teamMemberSettings.allowCreateUpdateRemoveConnectors = n.getBooleanValue(); },
        "allowCreateUpdateRemoveTabs": n => { teamMemberSettings.allowCreateUpdateRemoveTabs = n.getBooleanValue(); },
        "allowDeleteChannels": n => { teamMemberSettings.allowDeleteChannels = n.getBooleanValue(); },
    };
}

function deserializeIntoTeamMessagingSettings(teamMessagingSettings = {}) {
    return {
        "allowChannelMentions": n => { teamMessagingSettings.allowChannelMentions = n.getBooleanValue(); },
        "allowOwnerDeleteMessages": n => { teamMessagingSettings.allowOwnerDeleteMessages = n.getBooleanValue(); },
        "allowTeamMentions": n => { teamMessagingSettings.allowTeamMentions = n.getBooleanValue(); },
        "allowUserDeleteMessages": n => { teamMessagingSettings.allowUserDeleteMessages = n.getBooleanValue(); },
        "allowUserEditMessages": n => { teamMessagingSettings.allowUserEditMessages = n.getBooleanValue(); },
    };
}

function deserializeIntoTeamsTemplate(teamsTemplate = {}) {
    return Object.assign({}, deserializeIntoEntity(teamsTemplate));
}

function deserializeIntoTeamSummary(teamSummary = {}) {
    return {
        "guestsCount": n => { teamSummary.guestsCount = n.getNumberValue(); },
        "membersCount": n => { teamSummary.membersCount = n.getNumberValue(); },
        "ownersCount": n => { teamSummary.ownersCount = n.getNumberValue(); },
    };
}

var TeamTemplateAudience;
(function (TeamTemplateAudience) {
    TeamTemplateAudience["Organization"] = "organization";
    TeamTemplateAudience["User"] = "user";
    TeamTemplateAudience["Public"] = "public";
    TeamTemplateAudience["UnknownFutureValue"] = "unknownFutureValue";
})(TeamTemplateAudience || (TeamTemplateAudience = {}));

function deserializeIntoTeamTemplateDefinition(teamTemplateDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamTemplateDefinition)), { "audience": n => { teamTemplateDefinition.audience = n.getEnumValue(TeamTemplateAudience); }, "categories": n => { teamTemplateDefinition.categories = n.getCollectionOfPrimitiveValues(); }, "description": n => { teamTemplateDefinition.description = n.getStringValue(); }, "displayName": n => { teamTemplateDefinition.displayName = n.getStringValue(); }, "iconUrl": n => { teamTemplateDefinition.iconUrl = n.getStringValue(); }, "languageTag": n => { teamTemplateDefinition.languageTag = n.getStringValue(); }, "lastModifiedBy": n => { teamTemplateDefinition.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedDateTime": n => { teamTemplateDefinition.lastModifiedDateTime = n.getDateValue(); }, "parentTemplateId": n => { teamTemplateDefinition.parentTemplateId = n.getStringValue(); }, "publisherName": n => { teamTemplateDefinition.publisherName = n.getStringValue(); }, "shortDescription": n => { teamTemplateDefinition.shortDescription = n.getStringValue(); }, "teamDefinition": n => { teamTemplateDefinition.teamDefinition = n.getObject(deserializeIntoTeam); } });
}

function deserializeIntoTeamworkTagMember(teamworkTagMember = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamworkTagMember)), { "displayName": n => { teamworkTagMember.displayName = n.getStringValue(); }, "tenantId": n => { teamworkTagMember.tenantId = n.getStringValue(); }, "userId": n => { teamworkTagMember.userId = n.getStringValue(); } });
}

var TeamworkTagType;
(function (TeamworkTagType) {
    TeamworkTagType["Standard"] = "standard";
    TeamworkTagType["UnknownFutureValue"] = "unknownFutureValue";
})(TeamworkTagType || (TeamworkTagType = {}));

function deserializeIntoTeamworkTag(teamworkTag = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(teamworkTag)), { "description": n => { teamworkTag.description = n.getStringValue(); }, "displayName": n => { teamworkTag.displayName = n.getStringValue(); }, "memberCount": n => { teamworkTag.memberCount = n.getNumberValue(); }, "members": n => { teamworkTag.members = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamworkTagMember); }, "tagType": n => { teamworkTag.tagType = n.getEnumValue(TeamworkTagType); }, "teamId": n => { teamworkTag.teamId = n.getStringValue(); } });
}

var TeamSpecialization;
(function (TeamSpecialization) {
    TeamSpecialization["None"] = "none";
    TeamSpecialization["EducationStandard"] = "educationStandard";
    TeamSpecialization["EducationClass"] = "educationClass";
    TeamSpecialization["EducationProfessionalLearningCommunity"] = "educationProfessionalLearningCommunity";
    TeamSpecialization["EducationStaff"] = "educationStaff";
    TeamSpecialization["HealthcareStandard"] = "healthcareStandard";
    TeamSpecialization["HealthcareCareCoordination"] = "healthcareCareCoordination";
    TeamSpecialization["UnknownFutureValue"] = "unknownFutureValue";
})(TeamSpecialization || (TeamSpecialization = {}));

var TeamVisibilityType;
(function (TeamVisibilityType) {
    TeamVisibilityType["Private"] = "private";
    TeamVisibilityType["Public"] = "public";
    TeamVisibilityType["HiddenMembership"] = "hiddenMembership";
    TeamVisibilityType["UnknownFutureValue"] = "unknownFutureValue";
})(TeamVisibilityType || (TeamVisibilityType = {}));

function deserializeIntoTeam(team = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(team)), { "allChannels": n => { team.allChannels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChannel); }, "channels": n => { team.channels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChannel); }, "classification": n => { team.classification = n.getStringValue(); }, "createdDateTime": n => { team.createdDateTime = n.getDateValue(); }, "description": n => { team.description = n.getStringValue(); }, "discoverySettings": n => { team.discoverySettings = n.getObject(deserializeIntoTeamDiscoverySettings); }, "displayName": n => { team.displayName = n.getStringValue(); }, "funSettings": n => { team.funSettings = n.getObject(deserializeIntoTeamFunSettings); }, "group": n => { team.group = n.getObject(deserializeIntoGroup); }, "guestSettings": n => { team.guestSettings = n.getObject(deserializeIntoTeamGuestSettings); }, "incomingChannels": n => { team.incomingChannels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChannel); }, "installedApps": n => { team.installedApps = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsAppInstallation); }, "internalId": n => { team.internalId = n.getStringValue(); }, "isArchived": n => { team.isArchived = n.getBooleanValue(); }, "isMembershipLimitedToOwners": n => { team.isMembershipLimitedToOwners = n.getBooleanValue(); }, "members": n => { team.members = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationMember); }, "memberSettings": n => { team.memberSettings = n.getObject(deserializeIntoTeamMemberSettings); }, "messagingSettings": n => { team.messagingSettings = n.getObject(deserializeIntoTeamMessagingSettings); }, "operations": n => { team.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamsAsyncOperation); }, "owners": n => { team.owners = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUser); }, "permissionGrants": n => { team.permissionGrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoResourceSpecificPermissionGrant); }, "photo": n => { team.photo = n.getObject(deserializeIntoProfilePhoto); }, "primaryChannel": n => { team.primaryChannel = n.getObject(deserializeIntoChannel); }, "schedule": n => { team.schedule = n.getObject(deserializeIntoSchedule); }, "specialization": n => { team.specialization = n.getEnumValue(TeamSpecialization); }, "summary": n => { team.summary = n.getObject(deserializeIntoTeamSummary); }, "tags": n => { team.tags = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeamworkTag); }, "template": n => { team.template = n.getObject(deserializeIntoTeamsTemplate); }, "templateDefinition": n => { team.templateDefinition = n.getObject(deserializeIntoTeamTemplateDefinition); }, "tenantId": n => { team.tenantId = n.getStringValue(); }, "visibility": n => { team.visibility = n.getEnumValue(TeamVisibilityType); }, "webUrl": n => { team.webUrl = n.getStringValue(); } });
}

var GroupAccessType;
(function (GroupAccessType) {
    GroupAccessType["None"] = "none";
    GroupAccessType["Private"] = "private";
    GroupAccessType["Secret"] = "secret";
    GroupAccessType["Public"] = "public";
})(GroupAccessType || (GroupAccessType = {}));

function deserializeIntoGroup(group = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(group)), { "acceptedSenders": n => { group.acceptedSenders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "accessType": n => { group.accessType = n.getEnumValue(GroupAccessType); }, "allowExternalSenders": n => { group.allowExternalSenders = n.getBooleanValue(); }, "appRoleAssignments": n => { group.appRoleAssignments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppRoleAssignment); }, "assignedLabels": n => { group.assignedLabels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssignedLabel); }, "assignedLicenses": n => { group.assignedLicenses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssignedLicense); }, "autoSubscribeNewMembers": n => { group.autoSubscribeNewMembers = n.getBooleanValue(); }, "calendar": n => { group.calendar = n.getObject(deserializeIntoCalendar); }, "calendarView": n => { group.calendarView = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "classification": n => { group.classification = n.getStringValue(); }, "conversations": n => { group.conversations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversation); }, "createdByAppId": n => { group.createdByAppId = n.getStringValue(); }, "createdDateTime": n => { group.createdDateTime = n.getDateValue(); }, "createdOnBehalfOf": n => { group.createdOnBehalfOf = n.getObject(deserializeIntoDirectoryObject); }, "description": n => { group.description = n.getStringValue(); }, "displayName": n => { group.displayName = n.getStringValue(); }, "drive": n => { group.drive = n.getObject(deserializeIntoDrive); }, "drives": n => { group.drives = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDrive); }, "endpoints": n => { group.endpoints = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEndpoint); }, "events": n => { group.events = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "expirationDateTime": n => { group.expirationDateTime = n.getDateValue(); }, "extensions": n => { group.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "groupLifecyclePolicies": n => { group.groupLifecyclePolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoGroupLifecyclePolicy); }, "groupTypes": n => { group.groupTypes = n.getCollectionOfPrimitiveValues(); }, "hasMembersWithLicenseErrors": n => { group.hasMembersWithLicenseErrors = n.getBooleanValue(); }, "hideFromAddressLists": n => { group.hideFromAddressLists = n.getBooleanValue(); }, "hideFromOutlookClients": n => { group.hideFromOutlookClients = n.getBooleanValue(); }, "infoCatalogs": n => { group.infoCatalogs = n.getCollectionOfPrimitiveValues(); }, "isArchived": n => { group.isArchived = n.getBooleanValue(); }, "isAssignableToRole": n => { group.isAssignableToRole = n.getBooleanValue(); }, "isFavorite": n => { group.isFavorite = n.getBooleanValue(); }, "isManagementRestricted": n => { group.isManagementRestricted = n.getBooleanValue(); }, "isSubscribedByMail": n => { group.isSubscribedByMail = n.getBooleanValue(); }, "licenseProcessingState": n => { group.licenseProcessingState = n.getObject(deserializeIntoLicenseProcessingState); }, "mail": n => { group.mail = n.getStringValue(); }, "mailEnabled": n => { group.mailEnabled = n.getBooleanValue(); }, "mailNickname": n => { group.mailNickname = n.getStringValue(); }, "memberOf": n => { group.memberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "members": n => { group.members = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "membershipRule": n => { group.membershipRule = n.getStringValue(); }, "membershipRuleProcessingState": n => { group.membershipRuleProcessingState = n.getStringValue(); }, "membershipRuleProcessingStatus": n => { group.membershipRuleProcessingStatus = n.getObject(deserializeIntoMembershipRuleProcessingStatus); }, "membersWithLicenseErrors": n => { group.membersWithLicenseErrors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "onenote": n => { group.onenote = n.getObject(deserializeIntoOnenote); }, "onPremisesDomainName": n => { group.onPremisesDomainName = n.getStringValue(); }, "onPremisesLastSyncDateTime": n => { group.onPremisesLastSyncDateTime = n.getDateValue(); }, "onPremisesNetBiosName": n => { group.onPremisesNetBiosName = n.getStringValue(); }, "onPremisesProvisioningErrors": n => { group.onPremisesProvisioningErrors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnPremisesProvisioningError); }, "onPremisesSamAccountName": n => { group.onPremisesSamAccountName = n.getStringValue(); }, "onPremisesSecurityIdentifier": n => { group.onPremisesSecurityIdentifier = n.getStringValue(); }, "onPremisesSyncEnabled": n => { group.onPremisesSyncEnabled = n.getBooleanValue(); }, "organizationId": n => { group.organizationId = n.getStringValue(); }, "owners": n => { group.owners = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "permissionGrants": n => { group.permissionGrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoResourceSpecificPermissionGrant); }, "photo": n => { group.photo = n.getObject(deserializeIntoProfilePhoto); }, "photos": n => { group.photos = n.getCollectionOfObjectValuesFromMethod(deserializeIntoProfilePhoto); }, "planner": n => { group.planner = n.getObject(deserializeIntoPlannerGroup); }, "preferredDataLocation": n => { group.preferredDataLocation = n.getStringValue(); }, "preferredLanguage": n => { group.preferredLanguage = n.getStringValue(); }, "proxyAddresses": n => { group.proxyAddresses = n.getCollectionOfPrimitiveValues(); }, "rejectedSenders": n => { group.rejectedSenders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "renewedDateTime": n => { group.renewedDateTime = n.getDateValue(); }, "resourceBehaviorOptions": n => { group.resourceBehaviorOptions = n.getCollectionOfPrimitiveValues(); }, "resourceProvisioningOptions": n => { group.resourceProvisioningOptions = n.getCollectionOfPrimitiveValues(); }, "securityEnabled": n => { group.securityEnabled = n.getBooleanValue(); }, "securityIdentifier": n => { group.securityIdentifier = n.getStringValue(); }, "settings": n => { group.settings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectorySetting); }, "sites": n => { group.sites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSite); }, "team": n => { group.team = n.getObject(deserializeIntoTeam); }, "theme": n => { group.theme = n.getStringValue(); }, "threads": n => { group.threads = n.getCollectionOfObjectValuesFromMethod(deserializeIntoConversationThread); }, "transitiveMemberOf": n => { group.transitiveMemberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "transitiveMembers": n => { group.transitiveMembers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "unseenConversationsCount": n => { group.unseenConversationsCount = n.getNumberValue(); }, "unseenCount": n => { group.unseenCount = n.getNumberValue(); }, "unseenMessagesCount": n => { group.unseenMessagesCount = n.getNumberValue(); }, "visibility": n => { group.visibility = n.getStringValue(); }, "writebackConfiguration": n => { group.writebackConfiguration = n.getObject(deserializeIntoGroupWritebackConfiguration); } });
}

var InferenceClassificationType;
(function (InferenceClassificationType) {
    InferenceClassificationType["Focused"] = "focused";
    InferenceClassificationType["Other"] = "other";
})(InferenceClassificationType || (InferenceClassificationType = {}));

function deserializeIntoInferenceClassificationOverride(inferenceClassificationOverride = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(inferenceClassificationOverride)), { "classifyAs": n => { inferenceClassificationOverride.classifyAs = n.getEnumValue(InferenceClassificationType); }, "senderEmailAddress": n => { inferenceClassificationOverride.senderEmailAddress = n.getObject(deserializeIntoEmailAddress); } });
}

function deserializeIntoInferenceClassification(inferenceClassification = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(inferenceClassification)), { "overrides": n => { inferenceClassification.overrides = n.getCollectionOfObjectValuesFromMethod(deserializeIntoInferenceClassificationOverride); } });
}

var VolumeType;
(function (VolumeType) {
    VolumeType["OperatingSystemVolume"] = "operatingSystemVolume";
    VolumeType["FixedDataVolume"] = "fixedDataVolume";
    VolumeType["RemovableDataVolume"] = "removableDataVolume";
    VolumeType["UnknownFutureValue"] = "unknownFutureValue";
})(VolumeType || (VolumeType = {}));

function deserializeIntoBitlockerRecoveryKey(bitlockerRecoveryKey = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(bitlockerRecoveryKey)), { "createdDateTime": n => { bitlockerRecoveryKey.createdDateTime = n.getDateValue(); }, "deviceId": n => { bitlockerRecoveryKey.deviceId = n.getStringValue(); }, "key": n => { bitlockerRecoveryKey.key = n.getStringValue(); }, "volumeType": n => { bitlockerRecoveryKey.volumeType = n.getEnumValue(VolumeType); } });
}

function deserializeIntoBitlocker(bitlocker = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(bitlocker)), { "recoveryKeys": n => { bitlocker.recoveryKeys = n.getCollectionOfObjectValuesFromMethod(deserializeIntoBitlockerRecoveryKey); } });
}

function deserializeIntoDataLossPreventionPolicy(dataLossPreventionPolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(dataLossPreventionPolicy)), { "name": n => { dataLossPreventionPolicy.name = n.getStringValue(); } });
}

function deserializeIntoParentLabelDetails(parentLabelDetails = {}) {
    return {
        "color": n => { parentLabelDetails.color = n.getStringValue(); },
        "description": n => { parentLabelDetails.description = n.getStringValue(); },
        "id": n => { parentLabelDetails.id = n.getStringValue(); },
        "isActive": n => { parentLabelDetails.isActive = n.getBooleanValue(); },
        "name": n => { parentLabelDetails.name = n.getStringValue(); },
        "parent": n => { parentLabelDetails.parent = n.getObject(deserializeIntoParentLabelDetails); },
        "sensitivity": n => { parentLabelDetails.sensitivity = n.getNumberValue(); },
        "tooltip": n => { parentLabelDetails.tooltip = n.getStringValue(); },
    };
}

function deserializeIntoInformationProtectionLabel(informationProtectionLabel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(informationProtectionLabel)), { "color": n => { informationProtectionLabel.color = n.getStringValue(); }, "description": n => { informationProtectionLabel.description = n.getStringValue(); }, "isActive": n => { informationProtectionLabel.isActive = n.getBooleanValue(); }, "name": n => { informationProtectionLabel.name = n.getStringValue(); }, "parent": n => { informationProtectionLabel.parent = n.getObject(deserializeIntoParentLabelDetails); }, "sensitivity": n => { informationProtectionLabel.sensitivity = n.getNumberValue(); }, "tooltip": n => { informationProtectionLabel.tooltip = n.getStringValue(); } });
}

function deserializeIntoInformationProtectionPolicy(informationProtectionPolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(informationProtectionPolicy)), { "labels": n => { informationProtectionPolicy.labels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoInformationProtectionLabel); } });
}

var ApplicationMode;
(function (ApplicationMode) {
    ApplicationMode["Manual"] = "manual";
    ApplicationMode["Automatic"] = "automatic";
    ApplicationMode["Recommended"] = "recommended";
})(ApplicationMode || (ApplicationMode = {}));

function deserializeIntoAutoLabeling(autoLabeling = {}) {
    return {
        "message": n => { autoLabeling.message = n.getStringValue(); },
        "sensitiveTypeIds": n => { autoLabeling.sensitiveTypeIds = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoLabelActionBase(labelActionBase = {}) {
    return {
        "name": n => { labelActionBase.name = n.getStringValue(); },
    };
}

function deserializeIntoLabelPolicy(labelPolicy = {}) {
    return {
        "id": n => { labelPolicy.id = n.getStringValue(); },
        "name": n => { labelPolicy.name = n.getStringValue(); },
    };
}

var SensitivityLabelTarget;
(function (SensitivityLabelTarget) {
    SensitivityLabelTarget["Email"] = "email";
    SensitivityLabelTarget["Site"] = "site";
    SensitivityLabelTarget["UnifiedGroup"] = "unifiedGroup";
    SensitivityLabelTarget["UnknownFutureValue"] = "unknownFutureValue";
    SensitivityLabelTarget["Teamwork"] = "teamwork";
})(SensitivityLabelTarget || (SensitivityLabelTarget = {}));

function deserializeIntoSensitivityLabel$1(sensitivityLabel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(sensitivityLabel)), { "applicableTo": n => { sensitivityLabel.applicableTo = n.getEnumValue(SensitivityLabelTarget); }, "applicationMode": n => { sensitivityLabel.applicationMode = n.getEnumValue(ApplicationMode); }, "assignedPolicies": n => { sensitivityLabel.assignedPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLabelPolicy); }, "autoLabeling": n => { sensitivityLabel.autoLabeling = n.getObject(deserializeIntoAutoLabeling); }, "description": n => { sensitivityLabel.description = n.getStringValue(); }, "displayName": n => { sensitivityLabel.displayName = n.getStringValue(); }, "isDefault": n => { sensitivityLabel.isDefault = n.getBooleanValue(); }, "isEndpointProtectionEnabled": n => { sensitivityLabel.isEndpointProtectionEnabled = n.getBooleanValue(); }, "labelActions": n => { sensitivityLabel.labelActions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLabelActionBase); }, "name": n => { sensitivityLabel.name = n.getStringValue(); }, "priority": n => { sensitivityLabel.priority = n.getNumberValue(); }, "sublabels": n => { sensitivityLabel.sublabels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSensitivityLabel$1); }, "toolTip": n => { sensitivityLabel.toolTip = n.getStringValue(); } });
}

function deserializeIntoSensitivityPolicySettings(sensitivityPolicySettings = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(sensitivityPolicySettings)), { "applicableTo": n => { sensitivityPolicySettings.applicableTo = n.getEnumValue(SensitivityLabelTarget); }, "downgradeSensitivityRequiresJustification": n => { sensitivityPolicySettings.downgradeSensitivityRequiresJustification = n.getBooleanValue(); }, "helpWebUrl": n => { sensitivityPolicySettings.helpWebUrl = n.getStringValue(); }, "isMandatory": n => { sensitivityPolicySettings.isMandatory = n.getBooleanValue(); } });
}

var ThreatAssessmentResultType;
(function (ThreatAssessmentResultType) {
    ThreatAssessmentResultType["CheckPolicy"] = "checkPolicy";
    ThreatAssessmentResultType["Rescan"] = "rescan";
    ThreatAssessmentResultType["UnknownFutureValue"] = "unknownFutureValue";
})(ThreatAssessmentResultType || (ThreatAssessmentResultType = {}));

function deserializeIntoThreatAssessmentResult(threatAssessmentResult = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(threatAssessmentResult)), { "createdDateTime": n => { threatAssessmentResult.createdDateTime = n.getDateValue(); }, "message": n => { threatAssessmentResult.message = n.getStringValue(); }, "resultType": n => { threatAssessmentResult.resultType = n.getEnumValue(ThreatAssessmentResultType); } });
}

var ThreatAssessmentContentType;
(function (ThreatAssessmentContentType) {
    ThreatAssessmentContentType["Mail"] = "mail";
    ThreatAssessmentContentType["Url"] = "url";
    ThreatAssessmentContentType["File"] = "file";
})(ThreatAssessmentContentType || (ThreatAssessmentContentType = {}));

var ThreatAssessmentRequestSource;
(function (ThreatAssessmentRequestSource) {
    ThreatAssessmentRequestSource["Undefined"] = "undefined";
    ThreatAssessmentRequestSource["User"] = "user";
    ThreatAssessmentRequestSource["Administrator"] = "administrator";
})(ThreatAssessmentRequestSource || (ThreatAssessmentRequestSource = {}));

var ThreatAssessmentStatus;
(function (ThreatAssessmentStatus) {
    ThreatAssessmentStatus["Pending"] = "pending";
    ThreatAssessmentStatus["Completed"] = "completed";
})(ThreatAssessmentStatus || (ThreatAssessmentStatus = {}));

var ThreatCategory;
(function (ThreatCategory) {
    ThreatCategory["Undefined"] = "undefined";
    ThreatCategory["Spam"] = "spam";
    ThreatCategory["Phishing"] = "phishing";
    ThreatCategory["Malware"] = "malware";
    ThreatCategory["UnknownFutureValue"] = "unknownFutureValue";
})(ThreatCategory || (ThreatCategory = {}));

var ThreatExpectedAssessment;
(function (ThreatExpectedAssessment) {
    ThreatExpectedAssessment["Block"] = "block";
    ThreatExpectedAssessment["Unblock"] = "unblock";
})(ThreatExpectedAssessment || (ThreatExpectedAssessment = {}));

function deserializeIntoThreatAssessmentRequest(threatAssessmentRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(threatAssessmentRequest)), { "category": n => { threatAssessmentRequest.category = n.getEnumValue(ThreatCategory); }, "contentType": n => { threatAssessmentRequest.contentType = n.getEnumValue(ThreatAssessmentContentType); }, "createdBy": n => { threatAssessmentRequest.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { threatAssessmentRequest.createdDateTime = n.getDateValue(); }, "expectedAssessment": n => { threatAssessmentRequest.expectedAssessment = n.getEnumValue(ThreatExpectedAssessment); }, "requestSource": n => { threatAssessmentRequest.requestSource = n.getEnumValue(ThreatAssessmentRequestSource); }, "results": n => { threatAssessmentRequest.results = n.getCollectionOfObjectValuesFromMethod(deserializeIntoThreatAssessmentResult); }, "status": n => { threatAssessmentRequest.status = n.getEnumValue(ThreatAssessmentStatus); } });
}

function deserializeIntoInformationProtection$1(informationProtection = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(informationProtection)), { "bitlocker": n => { informationProtection.bitlocker = n.getObject(deserializeIntoBitlocker); }, "dataLossPreventionPolicies": n => { informationProtection.dataLossPreventionPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDataLossPreventionPolicy); }, "policy": n => { informationProtection.policy = n.getObject(deserializeIntoInformationProtectionPolicy); }, "sensitivityLabels": n => { informationProtection.sensitivityLabels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSensitivityLabel$1); }, "sensitivityPolicySettings": n => { informationProtection.sensitivityPolicySettings = n.getObject(deserializeIntoSensitivityPolicySettings); }, "threatAssessmentRequests": n => { informationProtection.threatAssessmentRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoThreatAssessmentRequest); } });
}

function deserializeIntoResourceReference(resourceReference = {}) {
    return {
        "id": n => { resourceReference.id = n.getStringValue(); },
        "type": n => { resourceReference.type = n.getStringValue(); },
        "webUrl": n => { resourceReference.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoResourceVisualization(resourceVisualization = {}) {
    return {
        "containerDisplayName": n => { resourceVisualization.containerDisplayName = n.getStringValue(); },
        "containerType": n => { resourceVisualization.containerType = n.getStringValue(); },
        "containerWebUrl": n => { resourceVisualization.containerWebUrl = n.getStringValue(); },
        "mediaType": n => { resourceVisualization.mediaType = n.getStringValue(); },
        "previewImageUrl": n => { resourceVisualization.previewImageUrl = n.getStringValue(); },
        "previewText": n => { resourceVisualization.previewText = n.getStringValue(); },
        "title": n => { resourceVisualization.title = n.getStringValue(); },
        "type": n => { resourceVisualization.type = n.getStringValue(); },
    };
}

function deserializeIntoInsightIdentity(insightIdentity = {}) {
    return {
        "address": n => { insightIdentity.address = n.getStringValue(); },
        "displayName": n => { insightIdentity.displayName = n.getStringValue(); },
        "id": n => { insightIdentity.id = n.getStringValue(); },
    };
}

function deserializeIntoSharingDetail(sharingDetail = {}) {
    return {
        "sharedBy": n => { sharingDetail.sharedBy = n.getObject(deserializeIntoInsightIdentity); },
        "sharedDateTime": n => { sharingDetail.sharedDateTime = n.getDateValue(); },
        "sharingReference": n => { sharingDetail.sharingReference = n.getObject(deserializeIntoResourceReference); },
        "sharingSubject": n => { sharingDetail.sharingSubject = n.getStringValue(); },
        "sharingType": n => { sharingDetail.sharingType = n.getStringValue(); },
    };
}

function deserializeIntoSharedInsight(sharedInsight = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(sharedInsight)), { "lastShared": n => { sharedInsight.lastShared = n.getObject(deserializeIntoSharingDetail); }, "lastSharedMethod": n => { sharedInsight.lastSharedMethod = n.getObject(deserializeIntoEntity); }, "resource": n => { sharedInsight.resource = n.getObject(deserializeIntoEntity); }, "resourceReference": n => { sharedInsight.resourceReference = n.getObject(deserializeIntoResourceReference); }, "resourceVisualization": n => { sharedInsight.resourceVisualization = n.getObject(deserializeIntoResourceVisualization); }, "sharingHistory": n => { sharedInsight.sharingHistory = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSharingDetail); } });
}

function deserializeIntoTrending(trending = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(trending)), { "lastModifiedDateTime": n => { trending.lastModifiedDateTime = n.getDateValue(); }, "resource": n => { trending.resource = n.getObject(deserializeIntoEntity); }, "resourceReference": n => { trending.resourceReference = n.getObject(deserializeIntoResourceReference); }, "resourceVisualization": n => { trending.resourceVisualization = n.getObject(deserializeIntoResourceVisualization); }, "weight": n => { trending.weight = n.getNumberValue(); } });
}

function deserializeIntoUsageDetails(usageDetails = {}) {
    return {
        "lastAccessedDateTime": n => { usageDetails.lastAccessedDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { usageDetails.lastModifiedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoUsedInsight(usedInsight = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(usedInsight)), { "lastUsed": n => { usedInsight.lastUsed = n.getObject(deserializeIntoUsageDetails); }, "resource": n => { usedInsight.resource = n.getObject(deserializeIntoEntity); }, "resourceReference": n => { usedInsight.resourceReference = n.getObject(deserializeIntoResourceReference); }, "resourceVisualization": n => { usedInsight.resourceVisualization = n.getObject(deserializeIntoResourceVisualization); } });
}

function deserializeIntoOfficeGraphInsights(officeGraphInsights = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(officeGraphInsights)), { "shared": n => { officeGraphInsights.shared = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSharedInsight); }, "trending": n => { officeGraphInsights.trending = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTrending); }, "used": n => { officeGraphInsights.used = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUsedInsight); } });
}

function deserializeIntoItemInsights(itemInsights = {}) {
    return Object.assign({}, deserializeIntoOfficeGraphInsights(itemInsights));
}

function deserializeIntoLicenseAssignmentState(licenseAssignmentState = {}) {
    return {
        "assignedByGroup": n => { licenseAssignmentState.assignedByGroup = n.getStringValue(); },
        "disabledPlans": n => { licenseAssignmentState.disabledPlans = n.getCollectionOfPrimitiveValues(); },
        "error": n => { licenseAssignmentState.error_escaped = n.getStringValue(); },
        "lastUpdatedDateTime": n => { licenseAssignmentState.lastUpdatedDateTime = n.getDateValue(); },
        "skuId": n => { licenseAssignmentState.skuId = n.getStringValue(); },
        "state": n => { licenseAssignmentState.state = n.getStringValue(); },
    };
}

function deserializeIntoServicePlanInfo(servicePlanInfo = {}) {
    return {
        "appliesTo": n => { servicePlanInfo.appliesTo = n.getStringValue(); },
        "provisioningStatus": n => { servicePlanInfo.provisioningStatus = n.getStringValue(); },
        "servicePlanId": n => { servicePlanInfo.servicePlanId = n.getStringValue(); },
        "servicePlanName": n => { servicePlanInfo.servicePlanName = n.getStringValue(); },
    };
}

function deserializeIntoLicenseDetails(licenseDetails = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(licenseDetails)), { "servicePlans": n => { licenseDetails.servicePlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoServicePlanInfo); }, "skuId": n => { licenseDetails.skuId = n.getStringValue(); }, "skuPartNumber": n => { licenseDetails.skuPartNumber = n.getStringValue(); } });
}

var DelegateMeetingMessageDeliveryOptions;
(function (DelegateMeetingMessageDeliveryOptions) {
    DelegateMeetingMessageDeliveryOptions["SendToDelegateAndInformationToPrincipal"] = "sendToDelegateAndInformationToPrincipal";
    DelegateMeetingMessageDeliveryOptions["SendToDelegateAndPrincipal"] = "sendToDelegateAndPrincipal";
    DelegateMeetingMessageDeliveryOptions["SendToDelegateOnly"] = "sendToDelegateOnly";
})(DelegateMeetingMessageDeliveryOptions || (DelegateMeetingMessageDeliveryOptions = {}));

var AutomaticRepliesStatus;
(function (AutomaticRepliesStatus) {
    AutomaticRepliesStatus["Disabled"] = "disabled";
    AutomaticRepliesStatus["AlwaysEnabled"] = "alwaysEnabled";
    AutomaticRepliesStatus["Scheduled"] = "scheduled";
})(AutomaticRepliesStatus || (AutomaticRepliesStatus = {}));

var ExternalAudienceScope;
(function (ExternalAudienceScope) {
    ExternalAudienceScope["None"] = "none";
    ExternalAudienceScope["ContactsOnly"] = "contactsOnly";
    ExternalAudienceScope["All"] = "all";
})(ExternalAudienceScope || (ExternalAudienceScope = {}));

function deserializeIntoAutomaticRepliesSetting(automaticRepliesSetting = {}) {
    return {
        "externalAudience": n => { automaticRepliesSetting.externalAudience = n.getEnumValue(ExternalAudienceScope); },
        "externalReplyMessage": n => { automaticRepliesSetting.externalReplyMessage = n.getStringValue(); },
        "internalReplyMessage": n => { automaticRepliesSetting.internalReplyMessage = n.getStringValue(); },
        "scheduledEndDateTime": n => { automaticRepliesSetting.scheduledEndDateTime = n.getObject(deserializeIntoDateTimeTimeZone); },
        "scheduledStartDateTime": n => { automaticRepliesSetting.scheduledStartDateTime = n.getObject(deserializeIntoDateTimeTimeZone); },
        "status": n => { automaticRepliesSetting.status = n.getEnumValue(AutomaticRepliesStatus); },
    };
}

function deserializeIntoLocaleInfo(localeInfo = {}) {
    return {
        "displayName": n => { localeInfo.displayName = n.getStringValue(); },
        "locale": n => { localeInfo.locale = n.getStringValue(); },
    };
}

function deserializeIntoTimeZoneBase(timeZoneBase = {}) {
    return {
        "name": n => { timeZoneBase.name = n.getStringValue(); },
    };
}

function deserializeIntoWorkingHours(workingHours = {}) {
    return {
        "daysOfWeek": n => { workingHours.daysOfWeek = n.getEnumValues(DayOfWeek); },
        "endTime": n => { workingHours.endTime = n.getTimeOnlyValue(); },
        "startTime": n => { workingHours.startTime = n.getTimeOnlyValue(); },
        "timeZone": n => { workingHours.timeZone = n.getObject(deserializeIntoTimeZoneBase); },
    };
}

var MailboxRecipientType;
(function (MailboxRecipientType) {
    MailboxRecipientType["Unknown"] = "unknown";
    MailboxRecipientType["User"] = "user";
    MailboxRecipientType["Linked"] = "linked";
    MailboxRecipientType["Shared"] = "shared";
    MailboxRecipientType["Room"] = "room";
    MailboxRecipientType["Equipment"] = "equipment";
    MailboxRecipientType["Others"] = "others";
})(MailboxRecipientType || (MailboxRecipientType = {}));

var UserPurpose;
(function (UserPurpose) {
    UserPurpose["Unknown"] = "unknown";
    UserPurpose["User"] = "user";
    UserPurpose["Linked"] = "linked";
    UserPurpose["Shared"] = "shared";
    UserPurpose["Room"] = "room";
    UserPurpose["Equipment"] = "equipment";
    UserPurpose["Others"] = "others";
    UserPurpose["UnknownFutureValue"] = "unknownFutureValue";
})(UserPurpose || (UserPurpose = {}));

function deserializeIntoMailboxSettings(mailboxSettings = {}) {
    return {
        "archiveFolder": n => { mailboxSettings.archiveFolder = n.getStringValue(); },
        "automaticRepliesSetting": n => { mailboxSettings.automaticRepliesSetting = n.getObject(deserializeIntoAutomaticRepliesSetting); },
        "dateFormat": n => { mailboxSettings.dateFormat = n.getStringValue(); },
        "delegateMeetingMessageDeliveryOptions": n => { mailboxSettings.delegateMeetingMessageDeliveryOptions = n.getEnumValue(DelegateMeetingMessageDeliveryOptions); },
        "language": n => { mailboxSettings.language = n.getObject(deserializeIntoLocaleInfo); },
        "timeFormat": n => { mailboxSettings.timeFormat = n.getStringValue(); },
        "timeZone": n => { mailboxSettings.timeZone = n.getStringValue(); },
        "userPurpose": n => { mailboxSettings.userPurpose = n.getEnumValue(UserPurpose); },
        "userPurposeV2": n => { mailboxSettings.userPurposeV2 = n.getEnumValue(MailboxRecipientType); },
        "workingHours": n => { mailboxSettings.workingHours = n.getObject(deserializeIntoWorkingHours); },
    };
}

function deserializeIntoInternetMessageHeader(internetMessageHeader = {}) {
    return {
        "name": n => { internetMessageHeader.name = n.getStringValue(); },
        "value": n => { internetMessageHeader.value = n.getStringValue(); },
    };
}

function deserializeIntoMentionsPreview(mentionsPreview = {}) {
    return {
        "isMentioned": n => { mentionsPreview.isMentioned = n.getBooleanValue(); },
    };
}

function deserializeIntoMessage(message = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOutlookItem(message)), { "attachments": n => { message.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachment); }, "bccRecipients": n => { message.bccRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "body": n => { message.body = n.getObject(deserializeIntoItemBody); }, "bodyPreview": n => { message.bodyPreview = n.getStringValue(); }, "ccRecipients": n => { message.ccRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "conversationId": n => { message.conversationId = n.getStringValue(); }, "conversationIndex": n => { message.conversationIndex = n.getStringValue(); }, "extensions": n => { message.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "flag": n => { message.flag = n.getObject(deserializeIntoFollowupFlag); }, "from": n => { message.from = n.getObject(deserializeIntoRecipient); }, "hasAttachments": n => { message.hasAttachments = n.getBooleanValue(); }, "importance": n => { message.importance = n.getEnumValue(Importance); }, "inferenceClassification": n => { message.inferenceClassification = n.getEnumValue(InferenceClassificationType); }, "internetMessageHeaders": n => { message.internetMessageHeaders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoInternetMessageHeader); }, "internetMessageId": n => { message.internetMessageId = n.getStringValue(); }, "isDeliveryReceiptRequested": n => { message.isDeliveryReceiptRequested = n.getBooleanValue(); }, "isDraft": n => { message.isDraft = n.getBooleanValue(); }, "isRead": n => { message.isRead = n.getBooleanValue(); }, "isReadReceiptRequested": n => { message.isReadReceiptRequested = n.getBooleanValue(); }, "mentions": n => { message.mentions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMention); }, "mentionsPreview": n => { message.mentionsPreview = n.getObject(deserializeIntoMentionsPreview); }, "multiValueExtendedProperties": n => { message.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "parentFolderId": n => { message.parentFolderId = n.getStringValue(); }, "receivedDateTime": n => { message.receivedDateTime = n.getDateValue(); }, "replyTo": n => { message.replyTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "sender": n => { message.sender = n.getObject(deserializeIntoRecipient); }, "sentDateTime": n => { message.sentDateTime = n.getDateValue(); }, "singleValueExtendedProperties": n => { message.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "subject": n => { message.subject = n.getStringValue(); }, "toRecipients": n => { message.toRecipients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); }, "uniqueBody": n => { message.uniqueBody = n.getObject(deserializeIntoItemBody); }, "unsubscribeData": n => { message.unsubscribeData = n.getCollectionOfPrimitiveValues(); }, "unsubscribeEnabled": n => { message.unsubscribeEnabled = n.getBooleanValue(); }, "webLink": n => { message.webLink = n.getStringValue(); } });
}

function deserializeIntoMessageRuleActions(messageRuleActions = {}) {
    return {
        "assignCategories": n => { messageRuleActions.assignCategories = n.getCollectionOfPrimitiveValues(); },
        "copyToFolder": n => { messageRuleActions.copyToFolder = n.getStringValue(); },
        "delete": n => { messageRuleActions.delete = n.getBooleanValue(); },
        "forwardAsAttachmentTo": n => { messageRuleActions.forwardAsAttachmentTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); },
        "forwardTo": n => { messageRuleActions.forwardTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); },
        "markAsRead": n => { messageRuleActions.markAsRead = n.getBooleanValue(); },
        "markImportance": n => { messageRuleActions.markImportance = n.getEnumValue(Importance); },
        "moveToFolder": n => { messageRuleActions.moveToFolder = n.getStringValue(); },
        "permanentDelete": n => { messageRuleActions.permanentDelete = n.getBooleanValue(); },
        "redirectTo": n => { messageRuleActions.redirectTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); },
        "stopProcessingRules": n => { messageRuleActions.stopProcessingRules = n.getBooleanValue(); },
    };
}

function deserializeIntoSizeRange(sizeRange = {}) {
    return {
        "maximumSize": n => { sizeRange.maximumSize = n.getNumberValue(); },
        "minimumSize": n => { sizeRange.minimumSize = n.getNumberValue(); },
    };
}

var MessageActionFlag;
(function (MessageActionFlag) {
    MessageActionFlag["Any"] = "any";
    MessageActionFlag["Call"] = "call";
    MessageActionFlag["DoNotForward"] = "doNotForward";
    MessageActionFlag["FollowUp"] = "followUp";
    MessageActionFlag["Fyi"] = "fyi";
    MessageActionFlag["Forward"] = "forward";
    MessageActionFlag["NoResponseNecessary"] = "noResponseNecessary";
    MessageActionFlag["Read"] = "read";
    MessageActionFlag["Reply"] = "reply";
    MessageActionFlag["ReplyToAll"] = "replyToAll";
    MessageActionFlag["Review"] = "review";
})(MessageActionFlag || (MessageActionFlag = {}));

function deserializeIntoMessageRulePredicates(messageRulePredicates = {}) {
    return {
        "bodyContains": n => { messageRulePredicates.bodyContains = n.getCollectionOfPrimitiveValues(); },
        "bodyOrSubjectContains": n => { messageRulePredicates.bodyOrSubjectContains = n.getCollectionOfPrimitiveValues(); },
        "categories": n => { messageRulePredicates.categories = n.getCollectionOfPrimitiveValues(); },
        "fromAddresses": n => { messageRulePredicates.fromAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); },
        "hasAttachments": n => { messageRulePredicates.hasAttachments = n.getBooleanValue(); },
        "headerContains": n => { messageRulePredicates.headerContains = n.getCollectionOfPrimitiveValues(); },
        "importance": n => { messageRulePredicates.importance = n.getEnumValue(Importance); },
        "isApprovalRequest": n => { messageRulePredicates.isApprovalRequest = n.getBooleanValue(); },
        "isAutomaticForward": n => { messageRulePredicates.isAutomaticForward = n.getBooleanValue(); },
        "isAutomaticReply": n => { messageRulePredicates.isAutomaticReply = n.getBooleanValue(); },
        "isEncrypted": n => { messageRulePredicates.isEncrypted = n.getBooleanValue(); },
        "isMeetingRequest": n => { messageRulePredicates.isMeetingRequest = n.getBooleanValue(); },
        "isMeetingResponse": n => { messageRulePredicates.isMeetingResponse = n.getBooleanValue(); },
        "isNonDeliveryReport": n => { messageRulePredicates.isNonDeliveryReport = n.getBooleanValue(); },
        "isPermissionControlled": n => { messageRulePredicates.isPermissionControlled = n.getBooleanValue(); },
        "isReadReceipt": n => { messageRulePredicates.isReadReceipt = n.getBooleanValue(); },
        "isSigned": n => { messageRulePredicates.isSigned = n.getBooleanValue(); },
        "isVoicemail": n => { messageRulePredicates.isVoicemail = n.getBooleanValue(); },
        "messageActionFlag": n => { messageRulePredicates.messageActionFlag = n.getEnumValue(MessageActionFlag); },
        "notSentToMe": n => { messageRulePredicates.notSentToMe = n.getBooleanValue(); },
        "recipientContains": n => { messageRulePredicates.recipientContains = n.getCollectionOfPrimitiveValues(); },
        "senderContains": n => { messageRulePredicates.senderContains = n.getCollectionOfPrimitiveValues(); },
        "sensitivity": n => { messageRulePredicates.sensitivity = n.getEnumValue(Sensitivity); },
        "sentCcMe": n => { messageRulePredicates.sentCcMe = n.getBooleanValue(); },
        "sentOnlyToMe": n => { messageRulePredicates.sentOnlyToMe = n.getBooleanValue(); },
        "sentToAddresses": n => { messageRulePredicates.sentToAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRecipient); },
        "sentToMe": n => { messageRulePredicates.sentToMe = n.getBooleanValue(); },
        "sentToOrCcMe": n => { messageRulePredicates.sentToOrCcMe = n.getBooleanValue(); },
        "subjectContains": n => { messageRulePredicates.subjectContains = n.getCollectionOfPrimitiveValues(); },
        "withinSizeRange": n => { messageRulePredicates.withinSizeRange = n.getObject(deserializeIntoSizeRange); },
    };
}

function deserializeIntoMessageRule(messageRule = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(messageRule)), { "actions": n => { messageRule.actions = n.getObject(deserializeIntoMessageRuleActions); }, "conditions": n => { messageRule.conditions = n.getObject(deserializeIntoMessageRulePredicates); }, "displayName": n => { messageRule.displayName = n.getStringValue(); }, "exceptions": n => { messageRule.exceptions = n.getObject(deserializeIntoMessageRulePredicates); }, "hasError": n => { messageRule.hasError = n.getBooleanValue(); }, "isEnabled": n => { messageRule.isEnabled = n.getBooleanValue(); }, "isReadOnly": n => { messageRule.isReadOnly = n.getBooleanValue(); }, "sequence": n => { messageRule.sequence = n.getNumberValue(); } });
}

function deserializeIntoUserConfiguration(userConfiguration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userConfiguration)), { "binaryData": n => { userConfiguration.binaryData = n.getStringValue(); } });
}

function deserializeIntoMailFolder(mailFolder = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(mailFolder)), { "childFolderCount": n => { mailFolder.childFolderCount = n.getNumberValue(); }, "childFolders": n => { mailFolder.childFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMailFolder); }, "displayName": n => { mailFolder.displayName = n.getStringValue(); }, "isHidden": n => { mailFolder.isHidden = n.getBooleanValue(); }, "messageRules": n => { mailFolder.messageRules = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMessageRule); }, "messages": n => { mailFolder.messages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMessage); }, "multiValueExtendedProperties": n => { mailFolder.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "parentFolderId": n => { mailFolder.parentFolderId = n.getStringValue(); }, "singleValueExtendedProperties": n => { mailFolder.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "totalItemCount": n => { mailFolder.totalItemCount = n.getNumberValue(); }, "unreadItemCount": n => { mailFolder.unreadItemCount = n.getNumberValue(); }, "userConfigurations": n => { mailFolder.userConfigurations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUserConfiguration); }, "wellKnownName": n => { mailFolder.wellKnownName = n.getStringValue(); } });
}

function deserializeIntoManagedAppOperation(managedAppOperation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(managedAppOperation)), { "displayName": n => { managedAppOperation.displayName = n.getStringValue(); }, "lastModifiedDateTime": n => { managedAppOperation.lastModifiedDateTime = n.getDateValue(); }, "state": n => { managedAppOperation.state = n.getStringValue(); }, "version": n => { managedAppOperation.version = n.getStringValue(); } });
}

function deserializeIntoManagedAppPolicy(managedAppPolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(managedAppPolicy)), { "createdDateTime": n => { managedAppPolicy.createdDateTime = n.getDateValue(); }, "description": n => { managedAppPolicy.description = n.getStringValue(); }, "displayName": n => { managedAppPolicy.displayName = n.getStringValue(); }, "lastModifiedDateTime": n => { managedAppPolicy.lastModifiedDateTime = n.getDateValue(); }, "roleScopeTagIds": n => { managedAppPolicy.roleScopeTagIds = n.getCollectionOfPrimitiveValues(); }, "version": n => { managedAppPolicy.version = n.getStringValue(); } });
}

function deserializeIntoMobileAppIdentifier(mobileAppIdentifier = {}) {
    return {};
}

var ManagedAppFlaggedReason;
(function (ManagedAppFlaggedReason) {
    /** No issue. */
    ManagedAppFlaggedReason["None"] = "none";
    /** The app registration is running on a rooted/unlocked device. */
    ManagedAppFlaggedReason["RootedDevice"] = "rootedDevice";
    /** The app registration is running on an Android device on which the bootloader is unlocked. */
    ManagedAppFlaggedReason["AndroidBootloaderUnlocked"] = "androidBootloaderUnlocked";
    /** The app registration is running on an Android device on which the factory ROM has been modified. */
    ManagedAppFlaggedReason["AndroidFactoryRomModified"] = "androidFactoryRomModified";
})(ManagedAppFlaggedReason || (ManagedAppFlaggedReason = {}));

function deserializeIntoManagedAppRegistration(managedAppRegistration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(managedAppRegistration)), { "appIdentifier": n => { managedAppRegistration.appIdentifier = n.getObject(deserializeIntoMobileAppIdentifier); }, "applicationVersion": n => { managedAppRegistration.applicationVersion = n.getStringValue(); }, "appliedPolicies": n => { managedAppRegistration.appliedPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedAppPolicy); }, "azureADDeviceId": n => { managedAppRegistration.azureADDeviceId = n.getStringValue(); }, "createdDateTime": n => { managedAppRegistration.createdDateTime = n.getDateValue(); }, "deviceManufacturer": n => { managedAppRegistration.deviceManufacturer = n.getStringValue(); }, "deviceModel": n => { managedAppRegistration.deviceModel = n.getStringValue(); }, "deviceName": n => { managedAppRegistration.deviceName = n.getStringValue(); }, "deviceTag": n => { managedAppRegistration.deviceTag = n.getStringValue(); }, "deviceType": n => { managedAppRegistration.deviceType = n.getStringValue(); }, "flaggedReasons": n => { managedAppRegistration.flaggedReasons = n.getEnumValues(ManagedAppFlaggedReason); }, "intendedPolicies": n => { managedAppRegistration.intendedPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedAppPolicy); }, "lastSyncDateTime": n => { managedAppRegistration.lastSyncDateTime = n.getDateValue(); }, "managedDeviceId": n => { managedAppRegistration.managedDeviceId = n.getStringValue(); }, "managementSdkVersion": n => { managedAppRegistration.managementSdkVersion = n.getStringValue(); }, "operations": n => { managedAppRegistration.operations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedAppOperation); }, "platformVersion": n => { managedAppRegistration.platformVersion = n.getStringValue(); }, "userId": n => { managedAppRegistration.userId = n.getStringValue(); }, "version": n => { managedAppRegistration.version = n.getStringValue(); } });
}

var ChassisType;
(function (ChassisType) {
    /** Unknown. */
    ChassisType["Unknown"] = "unknown";
    /** Desktop. */
    ChassisType["Desktop"] = "desktop";
    /** Laptop. */
    ChassisType["Laptop"] = "laptop";
    /** Workstation. */
    ChassisType["WorksWorkstation"] = "worksWorkstation";
    /** Enterprise server. */
    ChassisType["EnterpriseServer"] = "enterpriseServer";
    /** Phone. */
    ChassisType["Phone"] = "phone";
    /** Mobile tablet. */
    ChassisType["Tablet"] = "tablet";
    /** Other mobile. */
    ChassisType["MobileOther"] = "mobileOther";
    /** Unknown mobile. */
    ChassisType["MobileUnknown"] = "mobileUnknown";
})(ChassisType || (ChassisType = {}));

var ComplianceState;
(function (ComplianceState) {
    /** Unknown. */
    ComplianceState["Unknown"] = "unknown";
    /** Compliant. */
    ComplianceState["Compliant"] = "compliant";
    /** Device is non-compliant and is blocked from corporate resources. */
    ComplianceState["Noncompliant"] = "noncompliant";
    /** Conflict with other rules. */
    ComplianceState["Conflict"] = "conflict";
    /** Error. */
    ComplianceState["Error_escaped"] = "error";
    /** Device is non-compliant but still has access to corporate resources */
    ComplianceState["InGracePeriod"] = "inGracePeriod";
    /** Managed by Config Manager */
    ComplianceState["ConfigManager"] = "configManager";
})(ComplianceState || (ComplianceState = {}));

function deserializeIntoAssignmentFilterEvaluationStatusDetails(assignmentFilterEvaluationStatusDetails = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(assignmentFilterEvaluationStatusDetails)), { "payloadId": n => { assignmentFilterEvaluationStatusDetails.payloadId = n.getStringValue(); } });
}

function deserializeIntoChromeOSDeviceProperty(chromeOSDeviceProperty = {}) {
    return {
        "name": n => { chromeOSDeviceProperty.name = n.getStringValue(); },
        "updatable": n => { chromeOSDeviceProperty.updatable = n.getBooleanValue(); },
        "value": n => { chromeOSDeviceProperty.value = n.getStringValue(); },
        "valueType": n => { chromeOSDeviceProperty.valueType = n.getStringValue(); },
    };
}

function deserializeIntoConfigurationManagerClientEnabledFeatures(configurationManagerClientEnabledFeatures = {}) {
    return {
        "compliancePolicy": n => { configurationManagerClientEnabledFeatures.compliancePolicy = n.getBooleanValue(); },
        "deviceConfiguration": n => { configurationManagerClientEnabledFeatures.deviceConfiguration = n.getBooleanValue(); },
        "endpointProtection": n => { configurationManagerClientEnabledFeatures.endpointProtection = n.getBooleanValue(); },
        "inventory": n => { configurationManagerClientEnabledFeatures.inventory = n.getBooleanValue(); },
        "modernApps": n => { configurationManagerClientEnabledFeatures.modernApps = n.getBooleanValue(); },
        "officeApps": n => { configurationManagerClientEnabledFeatures.officeApps = n.getBooleanValue(); },
        "resourceAccess": n => { configurationManagerClientEnabledFeatures.resourceAccess = n.getBooleanValue(); },
        "windowsUpdateForBusiness": n => { configurationManagerClientEnabledFeatures.windowsUpdateForBusiness = n.getBooleanValue(); },
    };
}

var ConfigurationManagerClientState;
(function (ConfigurationManagerClientState) {
    /** Configuration manager agent is older than 1806 or not installed or this device has not checked into Intune for over 30 days. */
    ConfigurationManagerClientState["Unknown"] = "unknown";
    /** The configuration manager agent is installed but may not be showing up in the configuration manager console yet. Wait a few hours for it to refresh. */
    ConfigurationManagerClientState["Installed"] = "installed";
    /** This device was able to check in with the configuration manager service successfully. */
    ConfigurationManagerClientState["Healthy"] = "healthy";
    /** The configuration manager agent failed to install. */
    ConfigurationManagerClientState["InstallFailed"] = "installFailed";
    /** The update from version x to version y of the configuration manager agent failed.  */
    ConfigurationManagerClientState["UpdateFailed"] = "updateFailed";
    /** The configuration manager agent was able to reach the configuration manager service in the past but is now no longer able to.  */
    ConfigurationManagerClientState["CommunicationError"] = "communicationError";
})(ConfigurationManagerClientState || (ConfigurationManagerClientState = {}));

function deserializeIntoConfigurationManagerClientHealthState(configurationManagerClientHealthState = {}) {
    return {
        "errorCode": n => { configurationManagerClientHealthState.errorCode = n.getNumberValue(); },
        "lastSyncDateTime": n => { configurationManagerClientHealthState.lastSyncDateTime = n.getDateValue(); },
        "state": n => { configurationManagerClientHealthState.state = n.getEnumValue(ConfigurationManagerClientState); },
    };
}

function deserializeIntoConfigurationManagerClientInformation(configurationManagerClientInformation = {}) {
    return {
        "clientIdentifier": n => { configurationManagerClientInformation.clientIdentifier = n.getStringValue(); },
        "clientVersion": n => { configurationManagerClientInformation.clientVersion = n.getStringValue(); },
        "isBlocked": n => { configurationManagerClientInformation.isBlocked = n.getBooleanValue(); },
    };
}

var DetectedAppPlatformType;
(function (DetectedAppPlatformType) {
    /** Default. Set to unknown when platform cannot be determined. */
    DetectedAppPlatformType["Unknown"] = "unknown";
    /** Indicates that the platform of the detected application is Windows. */
    DetectedAppPlatformType["Windows"] = "windows";
    /** Indicates that the platform of the detected application is Windows Mobile. */
    DetectedAppPlatformType["WindowsMobile"] = "windowsMobile";
    /** Indicates that the platform of the detected application is Windows Holographic. */
    DetectedAppPlatformType["WindowsHolographic"] = "windowsHolographic";
    /** Indicates that the platform of the detected application is iOS. */
    DetectedAppPlatformType["Ios"] = "ios";
    /** Indicates that the platform of the detected application is macOS. */
    DetectedAppPlatformType["MacOS"] = "macOS";
    /** Indicates that the platform of the detected application is ChromeOS. */
    DetectedAppPlatformType["ChromeOS"] = "chromeOS";
    /** Indicates that the platform of the detected application is Android open source project. */
    DetectedAppPlatformType["AndroidOSP"] = "androidOSP";
    /** Indicates that the platform of the detected application is Android device administrator. */
    DetectedAppPlatformType["AndroidDeviceAdministrator"] = "androidDeviceAdministrator";
    /** Indicates that the platform of the detected application is Android work profile. */
    DetectedAppPlatformType["AndroidWorkProfile"] = "androidWorkProfile";
    /** Indicates that the platform of the detected application is Android dedicated and fully managed. */
    DetectedAppPlatformType["AndroidDedicatedAndFullyManaged"] = "androidDedicatedAndFullyManaged";
    /** Evolvable enumeration sentinel value. Do not use. */
    DetectedAppPlatformType["UnknownFutureValue"] = "unknownFutureValue";
})(DetectedAppPlatformType || (DetectedAppPlatformType = {}));

function deserializeIntoDetectedApp(detectedApp = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(detectedApp)), { "deviceCount": n => { detectedApp.deviceCount = n.getNumberValue(); }, "displayName": n => { detectedApp.displayName = n.getStringValue(); }, "managedDevices": n => { detectedApp.managedDevices = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedDevice); }, "platform": n => { detectedApp.platform = n.getEnumValue(DetectedAppPlatformType); }, "publisher": n => { detectedApp.publisher = n.getStringValue(); }, "sizeInByte": n => { detectedApp.sizeInByte = n.getNumberValue(); }, "version": n => { detectedApp.version = n.getStringValue(); } });
}

function deserializeIntoDeviceActionResult(deviceActionResult = {}) {
    return {
        "actionName": n => { deviceActionResult.actionName = n.getStringValue(); },
        "actionState": n => { deviceActionResult.actionState = n.getEnumValue(ActionState); },
        "lastUpdatedDateTime": n => { deviceActionResult.lastUpdatedDateTime = n.getDateValue(); },
        "startDateTime": n => { deviceActionResult.startDateTime = n.getDateValue(); },
    };
}

function deserializeIntoDeviceCategory(deviceCategory = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceCategory)), { "description": n => { deviceCategory.description = n.getStringValue(); }, "displayName": n => { deviceCategory.displayName = n.getStringValue(); }, "roleScopeTagIds": n => { deviceCategory.roleScopeTagIds = n.getCollectionOfPrimitiveValues(); } });
}

var ComplianceStatus;
(function (ComplianceStatus) {
    ComplianceStatus["Unknown"] = "unknown";
    ComplianceStatus["NotApplicable"] = "notApplicable";
    ComplianceStatus["Compliant"] = "compliant";
    ComplianceStatus["Remediated"] = "remediated";
    ComplianceStatus["NonCompliant"] = "nonCompliant";
    ComplianceStatus["Error_escaped"] = "error";
    ComplianceStatus["Conflict"] = "conflict";
    ComplianceStatus["NotAssigned"] = "notAssigned";
})(ComplianceStatus || (ComplianceStatus = {}));

var SettingSourceType;
(function (SettingSourceType) {
    SettingSourceType["DeviceConfiguration"] = "deviceConfiguration";
    SettingSourceType["DeviceIntent"] = "deviceIntent";
})(SettingSourceType || (SettingSourceType = {}));

function deserializeIntoSettingSource(settingSource = {}) {
    return {
        "displayName": n => { settingSource.displayName = n.getStringValue(); },
        "id": n => { settingSource.id = n.getStringValue(); },
        "sourceType": n => { settingSource.sourceType = n.getEnumValue(SettingSourceType); },
    };
}

function deserializeIntoDeviceCompliancePolicySettingState(deviceCompliancePolicySettingState = {}) {
    return {
        "currentValue": n => { deviceCompliancePolicySettingState.currentValue = n.getStringValue(); },
        "errorCode": n => { deviceCompliancePolicySettingState.errorCode = n.getNumberValue(); },
        "errorDescription": n => { deviceCompliancePolicySettingState.errorDescription = n.getStringValue(); },
        "instanceDisplayName": n => { deviceCompliancePolicySettingState.instanceDisplayName = n.getStringValue(); },
        "setting": n => { deviceCompliancePolicySettingState.setting = n.getStringValue(); },
        "settingInstanceId": n => { deviceCompliancePolicySettingState.settingInstanceId = n.getStringValue(); },
        "settingName": n => { deviceCompliancePolicySettingState.settingName = n.getStringValue(); },
        "sources": n => { deviceCompliancePolicySettingState.sources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSettingSource); },
        "state": n => { deviceCompliancePolicySettingState.state = n.getEnumValue(ComplianceStatus); },
        "userEmail": n => { deviceCompliancePolicySettingState.userEmail = n.getStringValue(); },
        "userId": n => { deviceCompliancePolicySettingState.userId = n.getStringValue(); },
        "userName": n => { deviceCompliancePolicySettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceCompliancePolicySettingState.userPrincipalName = n.getStringValue(); },
    };
}

var PolicyPlatformType;
(function (PolicyPlatformType) {
    /** Android. */
    PolicyPlatformType["Android"] = "android";
    /** AndroidForWork. */
    PolicyPlatformType["AndroidForWork"] = "androidForWork";
    /** iOS. */
    PolicyPlatformType["IOS"] = "iOS";
    /** MacOS. */
    PolicyPlatformType["MacOS"] = "macOS";
    /** WindowsPhone 8.1. */
    PolicyPlatformType["WindowsPhone81"] = "windowsPhone81";
    /** Windows 8.1 and later */
    PolicyPlatformType["Windows81AndLater"] = "windows81AndLater";
    /** Windows 10 and later. */
    PolicyPlatformType["Windows10AndLater"] = "windows10AndLater";
    /** AndroidWorkProfile. */
    PolicyPlatformType["AndroidWorkProfile"] = "androidWorkProfile";
    /** Windows10XProfile. */
    PolicyPlatformType["Windows10XProfile"] = "windows10XProfile";
    /** AndroidAOSPProfile. */
    PolicyPlatformType["AndroidAOSP"] = "androidAOSP";
    /** All platforms. */
    PolicyPlatformType["All"] = "all";
})(PolicyPlatformType || (PolicyPlatformType = {}));

function deserializeIntoDeviceCompliancePolicyState(deviceCompliancePolicyState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceCompliancePolicyState)), { "displayName": n => { deviceCompliancePolicyState.displayName = n.getStringValue(); }, "platformType": n => { deviceCompliancePolicyState.platformType = n.getEnumValue(PolicyPlatformType); }, "settingCount": n => { deviceCompliancePolicyState.settingCount = n.getNumberValue(); }, "settingStates": n => { deviceCompliancePolicyState.settingStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceCompliancePolicySettingState); }, "state": n => { deviceCompliancePolicyState.state = n.getEnumValue(ComplianceStatus); }, "userId": n => { deviceCompliancePolicyState.userId = n.getStringValue(); }, "userPrincipalName": n => { deviceCompliancePolicyState.userPrincipalName = n.getStringValue(); }, "version": n => { deviceCompliancePolicyState.version = n.getNumberValue(); } });
}

function deserializeIntoDeviceConfigurationSettingState(deviceConfigurationSettingState = {}) {
    return {
        "currentValue": n => { deviceConfigurationSettingState.currentValue = n.getStringValue(); },
        "errorCode": n => { deviceConfigurationSettingState.errorCode = n.getNumberValue(); },
        "errorDescription": n => { deviceConfigurationSettingState.errorDescription = n.getStringValue(); },
        "instanceDisplayName": n => { deviceConfigurationSettingState.instanceDisplayName = n.getStringValue(); },
        "setting": n => { deviceConfigurationSettingState.setting = n.getStringValue(); },
        "settingInstanceId": n => { deviceConfigurationSettingState.settingInstanceId = n.getStringValue(); },
        "settingName": n => { deviceConfigurationSettingState.settingName = n.getStringValue(); },
        "sources": n => { deviceConfigurationSettingState.sources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSettingSource); },
        "state": n => { deviceConfigurationSettingState.state = n.getEnumValue(ComplianceStatus); },
        "userEmail": n => { deviceConfigurationSettingState.userEmail = n.getStringValue(); },
        "userId": n => { deviceConfigurationSettingState.userId = n.getStringValue(); },
        "userName": n => { deviceConfigurationSettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceConfigurationSettingState.userPrincipalName = n.getStringValue(); },
    };
}

function deserializeIntoDeviceConfigurationState(deviceConfigurationState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceConfigurationState)), { "displayName": n => { deviceConfigurationState.displayName = n.getStringValue(); }, "platformType": n => { deviceConfigurationState.platformType = n.getEnumValue(PolicyPlatformType); }, "settingCount": n => { deviceConfigurationState.settingCount = n.getNumberValue(); }, "settingStates": n => { deviceConfigurationState.settingStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceConfigurationSettingState); }, "state": n => { deviceConfigurationState.state = n.getEnumValue(ComplianceStatus); }, "userId": n => { deviceConfigurationState.userId = n.getStringValue(); }, "userPrincipalName": n => { deviceConfigurationState.userPrincipalName = n.getStringValue(); }, "version": n => { deviceConfigurationState.version = n.getNumberValue(); } });
}

function deserializeIntoDeviceHealthAttestationState(deviceHealthAttestationState = {}) {
    return {
        "attestationIdentityKey": n => { deviceHealthAttestationState.attestationIdentityKey = n.getStringValue(); },
        "bitLockerStatus": n => { deviceHealthAttestationState.bitLockerStatus = n.getStringValue(); },
        "bootAppSecurityVersion": n => { deviceHealthAttestationState.bootAppSecurityVersion = n.getStringValue(); },
        "bootDebugging": n => { deviceHealthAttestationState.bootDebugging = n.getStringValue(); },
        "bootManagerSecurityVersion": n => { deviceHealthAttestationState.bootManagerSecurityVersion = n.getStringValue(); },
        "bootManagerVersion": n => { deviceHealthAttestationState.bootManagerVersion = n.getStringValue(); },
        "bootRevisionListInfo": n => { deviceHealthAttestationState.bootRevisionListInfo = n.getStringValue(); },
        "codeIntegrity": n => { deviceHealthAttestationState.codeIntegrity = n.getStringValue(); },
        "codeIntegrityCheckVersion": n => { deviceHealthAttestationState.codeIntegrityCheckVersion = n.getStringValue(); },
        "codeIntegrityPolicy": n => { deviceHealthAttestationState.codeIntegrityPolicy = n.getStringValue(); },
        "contentNamespaceUrl": n => { deviceHealthAttestationState.contentNamespaceUrl = n.getStringValue(); },
        "contentVersion": n => { deviceHealthAttestationState.contentVersion = n.getStringValue(); },
        "dataExcutionPolicy": n => { deviceHealthAttestationState.dataExcutionPolicy = n.getStringValue(); },
        "deviceHealthAttestationStatus": n => { deviceHealthAttestationState.deviceHealthAttestationStatus = n.getStringValue(); },
        "earlyLaunchAntiMalwareDriverProtection": n => { deviceHealthAttestationState.earlyLaunchAntiMalwareDriverProtection = n.getStringValue(); },
        "healthAttestationSupportedStatus": n => { deviceHealthAttestationState.healthAttestationSupportedStatus = n.getStringValue(); },
        "healthStatusMismatchInfo": n => { deviceHealthAttestationState.healthStatusMismatchInfo = n.getStringValue(); },
        "issuedDateTime": n => { deviceHealthAttestationState.issuedDateTime = n.getDateValue(); },
        "lastUpdateDateTime": n => { deviceHealthAttestationState.lastUpdateDateTime = n.getStringValue(); },
        "operatingSystemKernelDebugging": n => { deviceHealthAttestationState.operatingSystemKernelDebugging = n.getStringValue(); },
        "operatingSystemRevListInfo": n => { deviceHealthAttestationState.operatingSystemRevListInfo = n.getStringValue(); },
        "pcr0": n => { deviceHealthAttestationState.pcr0 = n.getStringValue(); },
        "pcrHashAlgorithm": n => { deviceHealthAttestationState.pcrHashAlgorithm = n.getStringValue(); },
        "resetCount": n => { deviceHealthAttestationState.resetCount = n.getNumberValue(); },
        "restartCount": n => { deviceHealthAttestationState.restartCount = n.getNumberValue(); },
        "safeMode": n => { deviceHealthAttestationState.safeMode = n.getStringValue(); },
        "secureBoot": n => { deviceHealthAttestationState.secureBoot = n.getStringValue(); },
        "secureBootConfigurationPolicyFingerPrint": n => { deviceHealthAttestationState.secureBootConfigurationPolicyFingerPrint = n.getStringValue(); },
        "testSigning": n => { deviceHealthAttestationState.testSigning = n.getStringValue(); },
        "tpmVersion": n => { deviceHealthAttestationState.tpmVersion = n.getStringValue(); },
        "virtualSecureMode": n => { deviceHealthAttestationState.virtualSecureMode = n.getStringValue(); },
        "windowsPE": n => { deviceHealthAttestationState.windowsPE = n.getStringValue(); },
    };
}

function deserializeIntoDeviceLogCollectionResponse(deviceLogCollectionResponse = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(deviceLogCollectionResponse)), { "enrolledByUser": n => { deviceLogCollectionResponse.enrolledByUser = n.getStringValue(); }, "errorCode": n => { deviceLogCollectionResponse.errorCode = n.getNumberValue(); }, "expirationDateTimeUTC": n => { deviceLogCollectionResponse.expirationDateTimeUTC = n.getDateValue(); }, "initiatedByUserPrincipalName": n => { deviceLogCollectionResponse.initiatedByUserPrincipalName = n.getStringValue(); }, "managedDeviceId": n => { deviceLogCollectionResponse.managedDeviceId = n.getStringValue(); }, "receivedDateTimeUTC": n => { deviceLogCollectionResponse.receivedDateTimeUTC = n.getDateValue(); }, "requestedDateTimeUTC": n => { deviceLogCollectionResponse.requestedDateTimeUTC = n.getDateValue(); }, "size": n => { deviceLogCollectionResponse.size = n.getNumberValue(); }, "status": n => { deviceLogCollectionResponse.status = n.getStringValue(); } });
}

function deserializeIntoSharedAppleDeviceUser(sharedAppleDeviceUser = {}) {
    return {
        "dataQuota": n => { sharedAppleDeviceUser.dataQuota = n.getNumberValue(); },
        "dataToSync": n => { sharedAppleDeviceUser.dataToSync = n.getBooleanValue(); },
        "dataUsed": n => { sharedAppleDeviceUser.dataUsed = n.getNumberValue(); },
        "userPrincipalName": n => { sharedAppleDeviceUser.userPrincipalName = n.getStringValue(); },
    };
}

var DeviceGuardLocalSystemAuthorityCredentialGuardState;
(function (DeviceGuardLocalSystemAuthorityCredentialGuardState) {
    /** Running */
    DeviceGuardLocalSystemAuthorityCredentialGuardState["Running"] = "running";
    /** Reboot required */
    DeviceGuardLocalSystemAuthorityCredentialGuardState["RebootRequired"] = "rebootRequired";
    /** Not licensed for Credential Guard */
    DeviceGuardLocalSystemAuthorityCredentialGuardState["NotLicensed"] = "notLicensed";
    /** Not configured */
    DeviceGuardLocalSystemAuthorityCredentialGuardState["NotConfigured"] = "notConfigured";
    /** Virtualization Based security is not running */
    DeviceGuardLocalSystemAuthorityCredentialGuardState["VirtualizationBasedSecurityNotRunning"] = "virtualizationBasedSecurityNotRunning";
})(DeviceGuardLocalSystemAuthorityCredentialGuardState || (DeviceGuardLocalSystemAuthorityCredentialGuardState = {}));

var DeviceGuardVirtualizationBasedSecurityHardwareRequirementState;
(function (DeviceGuardVirtualizationBasedSecurityHardwareRequirementState) {
    /** System meets hardware configuration requirements */
    DeviceGuardVirtualizationBasedSecurityHardwareRequirementState["MeetHardwareRequirements"] = "meetHardwareRequirements";
    /** Secure boot required */
    DeviceGuardVirtualizationBasedSecurityHardwareRequirementState["SecureBootRequired"] = "secureBootRequired";
    /** DMA protection required */
    DeviceGuardVirtualizationBasedSecurityHardwareRequirementState["DmaProtectionRequired"] = "dmaProtectionRequired";
    /** HyperV not supported for Guest VM */
    DeviceGuardVirtualizationBasedSecurityHardwareRequirementState["HyperVNotSupportedForGuestVM"] = "hyperVNotSupportedForGuestVM";
    /** HyperV feature is not available */
    DeviceGuardVirtualizationBasedSecurityHardwareRequirementState["HyperVNotAvailable"] = "hyperVNotAvailable";
})(DeviceGuardVirtualizationBasedSecurityHardwareRequirementState || (DeviceGuardVirtualizationBasedSecurityHardwareRequirementState = {}));

var DeviceGuardVirtualizationBasedSecurityState;
(function (DeviceGuardVirtualizationBasedSecurityState) {
    /** Running */
    DeviceGuardVirtualizationBasedSecurityState["Running"] = "running";
    /** Root required */
    DeviceGuardVirtualizationBasedSecurityState["RebootRequired"] = "rebootRequired";
    /** 64 bit architecture required */
    DeviceGuardVirtualizationBasedSecurityState["Require64BitArchitecture"] = "require64BitArchitecture";
    /** Not licensed */
    DeviceGuardVirtualizationBasedSecurityState["NotLicensed"] = "notLicensed";
    /** Not configured */
    DeviceGuardVirtualizationBasedSecurityState["NotConfigured"] = "notConfigured";
    /** System does not meet hardware requirements */
    DeviceGuardVirtualizationBasedSecurityState["DoesNotMeetHardwareRequirements"] = "doesNotMeetHardwareRequirements";
    /** Other. Event logs in microsoft-Windows-DeviceGuard have more details. */
    DeviceGuardVirtualizationBasedSecurityState["Other"] = "other";
})(DeviceGuardVirtualizationBasedSecurityState || (DeviceGuardVirtualizationBasedSecurityState = {}));

var DeviceLicensingStatus;
(function (DeviceLicensingStatus) {
    /** Default. Set to unknown when status cannot be determined. */
    DeviceLicensingStatus["Unknown"] = "unknown";
    /** This status is set when the license refresh is started. */
    DeviceLicensingStatus["LicenseRefreshStarted"] = "licenseRefreshStarted";
    /** This status is set when the license refresh is pending. */
    DeviceLicensingStatus["LicenseRefreshPending"] = "licenseRefreshPending";
    /** This status is set when the device is not joined to Azure Active Directory. */
    DeviceLicensingStatus["DeviceIsNotAzureActiveDirectoryJoined"] = "deviceIsNotAzureActiveDirectoryJoined";
    /** This status is set when the Microsoft device identity is being verified. */
    DeviceLicensingStatus["VerifyingMicrosoftDeviceIdentity"] = "verifyingMicrosoftDeviceIdentity";
    /** This status is set when the Microsoft device identity verification fails. */
    DeviceLicensingStatus["DeviceIdentityVerificationFailed"] = "deviceIdentityVerificationFailed";
    /** This status is set when the Microsoft account identity is being verified. */
    DeviceLicensingStatus["VerifyingMirosoftAccountIdentity"] = "verifyingMirosoftAccountIdentity";
    /** This status is set when the Microsoft account identity verification fails. */
    DeviceLicensingStatus["MirosoftAccountVerificationFailed"] = "mirosoftAccountVerificationFailed";
    /** This status is set when the device license is being acquired. */
    DeviceLicensingStatus["AcquiringDeviceLicense"] = "acquiringDeviceLicense";
    /** This status is set when the device license is being refreshed. */
    DeviceLicensingStatus["RefreshingDeviceLicense"] = "refreshingDeviceLicense";
    /** This status is set when the device license refresh succeeds. */
    DeviceLicensingStatus["DeviceLicenseRefreshSucceed"] = "deviceLicenseRefreshSucceed";
    /** This status is set when the device license refresh fails. */
    DeviceLicensingStatus["DeviceLicenseRefreshFailed"] = "deviceLicenseRefreshFailed";
    /** This status is set when the device license is being removed. */
    DeviceLicensingStatus["RemovingDeviceLicense"] = "removingDeviceLicense";
    /** This status is set when the device license removing succeeds. */
    DeviceLicensingStatus["DeviceLicenseRemoveSucceed"] = "deviceLicenseRemoveSucceed";
    /** This status is set when the device license removing fails. */
    DeviceLicensingStatus["DeviceLicenseRemoveFailed"] = "deviceLicenseRemoveFailed";
    /** This is put here as a place holder for future extension. */
    DeviceLicensingStatus["UnknownFutureValue"] = "unknownFutureValue";
})(DeviceLicensingStatus || (DeviceLicensingStatus = {}));

function deserializeIntoHardwareInformation(hardwareInformation = {}) {
    return {
        "batteryChargeCycles": n => { hardwareInformation.batteryChargeCycles = n.getNumberValue(); },
        "batteryHealthPercentage": n => { hardwareInformation.batteryHealthPercentage = n.getNumberValue(); },
        "batteryLevelPercentage": n => { hardwareInformation.batteryLevelPercentage = n.getNumberValue(); },
        "batterySerialNumber": n => { hardwareInformation.batterySerialNumber = n.getStringValue(); },
        "cellularTechnology": n => { hardwareInformation.cellularTechnology = n.getStringValue(); },
        "deviceFullQualifiedDomainName": n => { hardwareInformation.deviceFullQualifiedDomainName = n.getStringValue(); },
        "deviceGuardLocalSystemAuthorityCredentialGuardState": n => { hardwareInformation.deviceGuardLocalSystemAuthorityCredentialGuardState = n.getEnumValue(DeviceGuardLocalSystemAuthorityCredentialGuardState); },
        "deviceGuardVirtualizationBasedSecurityHardwareRequirementState": n => { hardwareInformation.deviceGuardVirtualizationBasedSecurityHardwareRequirementState = n.getEnumValue(DeviceGuardVirtualizationBasedSecurityHardwareRequirementState); },
        "deviceGuardVirtualizationBasedSecurityState": n => { hardwareInformation.deviceGuardVirtualizationBasedSecurityState = n.getEnumValue(DeviceGuardVirtualizationBasedSecurityState); },
        "deviceLicensingLastErrorCode": n => { hardwareInformation.deviceLicensingLastErrorCode = n.getNumberValue(); },
        "deviceLicensingLastErrorDescription": n => { hardwareInformation.deviceLicensingLastErrorDescription = n.getStringValue(); },
        "deviceLicensingStatus": n => { hardwareInformation.deviceLicensingStatus = n.getEnumValue(DeviceLicensingStatus); },
        "esimIdentifier": n => { hardwareInformation.esimIdentifier = n.getStringValue(); },
        "freeStorageSpace": n => { hardwareInformation.freeStorageSpace = n.getNumberValue(); },
        "imei": n => { hardwareInformation.imei = n.getStringValue(); },
        "ipAddressV4": n => { hardwareInformation.ipAddressV4 = n.getStringValue(); },
        "isEncrypted": n => { hardwareInformation.isEncrypted = n.getBooleanValue(); },
        "isSharedDevice": n => { hardwareInformation.isSharedDevice = n.getBooleanValue(); },
        "isSupervised": n => { hardwareInformation.isSupervised = n.getBooleanValue(); },
        "manufacturer": n => { hardwareInformation.manufacturer = n.getStringValue(); },
        "meid": n => { hardwareInformation.meid = n.getStringValue(); },
        "model": n => { hardwareInformation.model = n.getStringValue(); },
        "operatingSystemEdition": n => { hardwareInformation.operatingSystemEdition = n.getStringValue(); },
        "operatingSystemLanguage": n => { hardwareInformation.operatingSystemLanguage = n.getStringValue(); },
        "operatingSystemProductType": n => { hardwareInformation.operatingSystemProductType = n.getNumberValue(); },
        "osBuildNumber": n => { hardwareInformation.osBuildNumber = n.getStringValue(); },
        "phoneNumber": n => { hardwareInformation.phoneNumber = n.getStringValue(); },
        "productName": n => { hardwareInformation.productName = n.getStringValue(); },
        "residentUsersCount": n => { hardwareInformation.residentUsersCount = n.getNumberValue(); },
        "serialNumber": n => { hardwareInformation.serialNumber = n.getStringValue(); },
        "sharedDeviceCachedUsers": n => { hardwareInformation.sharedDeviceCachedUsers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSharedAppleDeviceUser); },
        "subnetAddress": n => { hardwareInformation.subnetAddress = n.getStringValue(); },
        "subscriberCarrier": n => { hardwareInformation.subscriberCarrier = n.getStringValue(); },
        "systemManagementBIOSVersion": n => { hardwareInformation.systemManagementBIOSVersion = n.getStringValue(); },
        "totalStorageSpace": n => { hardwareInformation.totalStorageSpace = n.getNumberValue(); },
        "tpmManufacturer": n => { hardwareInformation.tpmManufacturer = n.getStringValue(); },
        "tpmSpecificationVersion": n => { hardwareInformation.tpmSpecificationVersion = n.getStringValue(); },
        "tpmVersion": n => { hardwareInformation.tpmVersion = n.getStringValue(); },
        "wifiMac": n => { hardwareInformation.wifiMac = n.getStringValue(); },
        "wiredIPv4Addresses": n => { hardwareInformation.wiredIPv4Addresses = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoLoggedOnUser(loggedOnUser = {}) {
    return {
        "lastLogOnDateTime": n => { loggedOnUser.lastLogOnDateTime = n.getDateValue(); },
        "userId": n => { loggedOnUser.userId = n.getStringValue(); },
    };
}

function deserializeIntoManagedDeviceMobileAppConfigurationSettingState(managedDeviceMobileAppConfigurationSettingState = {}) {
    return {
        "currentValue": n => { managedDeviceMobileAppConfigurationSettingState.currentValue = n.getStringValue(); },
        "errorCode": n => { managedDeviceMobileAppConfigurationSettingState.errorCode = n.getNumberValue(); },
        "errorDescription": n => { managedDeviceMobileAppConfigurationSettingState.errorDescription = n.getStringValue(); },
        "instanceDisplayName": n => { managedDeviceMobileAppConfigurationSettingState.instanceDisplayName = n.getStringValue(); },
        "setting": n => { managedDeviceMobileAppConfigurationSettingState.setting = n.getStringValue(); },
        "settingInstanceId": n => { managedDeviceMobileAppConfigurationSettingState.settingInstanceId = n.getStringValue(); },
        "settingName": n => { managedDeviceMobileAppConfigurationSettingState.settingName = n.getStringValue(); },
        "sources": n => { managedDeviceMobileAppConfigurationSettingState.sources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSettingSource); },
        "state": n => { managedDeviceMobileAppConfigurationSettingState.state = n.getEnumValue(ComplianceStatus); },
        "userEmail": n => { managedDeviceMobileAppConfigurationSettingState.userEmail = n.getStringValue(); },
        "userId": n => { managedDeviceMobileAppConfigurationSettingState.userId = n.getStringValue(); },
        "userName": n => { managedDeviceMobileAppConfigurationSettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { managedDeviceMobileAppConfigurationSettingState.userPrincipalName = n.getStringValue(); },
    };
}

function deserializeIntoManagedDeviceMobileAppConfigurationState(managedDeviceMobileAppConfigurationState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(managedDeviceMobileAppConfigurationState)), { "displayName": n => { managedDeviceMobileAppConfigurationState.displayName = n.getStringValue(); }, "platformType": n => { managedDeviceMobileAppConfigurationState.platformType = n.getEnumValue(PolicyPlatformType); }, "settingCount": n => { managedDeviceMobileAppConfigurationState.settingCount = n.getNumberValue(); }, "settingStates": n => { managedDeviceMobileAppConfigurationState.settingStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedDeviceMobileAppConfigurationSettingState); }, "state": n => { managedDeviceMobileAppConfigurationState.state = n.getEnumValue(ComplianceStatus); }, "userId": n => { managedDeviceMobileAppConfigurationState.userId = n.getStringValue(); }, "userPrincipalName": n => { managedDeviceMobileAppConfigurationState.userPrincipalName = n.getStringValue(); }, "version": n => { managedDeviceMobileAppConfigurationState.version = n.getNumberValue(); } });
}

var SecurityBaselinePolicySourceType;
(function (SecurityBaselinePolicySourceType) {
    SecurityBaselinePolicySourceType["DeviceConfiguration"] = "deviceConfiguration";
    SecurityBaselinePolicySourceType["DeviceIntent"] = "deviceIntent";
})(SecurityBaselinePolicySourceType || (SecurityBaselinePolicySourceType = {}));

function deserializeIntoSecurityBaselineContributingPolicy(securityBaselineContributingPolicy = {}) {
    return {
        "displayName": n => { securityBaselineContributingPolicy.displayName = n.getStringValue(); },
        "sourceId": n => { securityBaselineContributingPolicy.sourceId = n.getStringValue(); },
        "sourceType": n => { securityBaselineContributingPolicy.sourceType = n.getEnumValue(SecurityBaselinePolicySourceType); },
    };
}

var SecurityBaselineComplianceState;
(function (SecurityBaselineComplianceState) {
    /** Unknown state */
    SecurityBaselineComplianceState["Unknown"] = "unknown";
    /** Secure state */
    SecurityBaselineComplianceState["Secure"] = "secure";
    /** Not applicable state */
    SecurityBaselineComplianceState["NotApplicable"] = "notApplicable";
    /** Not secure state */
    SecurityBaselineComplianceState["NotSecure"] = "notSecure";
    /** Error state */
    SecurityBaselineComplianceState["Error_escaped"] = "error";
    /** Conflict state */
    SecurityBaselineComplianceState["Conflict"] = "conflict";
})(SecurityBaselineComplianceState || (SecurityBaselineComplianceState = {}));

function deserializeIntoSecurityBaselineSettingState(securityBaselineSettingState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(securityBaselineSettingState)), { "contributingPolicies": n => { securityBaselineSettingState.contributingPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSecurityBaselineContributingPolicy); }, "errorCode": n => { securityBaselineSettingState.errorCode = n.getStringValue(); }, "settingCategoryId": n => { securityBaselineSettingState.settingCategoryId = n.getStringValue(); }, "settingCategoryName": n => { securityBaselineSettingState.settingCategoryName = n.getStringValue(); }, "settingId": n => { securityBaselineSettingState.settingId = n.getStringValue(); }, "settingName": n => { securityBaselineSettingState.settingName = n.getStringValue(); }, "sourcePolicies": n => { securityBaselineSettingState.sourcePolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSettingSource); }, "state": n => { securityBaselineSettingState.state = n.getEnumValue(SecurityBaselineComplianceState); } });
}

function deserializeIntoSecurityBaselineState(securityBaselineState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(securityBaselineState)), { "displayName": n => { securityBaselineState.displayName = n.getStringValue(); }, "securityBaselineTemplateId": n => { securityBaselineState.securityBaselineTemplateId = n.getStringValue(); }, "settingStates": n => { securityBaselineState.settingStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSecurityBaselineSettingState); }, "state": n => { securityBaselineState.state = n.getEnumValue(SecurityBaselineComplianceState); }, "userPrincipalName": n => { securityBaselineState.userPrincipalName = n.getStringValue(); } });
}

var WindowsMalwareCategory;
(function (WindowsMalwareCategory) {
    /** Invalid */
    WindowsMalwareCategory["Invalid"] = "invalid";
    /** Adware */
    WindowsMalwareCategory["Adware"] = "adware";
    /** Spyware */
    WindowsMalwareCategory["Spyware"] = "spyware";
    /** Password stealer */
    WindowsMalwareCategory["PasswordStealer"] = "passwordStealer";
    /** Trojan downloader */
    WindowsMalwareCategory["TrojanDownloader"] = "trojanDownloader";
    /** Worm */
    WindowsMalwareCategory["Worm"] = "worm";
    /** Backdoor */
    WindowsMalwareCategory["Backdoor"] = "backdoor";
    /** Remote access Trojan */
    WindowsMalwareCategory["RemoteAccessTrojan"] = "remoteAccessTrojan";
    /** Trojan */
    WindowsMalwareCategory["Trojan"] = "trojan";
    /** Email flooder */
    WindowsMalwareCategory["EmailFlooder"] = "emailFlooder";
    /** Keylogger */
    WindowsMalwareCategory["Keylogger"] = "keylogger";
    /** Dialer */
    WindowsMalwareCategory["Dialer"] = "dialer";
    /** Monitoring software */
    WindowsMalwareCategory["MonitoringSoftware"] = "monitoringSoftware";
    /** Browser modifier */
    WindowsMalwareCategory["BrowserModifier"] = "browserModifier";
    /** Cookie */
    WindowsMalwareCategory["Cookie"] = "cookie";
    /** Browser plugin */
    WindowsMalwareCategory["BrowserPlugin"] = "browserPlugin";
    /** AOL exploit */
    WindowsMalwareCategory["AolExploit"] = "aolExploit";
    /** Nuker */
    WindowsMalwareCategory["Nuker"] = "nuker";
    /** Security disabler */
    WindowsMalwareCategory["SecurityDisabler"] = "securityDisabler";
    /** Joke program */
    WindowsMalwareCategory["JokeProgram"] = "jokeProgram";
    /** Hostile ActiveX control */
    WindowsMalwareCategory["HostileActiveXControl"] = "hostileActiveXControl";
    /** Software bundler */
    WindowsMalwareCategory["SoftwareBundler"] = "softwareBundler";
    /** Stealth modifier */
    WindowsMalwareCategory["StealthNotifier"] = "stealthNotifier";
    /** Settings modifier */
    WindowsMalwareCategory["SettingsModifier"] = "settingsModifier";
    /** Toolbar */
    WindowsMalwareCategory["ToolBar"] = "toolBar";
    /** Remote control software */
    WindowsMalwareCategory["RemoteControlSoftware"] = "remoteControlSoftware";
    /** Trojan FTP */
    WindowsMalwareCategory["TrojanFtp"] = "trojanFtp";
    /** Potential unwanted software */
    WindowsMalwareCategory["PotentialUnwantedSoftware"] = "potentialUnwantedSoftware";
    /** ICQ exploit */
    WindowsMalwareCategory["IcqExploit"] = "icqExploit";
    /** Trojan telnet */
    WindowsMalwareCategory["TrojanTelnet"] = "trojanTelnet";
    /** Exploit */
    WindowsMalwareCategory["Exploit"] = "exploit";
    /** File sharing program */
    WindowsMalwareCategory["FilesharingProgram"] = "filesharingProgram";
    /** Malware creation tool */
    WindowsMalwareCategory["MalwareCreationTool"] = "malwareCreationTool";
    /** Remote control software */
    WindowsMalwareCategory["Remote_Control_Software"] = "remote_Control_Software";
    /** Tool */
    WindowsMalwareCategory["Tool"] = "tool";
    /** Trojan denial of service */
    WindowsMalwareCategory["TrojanDenialOfService"] = "trojanDenialOfService";
    /** Trojan dropper */
    WindowsMalwareCategory["TrojanDropper"] = "trojanDropper";
    /** Trojan mass mailer */
    WindowsMalwareCategory["TrojanMassMailer"] = "trojanMassMailer";
    /** Trojan monitoring software */
    WindowsMalwareCategory["TrojanMonitoringSoftware"] = "trojanMonitoringSoftware";
    /** Trojan proxy server */
    WindowsMalwareCategory["TrojanProxyServer"] = "trojanProxyServer";
    /** Virus */
    WindowsMalwareCategory["Virus"] = "virus";
    /** Known */
    WindowsMalwareCategory["Known"] = "known";
    /** Unknown */
    WindowsMalwareCategory["Unknown"] = "unknown";
    /** SPP */
    WindowsMalwareCategory["Spp"] = "spp";
    /** Behavior */
    WindowsMalwareCategory["Behavior"] = "behavior";
    /** Vulnerability */
    WindowsMalwareCategory["Vulnerability"] = "vulnerability";
    /** Policy */
    WindowsMalwareCategory["Policy"] = "policy";
    /** Enterprise Unwanted Software */
    WindowsMalwareCategory["EnterpriseUnwantedSoftware"] = "enterpriseUnwantedSoftware";
    /** Ransom */
    WindowsMalwareCategory["Ransom"] = "ransom";
    /** HIPS Rule */
    WindowsMalwareCategory["HipsRule"] = "hipsRule";
})(WindowsMalwareCategory || (WindowsMalwareCategory = {}));

var WindowsMalwareExecutionState;
(function (WindowsMalwareExecutionState) {
    /** Unknown */
    WindowsMalwareExecutionState["Unknown"] = "unknown";
    /** Blocked */
    WindowsMalwareExecutionState["Blocked"] = "blocked";
    /** Allowed */
    WindowsMalwareExecutionState["Allowed"] = "allowed";
    /** Running */
    WindowsMalwareExecutionState["Running"] = "running";
    /** Not running */
    WindowsMalwareExecutionState["NotRunning"] = "notRunning";
})(WindowsMalwareExecutionState || (WindowsMalwareExecutionState = {}));

var WindowsMalwareSeverity;
(function (WindowsMalwareSeverity) {
    /** Unknown */
    WindowsMalwareSeverity["Unknown"] = "unknown";
    /** Low */
    WindowsMalwareSeverity["Low"] = "low";
    /** Moderate */
    WindowsMalwareSeverity["Moderate"] = "moderate";
    /** High */
    WindowsMalwareSeverity["High"] = "high";
    /** Severe */
    WindowsMalwareSeverity["Severe"] = "severe";
})(WindowsMalwareSeverity || (WindowsMalwareSeverity = {}));

var WindowsMalwareState;
(function (WindowsMalwareState) {
    /** Unknown */
    WindowsMalwareState["Unknown"] = "unknown";
    /** Detected */
    WindowsMalwareState["Detected"] = "detected";
    /** Cleaned */
    WindowsMalwareState["Cleaned"] = "cleaned";
    /** Quarantined */
    WindowsMalwareState["Quarantined"] = "quarantined";
    /** Removed */
    WindowsMalwareState["Removed"] = "removed";
    /** Allowed */
    WindowsMalwareState["Allowed"] = "allowed";
    /** Blocked */
    WindowsMalwareState["Blocked"] = "blocked";
    /** Clean failed */
    WindowsMalwareState["CleanFailed"] = "cleanFailed";
    /** Quarantine failed */
    WindowsMalwareState["QuarantineFailed"] = "quarantineFailed";
    /** Remove failed */
    WindowsMalwareState["RemoveFailed"] = "removeFailed";
    /** Allow failed */
    WindowsMalwareState["AllowFailed"] = "allowFailed";
    /** Abandoned */
    WindowsMalwareState["Abandoned"] = "abandoned";
    /** Block failed */
    WindowsMalwareState["BlockFailed"] = "blockFailed";
})(WindowsMalwareState || (WindowsMalwareState = {}));

var WindowsMalwareThreatState;
(function (WindowsMalwareThreatState) {
    /** Active */
    WindowsMalwareThreatState["Active"] = "active";
    /** Action failed */
    WindowsMalwareThreatState["ActionFailed"] = "actionFailed";
    /** Manual steps required */
    WindowsMalwareThreatState["ManualStepsRequired"] = "manualStepsRequired";
    /** Full scan required */
    WindowsMalwareThreatState["FullScanRequired"] = "fullScanRequired";
    /** Reboot required */
    WindowsMalwareThreatState["RebootRequired"] = "rebootRequired";
    /** Remediated with non critical failures  */
    WindowsMalwareThreatState["RemediatedWithNonCriticalFailures"] = "remediatedWithNonCriticalFailures";
    /** Quarantined */
    WindowsMalwareThreatState["Quarantined"] = "quarantined";
    /** Removed */
    WindowsMalwareThreatState["Removed"] = "removed";
    /** Cleaned */
    WindowsMalwareThreatState["Cleaned"] = "cleaned";
    /** Allowed */
    WindowsMalwareThreatState["Allowed"] = "allowed";
    /** No status cleared */
    WindowsMalwareThreatState["NoStatusCleared"] = "noStatusCleared";
})(WindowsMalwareThreatState || (WindowsMalwareThreatState = {}));

function deserializeIntoWindowsDeviceMalwareState(windowsDeviceMalwareState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(windowsDeviceMalwareState)), { "additionalInformationUrl": n => { windowsDeviceMalwareState.additionalInformationUrl = n.getStringValue(); }, "category": n => { windowsDeviceMalwareState.category = n.getEnumValue(WindowsMalwareCategory); }, "detectionCount": n => { windowsDeviceMalwareState.detectionCount = n.getNumberValue(); }, "displayName": n => { windowsDeviceMalwareState.displayName = n.getStringValue(); }, "executionState": n => { windowsDeviceMalwareState.executionState = n.getEnumValue(WindowsMalwareExecutionState); }, "initialDetectionDateTime": n => { windowsDeviceMalwareState.initialDetectionDateTime = n.getDateValue(); }, "lastStateChangeDateTime": n => { windowsDeviceMalwareState.lastStateChangeDateTime = n.getDateValue(); }, "severity": n => { windowsDeviceMalwareState.severity = n.getEnumValue(WindowsMalwareSeverity); }, "state": n => { windowsDeviceMalwareState.state = n.getEnumValue(WindowsMalwareState); }, "threatState": n => { windowsDeviceMalwareState.threatState = n.getEnumValue(WindowsMalwareThreatState); } });
}

var WindowsDefenderProductStatus;
(function (WindowsDefenderProductStatus) {
    /** No status */
    WindowsDefenderProductStatus["NoStatus"] = "noStatus";
    /** Service not running */
    WindowsDefenderProductStatus["ServiceNotRunning"] = "serviceNotRunning";
    /** Service started without any malware protection engine */
    WindowsDefenderProductStatus["ServiceStartedWithoutMalwareProtection"] = "serviceStartedWithoutMalwareProtection";
    /** Pending full scan due to threat action */
    WindowsDefenderProductStatus["PendingFullScanDueToThreatAction"] = "pendingFullScanDueToThreatAction";
    /** Pending reboot due to threat action */
    WindowsDefenderProductStatus["PendingRebootDueToThreatAction"] = "pendingRebootDueToThreatAction";
    /** Pending manual steps due to threat action  */
    WindowsDefenderProductStatus["PendingManualStepsDueToThreatAction"] = "pendingManualStepsDueToThreatAction";
    /** AV signatures out of date */
    WindowsDefenderProductStatus["AvSignaturesOutOfDate"] = "avSignaturesOutOfDate";
    /** AS signatures out of date */
    WindowsDefenderProductStatus["AsSignaturesOutOfDate"] = "asSignaturesOutOfDate";
    /** No quick scan has happened for a specified period */
    WindowsDefenderProductStatus["NoQuickScanHappenedForSpecifiedPeriod"] = "noQuickScanHappenedForSpecifiedPeriod";
    /** No full scan has happened for a specified period */
    WindowsDefenderProductStatus["NoFullScanHappenedForSpecifiedPeriod"] = "noFullScanHappenedForSpecifiedPeriod";
    /** System initiated scan in progress */
    WindowsDefenderProductStatus["SystemInitiatedScanInProgress"] = "systemInitiatedScanInProgress";
    /** System initiated clean in progress */
    WindowsDefenderProductStatus["SystemInitiatedCleanInProgress"] = "systemInitiatedCleanInProgress";
    /** There are samples pending submission */
    WindowsDefenderProductStatus["SamplesPendingSubmission"] = "samplesPendingSubmission";
    /** Product running in evaluation mode */
    WindowsDefenderProductStatus["ProductRunningInEvaluationMode"] = "productRunningInEvaluationMode";
    /** Product running in non-genuine Windows mode */
    WindowsDefenderProductStatus["ProductRunningInNonGenuineMode"] = "productRunningInNonGenuineMode";
    /** Product expired */
    WindowsDefenderProductStatus["ProductExpired"] = "productExpired";
    /** Off-line scan required */
    WindowsDefenderProductStatus["OfflineScanRequired"] = "offlineScanRequired";
    /** Service is shutting down as part of system shutdown */
    WindowsDefenderProductStatus["ServiceShutdownAsPartOfSystemShutdown"] = "serviceShutdownAsPartOfSystemShutdown";
    /** Threat remediation failed critically */
    WindowsDefenderProductStatus["ThreatRemediationFailedCritically"] = "threatRemediationFailedCritically";
    /** Threat remediation failed non-critically */
    WindowsDefenderProductStatus["ThreatRemediationFailedNonCritically"] = "threatRemediationFailedNonCritically";
    /** No status flags set (well initialized state) */
    WindowsDefenderProductStatus["NoStatusFlagsSet"] = "noStatusFlagsSet";
    /** Platform is out of date */
    WindowsDefenderProductStatus["PlatformOutOfDate"] = "platformOutOfDate";
    /** Platform update is in progress */
    WindowsDefenderProductStatus["PlatformUpdateInProgress"] = "platformUpdateInProgress";
    /** Platform is about to be outdated */
    WindowsDefenderProductStatus["PlatformAboutToBeOutdated"] = "platformAboutToBeOutdated";
    /** Signature or platform end of life is past or is impending */
    WindowsDefenderProductStatus["SignatureOrPlatformEndOfLifeIsPastOrIsImpending"] = "signatureOrPlatformEndOfLifeIsPastOrIsImpending";
    /** Windows SMode signatures still in use on non-Win10S install */
    WindowsDefenderProductStatus["WindowsSModeSignaturesInUseOnNonWin10SInstall"] = "windowsSModeSignaturesInUseOnNonWin10SInstall";
})(WindowsDefenderProductStatus || (WindowsDefenderProductStatus = {}));

var WindowsDeviceHealthState;
(function (WindowsDeviceHealthState) {
    /** Computer is clean and no action is required */
    WindowsDeviceHealthState["Clean"] = "clean";
    /** Computer is in pending full scan state */
    WindowsDeviceHealthState["FullScanPending"] = "fullScanPending";
    /** Computer is in pending reboot state */
    WindowsDeviceHealthState["RebootPending"] = "rebootPending";
    /** Computer is in pending manual steps state */
    WindowsDeviceHealthState["ManualStepsPending"] = "manualStepsPending";
    /** Computer is in pending offline scan state */
    WindowsDeviceHealthState["OfflineScanPending"] = "offlineScanPending";
    /** Computer is in critical failure state */
    WindowsDeviceHealthState["Critical"] = "critical";
})(WindowsDeviceHealthState || (WindowsDeviceHealthState = {}));

function deserializeIntoWindowsProtectionState(windowsProtectionState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(windowsProtectionState)), { "antiMalwareVersion": n => { windowsProtectionState.antiMalwareVersion = n.getStringValue(); }, "detectedMalwareState": n => { windowsProtectionState.detectedMalwareState = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWindowsDeviceMalwareState); }, "deviceState": n => { windowsProtectionState.deviceState = n.getEnumValue(WindowsDeviceHealthState); }, "engineVersion": n => { windowsProtectionState.engineVersion = n.getStringValue(); }, "fullScanOverdue": n => { windowsProtectionState.fullScanOverdue = n.getBooleanValue(); }, "fullScanRequired": n => { windowsProtectionState.fullScanRequired = n.getBooleanValue(); }, "isVirtualMachine": n => { windowsProtectionState.isVirtualMachine = n.getBooleanValue(); }, "lastFullScanDateTime": n => { windowsProtectionState.lastFullScanDateTime = n.getDateValue(); }, "lastFullScanSignatureVersion": n => { windowsProtectionState.lastFullScanSignatureVersion = n.getStringValue(); }, "lastQuickScanDateTime": n => { windowsProtectionState.lastQuickScanDateTime = n.getDateValue(); }, "lastQuickScanSignatureVersion": n => { windowsProtectionState.lastQuickScanSignatureVersion = n.getStringValue(); }, "lastReportedDateTime": n => { windowsProtectionState.lastReportedDateTime = n.getDateValue(); }, "malwareProtectionEnabled": n => { windowsProtectionState.malwareProtectionEnabled = n.getBooleanValue(); }, "networkInspectionSystemEnabled": n => { windowsProtectionState.networkInspectionSystemEnabled = n.getBooleanValue(); }, "productStatus": n => { windowsProtectionState.productStatus = n.getEnumValue(WindowsDefenderProductStatus); }, "quickScanOverdue": n => { windowsProtectionState.quickScanOverdue = n.getBooleanValue(); }, "realTimeProtectionEnabled": n => { windowsProtectionState.realTimeProtectionEnabled = n.getBooleanValue(); }, "rebootRequired": n => { windowsProtectionState.rebootRequired = n.getBooleanValue(); }, "signatureUpdateOverdue": n => { windowsProtectionState.signatureUpdateOverdue = n.getBooleanValue(); }, "signatureVersion": n => { windowsProtectionState.signatureVersion = n.getStringValue(); }, "tamperProtectionEnabled": n => { windowsProtectionState.tamperProtectionEnabled = n.getBooleanValue(); } });
}

var DeviceEnrollmentType;
(function (DeviceEnrollmentType) {
    /** Default value, enrollment type was not collected. */
    DeviceEnrollmentType["Unknown"] = "unknown";
    /** User driven enrollment through BYOD channel. */
    DeviceEnrollmentType["UserEnrollment"] = "userEnrollment";
    /** User enrollment with a device enrollment manager account. */
    DeviceEnrollmentType["DeviceEnrollmentManager"] = "deviceEnrollmentManager";
    /** Apple bulk enrollment with user challenge. (DEP, Apple Configurator) */
    DeviceEnrollmentType["AppleBulkWithUser"] = "appleBulkWithUser";
    /** Apple bulk enrollment without user challenge. (DEP, Apple Configurator, Mobile Config) */
    DeviceEnrollmentType["AppleBulkWithoutUser"] = "appleBulkWithoutUser";
    /** Windows 10 Azure AD Join. */
    DeviceEnrollmentType["WindowsAzureADJoin"] = "windowsAzureADJoin";
    /** Windows 10 Bulk enrollment through ICD with certificate. */
    DeviceEnrollmentType["WindowsBulkUserless"] = "windowsBulkUserless";
    /** Windows 10 automatic enrollment. (Add work account) */
    DeviceEnrollmentType["WindowsAutoEnrollment"] = "windowsAutoEnrollment";
    /** Windows 10 bulk Azure AD Join. */
    DeviceEnrollmentType["WindowsBulkAzureDomainJoin"] = "windowsBulkAzureDomainJoin";
    /** Windows 10 Co-Management triggered by AutoPilot or Group Policy. */
    DeviceEnrollmentType["WindowsCoManagement"] = "windowsCoManagement";
    /** Windows 10 Azure AD Join using Device Auth. */
    DeviceEnrollmentType["WindowsAzureADJoinUsingDeviceAuth"] = "windowsAzureADJoinUsingDeviceAuth";
    /** Device managed by Apple user enrollment */
    DeviceEnrollmentType["AppleUserEnrollment"] = "appleUserEnrollment";
    /** Device managed by Apple user enrollment with service account */
    DeviceEnrollmentType["AppleUserEnrollmentWithServiceAccount"] = "appleUserEnrollmentWithServiceAccount";
    /** Azure AD Join enrollment when an Azure VM is provisioned */
    DeviceEnrollmentType["AzureAdJoinUsingAzureVmExtension"] = "azureAdJoinUsingAzureVmExtension";
    /** Android Enterprise Dedicated Device */
    DeviceEnrollmentType["AndroidEnterpriseDedicatedDevice"] = "androidEnterpriseDedicatedDevice";
    /** Android Enterprise Fully Managed */
    DeviceEnrollmentType["AndroidEnterpriseFullyManaged"] = "androidEnterpriseFullyManaged";
    /** Android Enterprise Corporate Work Profile */
    DeviceEnrollmentType["AndroidEnterpriseCorporateWorkProfile"] = "androidEnterpriseCorporateWorkProfile";
})(DeviceEnrollmentType || (DeviceEnrollmentType = {}));

var DeviceManagementExchangeAccessState;
(function (DeviceManagementExchangeAccessState) {
    /** No access state discovered from Exchange */
    DeviceManagementExchangeAccessState["None"] = "none";
    /** Device access state to Exchange is unknown */
    DeviceManagementExchangeAccessState["Unknown"] = "unknown";
    /** Device has access to Exchange */
    DeviceManagementExchangeAccessState["Allowed"] = "allowed";
    /** Device is Blocked in Exchange */
    DeviceManagementExchangeAccessState["Blocked"] = "blocked";
    /** Device is Quarantined in Exchange */
    DeviceManagementExchangeAccessState["Quarantined"] = "quarantined";
})(DeviceManagementExchangeAccessState || (DeviceManagementExchangeAccessState = {}));

var DeviceManagementExchangeAccessStateReason;
(function (DeviceManagementExchangeAccessStateReason) {
    /** No access state reason discovered from Exchange */
    DeviceManagementExchangeAccessStateReason["None"] = "none";
    /** Unknown access state reason */
    DeviceManagementExchangeAccessStateReason["Unknown"] = "unknown";
    /** Access state determined by Exchange Global rule */
    DeviceManagementExchangeAccessStateReason["ExchangeGlobalRule"] = "exchangeGlobalRule";
    /** Access state determined by Exchange Individual rule */
    DeviceManagementExchangeAccessStateReason["ExchangeIndividualRule"] = "exchangeIndividualRule";
    /** Access state determined by Exchange Device rule */
    DeviceManagementExchangeAccessStateReason["ExchangeDeviceRule"] = "exchangeDeviceRule";
    /** Access state due to Exchange upgrade */
    DeviceManagementExchangeAccessStateReason["ExchangeUpgrade"] = "exchangeUpgrade";
    /** Access state determined by Exchange Mailbox Policy */
    DeviceManagementExchangeAccessStateReason["ExchangeMailboxPolicy"] = "exchangeMailboxPolicy";
    /** Access state determined by Exchange */
    DeviceManagementExchangeAccessStateReason["Other"] = "other";
    /** Access state granted by compliance challenge */
    DeviceManagementExchangeAccessStateReason["Compliant"] = "compliant";
    /** Access state revoked by compliance challenge */
    DeviceManagementExchangeAccessStateReason["NotCompliant"] = "notCompliant";
    /** Access state revoked by management challenge */
    DeviceManagementExchangeAccessStateReason["NotEnrolled"] = "notEnrolled";
    /** Access state due to unknown location */
    DeviceManagementExchangeAccessStateReason["UnknownLocation"] = "unknownLocation";
    /** Access state due to MFA challenge */
    DeviceManagementExchangeAccessStateReason["MfaRequired"] = "mfaRequired";
    /** Access State revoked by AAD Access Policy */
    DeviceManagementExchangeAccessStateReason["AzureADBlockDueToAccessPolicy"] = "azureADBlockDueToAccessPolicy";
    /** Access State revoked by compromised password */
    DeviceManagementExchangeAccessStateReason["CompromisedPassword"] = "compromisedPassword";
    /** Access state revoked by managed application challenge */
    DeviceManagementExchangeAccessStateReason["DeviceNotKnownWithManagedApp"] = "deviceNotKnownWithManagedApp";
})(DeviceManagementExchangeAccessStateReason || (DeviceManagementExchangeAccessStateReason = {}));

var DeviceRegistrationState;
(function (DeviceRegistrationState) {
    /** The device is not registered. */
    DeviceRegistrationState["NotRegistered"] = "notRegistered";
    /** The device is registered. */
    DeviceRegistrationState["Registered"] = "registered";
    /** The device has been blocked, wiped or retired. */
    DeviceRegistrationState["Revoked"] = "revoked";
    /** The device has a key conflict. */
    DeviceRegistrationState["KeyConflict"] = "keyConflict";
    /** The device is pending approval. */
    DeviceRegistrationState["ApprovalPending"] = "approvalPending";
    /** The device certificate has been reset. */
    DeviceRegistrationState["CertificateReset"] = "certificateReset";
    /** The device is not registered and pending enrollment. */
    DeviceRegistrationState["NotRegisteredPendingEnrollment"] = "notRegisteredPendingEnrollment";
    /** The device registration status is unknown. */
    DeviceRegistrationState["Unknown"] = "unknown";
})(DeviceRegistrationState || (DeviceRegistrationState = {}));

var DeviceType;
(function (DeviceType) {
    /** Desktop. */
    DeviceType["Desktop"] = "desktop";
    /** WindowsRT. */
    DeviceType["WindowsRT"] = "windowsRT";
    /** WinMO6. */
    DeviceType["WinMO6"] = "winMO6";
    /** Nokia. */
    DeviceType["Nokia"] = "nokia";
    /** Windows phone. */
    DeviceType["WindowsPhone"] = "windowsPhone";
    /** Mac. */
    DeviceType["Mac"] = "mac";
    /** WinCE. */
    DeviceType["WinCE"] = "winCE";
    /** WinEmbedded. */
    DeviceType["WinEmbedded"] = "winEmbedded";
    /** iPhone. */
    DeviceType["IPhone"] = "iPhone";
    /** iPad. */
    DeviceType["IPad"] = "iPad";
    /** iPodTouch. */
    DeviceType["IPod"] = "iPod";
    /** Android. */
    DeviceType["Android"] = "android";
    /** iSocConsumer. */
    DeviceType["ISocConsumer"] = "iSocConsumer";
    /** Unix. */
    DeviceType["Unix"] = "unix";
    /** Mac OS X client using built in MDM agent. */
    DeviceType["MacMDM"] = "macMDM";
    /** Representing the fancy Windows 10 goggles. */
    DeviceType["HoloLens"] = "holoLens";
    /** Surface HUB device. */
    DeviceType["SurfaceHub"] = "surfaceHub";
    /** Android for work device. */
    DeviceType["AndroidForWork"] = "androidForWork";
    /** Android enterprise device. */
    DeviceType["AndroidEnterprise"] = "androidEnterprise";
    /** Windows 10x device. */
    DeviceType["Windows10x"] = "windows10x";
    /** Android non Google managed device. */
    DeviceType["AndroidnGMS"] = "androidnGMS";
    /** ChromeOS device. */
    DeviceType["ChromeOS"] = "chromeOS";
    /** Linux device. */
    DeviceType["Linux"] = "linux";
    /** Blackberry. */
    DeviceType["Blackberry"] = "blackberry";
    /** Palm. */
    DeviceType["Palm"] = "palm";
    /** Represents that the device type is unknown. */
    DeviceType["Unknown"] = "unknown";
    /** Cloud PC device. */
    DeviceType["CloudPC"] = "cloudPC";
})(DeviceType || (DeviceType = {}));

var JoinType;
(function (JoinType) {
    /** Unknown enrollment join type. */
    JoinType["Unknown"] = "unknown";
    /** The device is joined by Azure AD. */
    JoinType["AzureADJoined"] = "azureADJoined";
    /** The device is registered by Azure AD. */
    JoinType["AzureADRegistered"] = "azureADRegistered";
    /** The device is joined by hybrid Azure AD. */
    JoinType["HybridAzureADJoined"] = "hybridAzureADJoined";
})(JoinType || (JoinType = {}));

var LostModeState;
(function (LostModeState) {
    /** Lost mode is disabled. */
    LostModeState["Disabled"] = "disabled";
    /** Lost mode is enabled. */
    LostModeState["Enabled"] = "enabled";
})(LostModeState || (LostModeState = {}));

var ManagedDeviceArchitecture;
(function (ManagedDeviceArchitecture) {
    /** Unknown architecture */
    ManagedDeviceArchitecture["Unknown"] = "unknown";
    /** X86 */
    ManagedDeviceArchitecture["X86"] = "x86";
    /** X64 */
    ManagedDeviceArchitecture["X64"] = "x64";
    /** ARM */
    ManagedDeviceArchitecture["Arm"] = "arm";
    /** ARM64 */
    ManagedDeviceArchitecture["ArM64"] = "arM64";
})(ManagedDeviceArchitecture || (ManagedDeviceArchitecture = {}));

var ManagedDeviceManagementFeatures;
(function (ManagedDeviceManagementFeatures) {
    /** Unknown device management features. */
    ManagedDeviceManagementFeatures["None"] = "none";
    /** Microsoft Managed Desktop */
    ManagedDeviceManagementFeatures["MicrosoftManagedDesktop"] = "microsoftManagedDesktop";
})(ManagedDeviceManagementFeatures || (ManagedDeviceManagementFeatures = {}));

var ManagedDeviceOwnerType;
(function (ManagedDeviceOwnerType) {
    /** Unknown. */
    ManagedDeviceOwnerType["Unknown"] = "unknown";
    /** Owned by company. */
    ManagedDeviceOwnerType["Company"] = "company";
    /** Owned by person. */
    ManagedDeviceOwnerType["Personal"] = "personal";
})(ManagedDeviceOwnerType || (ManagedDeviceOwnerType = {}));

var ManagedDevicePartnerReportedHealthState;
(function (ManagedDevicePartnerReportedHealthState) {
    /** Device health state is not yet reported */
    ManagedDevicePartnerReportedHealthState["Unknown"] = "unknown";
    /** Device has been activated by a mobile threat defense partner, but has not yet reported health. */
    ManagedDevicePartnerReportedHealthState["Activated"] = "activated";
    /** Device has been deactivated by a mobile threat defense partner. The device health is not known. */
    ManagedDevicePartnerReportedHealthState["Deactivated"] = "deactivated";
    /** Device is considered secured by the mobile threat defense partner. */
    ManagedDevicePartnerReportedHealthState["Secured"] = "secured";
    /** Device is considered low threat by the mobile threat defense partner. */
    ManagedDevicePartnerReportedHealthState["LowSeverity"] = "lowSeverity";
    /** Device is considered medium threat by the mobile threat defense partner. */
    ManagedDevicePartnerReportedHealthState["MediumSeverity"] = "mediumSeverity";
    /** Device is considered high threat by the mobile threat defense partner. */
    ManagedDevicePartnerReportedHealthState["HighSeverity"] = "highSeverity";
    /** Device is considered unresponsive by the mobile threat defense partner. The device health is not known. */
    ManagedDevicePartnerReportedHealthState["Unresponsive"] = "unresponsive";
    /** Device is considered compromised by the Threat Defense partner. This means the device has an active Threat or Risk which cannot be easily remediated by the end user and the user should contact their IT Admin. */
    ManagedDevicePartnerReportedHealthState["Compromised"] = "compromised";
    /** Device is considered misconfigured with the Threat Defense partner. This means the device is missing a required profile or configuration for the Threat Defense Partner to function properly and is thus threat or risk analysis is not able to complete. */
    ManagedDevicePartnerReportedHealthState["Misconfigured"] = "misconfigured";
})(ManagedDevicePartnerReportedHealthState || (ManagedDevicePartnerReportedHealthState = {}));

var ManagementAgentType;
(function (ManagementAgentType) {
    /** The device is managed by Exchange server. */
    ManagementAgentType["Eas"] = "eas";
    /** The device is managed by Intune MDM. */
    ManagementAgentType["Mdm"] = "mdm";
    /** The device is managed by both Exchange server and Intune MDM. */
    ManagementAgentType["EasMdm"] = "easMdm";
    /** Intune client managed. */
    ManagementAgentType["IntuneClient"] = "intuneClient";
    /** The device is EAS and Intune client dual managed. */
    ManagementAgentType["EasIntuneClient"] = "easIntuneClient";
    /** The device is managed by Configuration Manager. */
    ManagementAgentType["ConfigurationManagerClient"] = "configurationManagerClient";
    /** The device is managed by Configuration Manager and MDM. */
    ManagementAgentType["ConfigurationManagerClientMdm"] = "configurationManagerClientMdm";
    /** The device is managed by Configuration Manager, MDM and Eas. */
    ManagementAgentType["ConfigurationManagerClientMdmEas"] = "configurationManagerClientMdmEas";
    /** Unknown management agent type. */
    ManagementAgentType["Unknown"] = "unknown";
    /** The device attributes are fetched from Jamf. */
    ManagementAgentType["Jamf"] = "jamf";
    /** The device is managed by Google's CloudDPC. */
    ManagementAgentType["GoogleCloudDevicePolicyController"] = "googleCloudDevicePolicyController";
    /** This device is managed by Microsoft 365 through Intune. */
    ManagementAgentType["Microsoft365ManagedMdm"] = "microsoft365ManagedMdm";
    ManagementAgentType["MsSense"] = "msSense";
    /** This device is managed by Intune's MDM for AOSP (Android Open Source Project) devices */
    ManagementAgentType["IntuneAosp"] = "intuneAosp";
})(ManagementAgentType || (ManagementAgentType = {}));

var ManagementState;
(function (ManagementState) {
    /** The device is under management */
    ManagementState["Managed"] = "managed";
    /** A retire command is occuring on the device and in the process of unenrolling from management */
    ManagementState["RetirePending"] = "retirePending";
    /** Retire command failed on the device */
    ManagementState["RetireFailed"] = "retireFailed";
    /** A wipe command is occuring on the device and in the process of unenrolling from management */
    ManagementState["WipePending"] = "wipePending";
    /** Wipe command failed on the device */
    ManagementState["WipeFailed"] = "wipeFailed";
    /** The device is unhealthy. */
    ManagementState["Unhealthy"] = "unhealthy";
    /** A delete command is occuring on the device  */
    ManagementState["DeletePending"] = "deletePending";
    /** A retire command was issued for the device */
    ManagementState["RetireIssued"] = "retireIssued";
    /** A wipe command was issued for the device */
    ManagementState["WipeIssued"] = "wipeIssued";
    /** A wipe command for this device has been canceled */
    ManagementState["WipeCanceled"] = "wipeCanceled";
    /** A retire command for this device has been canceled */
    ManagementState["RetireCanceled"] = "retireCanceled";
    /** The device is discovered but not fully enrolled. */
    ManagementState["Discovered"] = "discovered";
})(ManagementState || (ManagementState = {}));

var OwnerType;
(function (OwnerType) {
    /** Unknown. */
    OwnerType["Unknown"] = "unknown";
    /** Owned by company. */
    OwnerType["Company"] = "company";
    /** Owned by person. */
    OwnerType["Personal"] = "personal";
})(OwnerType || (OwnerType = {}));

function deserializeIntoManagedDevice(managedDevice = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(managedDevice)), { "aadRegistered": n => { managedDevice.aadRegistered = n.getBooleanValue(); }, "activationLockBypassCode": n => { managedDevice.activationLockBypassCode = n.getStringValue(); }, "androidSecurityPatchLevel": n => { managedDevice.androidSecurityPatchLevel = n.getStringValue(); }, "assignmentFilterEvaluationStatusDetails": n => { managedDevice.assignmentFilterEvaluationStatusDetails = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssignmentFilterEvaluationStatusDetails); }, "autopilotEnrolled": n => { managedDevice.autopilotEnrolled = n.getBooleanValue(); }, "azureActiveDirectoryDeviceId": n => { managedDevice.azureActiveDirectoryDeviceId = n.getStringValue(); }, "azureADDeviceId": n => { managedDevice.azureADDeviceId = n.getStringValue(); }, "azureADRegistered": n => { managedDevice.azureADRegistered = n.getBooleanValue(); }, "bootstrapTokenEscrowed": n => { managedDevice.bootstrapTokenEscrowed = n.getBooleanValue(); }, "chassisType": n => { managedDevice.chassisType = n.getEnumValue(ChassisType); }, "chromeOSDeviceInfo": n => { managedDevice.chromeOSDeviceInfo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChromeOSDeviceProperty); }, "cloudPcRemoteActionResults": n => { managedDevice.cloudPcRemoteActionResults = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCloudPcRemoteActionResult); }, "complianceGracePeriodExpirationDateTime": n => { managedDevice.complianceGracePeriodExpirationDateTime = n.getDateValue(); }, "complianceState": n => { managedDevice.complianceState = n.getEnumValue(ComplianceState); }, "configurationManagerClientEnabledFeatures": n => { managedDevice.configurationManagerClientEnabledFeatures = n.getObject(deserializeIntoConfigurationManagerClientEnabledFeatures); }, "configurationManagerClientHealthState": n => { managedDevice.configurationManagerClientHealthState = n.getObject(deserializeIntoConfigurationManagerClientHealthState); }, "configurationManagerClientInformation": n => { managedDevice.configurationManagerClientInformation = n.getObject(deserializeIntoConfigurationManagerClientInformation); }, "detectedApps": n => { managedDevice.detectedApps = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDetectedApp); }, "deviceActionResults": n => { managedDevice.deviceActionResults = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceActionResult); }, "deviceCategory": n => { managedDevice.deviceCategory = n.getObject(deserializeIntoDeviceCategory); }, "deviceCategoryDisplayName": n => { managedDevice.deviceCategoryDisplayName = n.getStringValue(); }, "deviceCompliancePolicyStates": n => { managedDevice.deviceCompliancePolicyStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceCompliancePolicyState); }, "deviceConfigurationStates": n => { managedDevice.deviceConfigurationStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceConfigurationState); }, "deviceEnrollmentType": n => { managedDevice.deviceEnrollmentType = n.getEnumValue(DeviceEnrollmentType); }, "deviceFirmwareConfigurationInterfaceManaged": n => { managedDevice.deviceFirmwareConfigurationInterfaceManaged = n.getBooleanValue(); }, "deviceHealthAttestationState": n => { managedDevice.deviceHealthAttestationState = n.getObject(deserializeIntoDeviceHealthAttestationState); }, "deviceName": n => { managedDevice.deviceName = n.getStringValue(); }, "deviceRegistrationState": n => { managedDevice.deviceRegistrationState = n.getEnumValue(DeviceRegistrationState); }, "deviceType": n => { managedDevice.deviceType = n.getEnumValue(DeviceType); }, "easActivated": n => { managedDevice.easActivated = n.getBooleanValue(); }, "easActivationDateTime": n => { managedDevice.easActivationDateTime = n.getDateValue(); }, "easDeviceId": n => { managedDevice.easDeviceId = n.getStringValue(); }, "emailAddress": n => { managedDevice.emailAddress = n.getStringValue(); }, "enrolledDateTime": n => { managedDevice.enrolledDateTime = n.getDateValue(); }, "enrollmentProfileName": n => { managedDevice.enrollmentProfileName = n.getStringValue(); }, "ethernetMacAddress": n => { managedDevice.ethernetMacAddress = n.getStringValue(); }, "exchangeAccessState": n => { managedDevice.exchangeAccessState = n.getEnumValue(DeviceManagementExchangeAccessState); }, "exchangeAccessStateReason": n => { managedDevice.exchangeAccessStateReason = n.getEnumValue(DeviceManagementExchangeAccessStateReason); }, "exchangeLastSuccessfulSyncDateTime": n => { managedDevice.exchangeLastSuccessfulSyncDateTime = n.getDateValue(); }, "freeStorageSpaceInBytes": n => { managedDevice.freeStorageSpaceInBytes = n.getNumberValue(); }, "hardwareInformation": n => { managedDevice.hardwareInformation = n.getObject(deserializeIntoHardwareInformation); }, "iccid": n => { managedDevice.iccid = n.getStringValue(); }, "imei": n => { managedDevice.imei = n.getStringValue(); }, "isEncrypted": n => { managedDevice.isEncrypted = n.getBooleanValue(); }, "isSupervised": n => { managedDevice.isSupervised = n.getBooleanValue(); }, "jailBroken": n => { managedDevice.jailBroken = n.getStringValue(); }, "joinType": n => { managedDevice.joinType = n.getEnumValue(JoinType); }, "lastSyncDateTime": n => { managedDevice.lastSyncDateTime = n.getDateValue(); }, "logCollectionRequests": n => { managedDevice.logCollectionRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceLogCollectionResponse); }, "lostModeState": n => { managedDevice.lostModeState = n.getEnumValue(LostModeState); }, "managedDeviceMobileAppConfigurationStates": n => { managedDevice.managedDeviceMobileAppConfigurationStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedDeviceMobileAppConfigurationState); }, "managedDeviceName": n => { managedDevice.managedDeviceName = n.getStringValue(); }, "managedDeviceOwnerType": n => { managedDevice.managedDeviceOwnerType = n.getEnumValue(ManagedDeviceOwnerType); }, "managementAgent": n => { managedDevice.managementAgent = n.getEnumValue(ManagementAgentType); }, "managementCertificateExpirationDate": n => { managedDevice.managementCertificateExpirationDate = n.getDateValue(); }, "managementFeatures": n => { managedDevice.managementFeatures = n.getEnumValue(ManagedDeviceManagementFeatures); }, "managementState": n => { managedDevice.managementState = n.getEnumValue(ManagementState); }, "manufacturer": n => { managedDevice.manufacturer = n.getStringValue(); }, "meid": n => { managedDevice.meid = n.getStringValue(); }, "model": n => { managedDevice.model = n.getStringValue(); }, "notes": n => { managedDevice.notes = n.getStringValue(); }, "operatingSystem": n => { managedDevice.operatingSystem = n.getStringValue(); }, "osVersion": n => { managedDevice.osVersion = n.getStringValue(); }, "ownerType": n => { managedDevice.ownerType = n.getEnumValue(OwnerType); }, "partnerReportedThreatState": n => { managedDevice.partnerReportedThreatState = n.getEnumValue(ManagedDevicePartnerReportedHealthState); }, "phoneNumber": n => { managedDevice.phoneNumber = n.getStringValue(); }, "physicalMemoryInBytes": n => { managedDevice.physicalMemoryInBytes = n.getNumberValue(); }, "preferMdmOverGroupPolicyAppliedDateTime": n => { managedDevice.preferMdmOverGroupPolicyAppliedDateTime = n.getDateValue(); }, "processorArchitecture": n => { managedDevice.processorArchitecture = n.getEnumValue(ManagedDeviceArchitecture); }, "remoteAssistanceSessionErrorDetails": n => { managedDevice.remoteAssistanceSessionErrorDetails = n.getStringValue(); }, "remoteAssistanceSessionUrl": n => { managedDevice.remoteAssistanceSessionUrl = n.getStringValue(); }, "requireUserEnrollmentApproval": n => { managedDevice.requireUserEnrollmentApproval = n.getBooleanValue(); }, "retireAfterDateTime": n => { managedDevice.retireAfterDateTime = n.getDateValue(); }, "roleScopeTagIds": n => { managedDevice.roleScopeTagIds = n.getCollectionOfPrimitiveValues(); }, "securityBaselineStates": n => { managedDevice.securityBaselineStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSecurityBaselineState); }, "serialNumber": n => { managedDevice.serialNumber = n.getStringValue(); }, "skuFamily": n => { managedDevice.skuFamily = n.getStringValue(); }, "skuNumber": n => { managedDevice.skuNumber = n.getNumberValue(); }, "specificationVersion": n => { managedDevice.specificationVersion = n.getStringValue(); }, "subscriberCarrier": n => { managedDevice.subscriberCarrier = n.getStringValue(); }, "totalStorageSpaceInBytes": n => { managedDevice.totalStorageSpaceInBytes = n.getNumberValue(); }, "udid": n => { managedDevice.udid = n.getStringValue(); }, "userDisplayName": n => { managedDevice.userDisplayName = n.getStringValue(); }, "userId": n => { managedDevice.userId = n.getStringValue(); }, "userPrincipalName": n => { managedDevice.userPrincipalName = n.getStringValue(); }, "users": n => { managedDevice.users = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUser); }, "usersLoggedOn": n => { managedDevice.usersLoggedOn = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLoggedOnUser); }, "wiFiMacAddress": n => { managedDevice.wiFiMacAddress = n.getStringValue(); }, "windowsActiveMalwareCount": n => { managedDevice.windowsActiveMalwareCount = n.getNumberValue(); }, "windowsProtectionState": n => { managedDevice.windowsProtectionState = n.getObject(deserializeIntoWindowsProtectionState); }, "windowsRemediatedMalwareCount": n => { managedDevice.windowsRemediatedMalwareCount = n.getNumberValue(); } });
}

function deserializeIntoMobileAppSupportedDeviceType(mobileAppSupportedDeviceType = {}) {
    return {
        "maximumOperatingSystemVersion": n => { mobileAppSupportedDeviceType.maximumOperatingSystemVersion = n.getStringValue(); },
        "minimumOperatingSystemVersion": n => { mobileAppSupportedDeviceType.minimumOperatingSystemVersion = n.getStringValue(); },
        "type": n => { mobileAppSupportedDeviceType.type = n.getEnumValue(DeviceType); },
    };
}

var MobileAppIntent;
(function (MobileAppIntent) {
    /** Available */
    MobileAppIntent["Available"] = "available";
    /** Not Available */
    MobileAppIntent["NotAvailable"] = "notAvailable";
    /** Required Install */
    MobileAppIntent["RequiredInstall"] = "requiredInstall";
    /** Required Uninstall */
    MobileAppIntent["RequiredUninstall"] = "requiredUninstall";
    /** RequiredAndAvailableInstall */
    MobileAppIntent["RequiredAndAvailableInstall"] = "requiredAndAvailableInstall";
    /** AvailableInstallWithoutEnrollment */
    MobileAppIntent["AvailableInstallWithoutEnrollment"] = "availableInstallWithoutEnrollment";
    /** Exclude */
    MobileAppIntent["Exclude"] = "exclude";
})(MobileAppIntent || (MobileAppIntent = {}));

var ResultantAppState;
(function (ResultantAppState) {
    /** The application is not applicable. */
    ResultantAppState["NotApplicable"] = "notApplicable";
    /** The application is installed with no errors. */
    ResultantAppState["Installed"] = "installed";
    /** The application failed to install. */
    ResultantAppState["Failed"] = "failed";
    /** The application is not installed. */
    ResultantAppState["NotInstalled"] = "notInstalled";
    /** The application failed to uninstall. */
    ResultantAppState["UninstallFailed"] = "uninstallFailed";
    /** The installation of the application is in progress. */
    ResultantAppState["PendingInstall"] = "pendingInstall";
    /** The status of the application is unknown. */
    ResultantAppState["Unknown"] = "unknown";
})(ResultantAppState || (ResultantAppState = {}));

function deserializeIntoMobileAppIntentAndStateDetail(mobileAppIntentAndStateDetail = {}) {
    return {
        "applicationId": n => { mobileAppIntentAndStateDetail.applicationId = n.getStringValue(); },
        "displayName": n => { mobileAppIntentAndStateDetail.displayName = n.getStringValue(); },
        "displayVersion": n => { mobileAppIntentAndStateDetail.displayVersion = n.getStringValue(); },
        "installState": n => { mobileAppIntentAndStateDetail.installState = n.getEnumValue(ResultantAppState); },
        "mobileAppIntent": n => { mobileAppIntentAndStateDetail.mobileAppIntent = n.getEnumValue(MobileAppIntent); },
        "supportedDeviceTypes": n => { mobileAppIntentAndStateDetail.supportedDeviceTypes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMobileAppSupportedDeviceType); },
    };
}

function deserializeIntoMobileAppIntentAndState(mobileAppIntentAndState = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(mobileAppIntentAndState)), { "managedDeviceIdentifier": n => { mobileAppIntentAndState.managedDeviceIdentifier = n.getStringValue(); }, "mobileAppList": n => { mobileAppIntentAndState.mobileAppList = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMobileAppIntentAndStateDetail); }, "userId": n => { mobileAppIntentAndState.userId = n.getStringValue(); } });
}

var AppLogUploadState;
(function (AppLogUploadState) {
    /** Request is waiting to be processed or under processing */
    AppLogUploadState["Pending"] = "pending";
    /** Request is completed with file uploaded to Azure blob for download. */
    AppLogUploadState["Completed"] = "completed";
    /** Request finished processing and in error state. */
    AppLogUploadState["Failed"] = "failed";
})(AppLogUploadState || (AppLogUploadState = {}));

function deserializeIntoAppLogCollectionRequest(appLogCollectionRequest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(appLogCollectionRequest)), { "completedDateTime": n => { appLogCollectionRequest.completedDateTime = n.getDateValue(); }, "customLogFolders": n => { appLogCollectionRequest.customLogFolders = n.getCollectionOfPrimitiveValues(); }, "errorMessage": n => { appLogCollectionRequest.errorMessage = n.getStringValue(); }, "status": n => { appLogCollectionRequest.status = n.getEnumValue(AppLogUploadState); } });
}

function deserializeIntoMobileAppTroubleshootingHistoryItem(mobileAppTroubleshootingHistoryItem = {}) {
    return {
        "occurrenceDateTime": n => { mobileAppTroubleshootingHistoryItem.occurrenceDateTime = n.getDateValue(); },
        "troubleshootingErrorDetails": n => { mobileAppTroubleshootingHistoryItem.troubleshootingErrorDetails = n.getObject(deserializeIntoDeviceManagementTroubleshootingErrorDetails); },
    };
}

function deserializeIntoMobileAppTroubleshootingEvent(mobileAppTroubleshootingEvent = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDeviceManagementTroubleshootingEvent(mobileAppTroubleshootingEvent)), { "applicationId": n => { mobileAppTroubleshootingEvent.applicationId = n.getStringValue(); }, "appLogCollectionRequests": n => { mobileAppTroubleshootingEvent.appLogCollectionRequests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppLogCollectionRequest); }, "history": n => { mobileAppTroubleshootingEvent.history = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMobileAppTroubleshootingHistoryItem); }, "managedDeviceIdentifier": n => { mobileAppTroubleshootingEvent.managedDeviceIdentifier = n.getStringValue(); }, "userId": n => { mobileAppTroubleshootingEvent.userId = n.getStringValue(); } });
}

function deserializeIntoVisualProperties(visualProperties = {}) {
    return {
        "body": n => { visualProperties.body = n.getStringValue(); },
        "title": n => { visualProperties.title = n.getStringValue(); },
    };
}

function deserializeIntoPayloadTypes(payloadTypes = {}) {
    return {
        "rawContent": n => { payloadTypes.rawContent = n.getStringValue(); },
        "visualContent": n => { payloadTypes.visualContent = n.getObject(deserializeIntoVisualProperties); },
    };
}

function deserializeIntoTargetPolicyEndpoints(targetPolicyEndpoints = {}) {
    return {
        "platformTypes": n => { targetPolicyEndpoints.platformTypes = n.getCollectionOfPrimitiveValues(); },
    };
}

var Priority;
(function (Priority) {
    Priority["None"] = "None";
    Priority["High"] = "High";
    Priority["Low"] = "Low";
})(Priority || (Priority = {}));

function deserializeIntoNotification(notification = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(notification)), { "displayTimeToLive": n => { notification.displayTimeToLive = n.getNumberValue(); }, "expirationDateTime": n => { notification.expirationDateTime = n.getDateValue(); }, "groupName": n => { notification.groupName = n.getStringValue(); }, "payload": n => { notification.payload = n.getObject(deserializeIntoPayloadTypes); }, "priority": n => { notification.priority = n.getEnumValue(Priority); }, "targetHostName": n => { notification.targetHostName = n.getStringValue(); }, "targetPolicy": n => { notification.targetPolicy = n.getObject(deserializeIntoTargetPolicyEndpoints); } });
}

function deserializeIntoOAuth2PermissionGrant(oAuth2PermissionGrant = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(oAuth2PermissionGrant)), { "clientId": n => { oAuth2PermissionGrant.clientId = n.getStringValue(); }, "consentType": n => { oAuth2PermissionGrant.consentType = n.getStringValue(); }, "expiryTime": n => { oAuth2PermissionGrant.expiryTime = n.getDateValue(); }, "principalId": n => { oAuth2PermissionGrant.principalId = n.getStringValue(); }, "resourceId": n => { oAuth2PermissionGrant.resourceId = n.getStringValue(); }, "scope": n => { oAuth2PermissionGrant.scope = n.getStringValue(); }, "startTime": n => { oAuth2PermissionGrant.startTime = n.getDateValue(); } });
}

function deserializeIntoObjectIdentity(objectIdentity = {}) {
    return {
        "issuer": n => { objectIdentity.issuer = n.getStringValue(); },
        "issuerAssignedId": n => { objectIdentity.issuerAssignedId = n.getStringValue(); },
        "signInType": n => { objectIdentity.signInType = n.getStringValue(); },
    };
}

function deserializeIntoAudioConferencing(audioConferencing = {}) {
    return {
        "conferenceId": n => { audioConferencing.conferenceId = n.getStringValue(); },
        "dialinUrl": n => { audioConferencing.dialinUrl = n.getStringValue(); },
        "tollFreeNumber": n => { audioConferencing.tollFreeNumber = n.getStringValue(); },
        "tollFreeNumbers": n => { audioConferencing.tollFreeNumbers = n.getCollectionOfPrimitiveValues(); },
        "tollNumber": n => { audioConferencing.tollNumber = n.getStringValue(); },
        "tollNumbers": n => { audioConferencing.tollNumbers = n.getCollectionOfPrimitiveValues(); },
    };
}

var BroadcastMeetingAudience;
(function (BroadcastMeetingAudience) {
    BroadcastMeetingAudience["RoleIsAttendee"] = "roleIsAttendee";
    BroadcastMeetingAudience["Organization"] = "organization";
    BroadcastMeetingAudience["Everyone"] = "everyone";
    BroadcastMeetingAudience["UnknownFutureValue"] = "unknownFutureValue";
})(BroadcastMeetingAudience || (BroadcastMeetingAudience = {}));

function deserializeIntoBroadcastMeetingCaptionSettings(broadcastMeetingCaptionSettings = {}) {
    return {
        "isCaptionEnabled": n => { broadcastMeetingCaptionSettings.isCaptionEnabled = n.getBooleanValue(); },
        "spokenLanguage": n => { broadcastMeetingCaptionSettings.spokenLanguage = n.getStringValue(); },
        "translationLanguages": n => { broadcastMeetingCaptionSettings.translationLanguages = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoBroadcastMeetingSettings(broadcastMeetingSettings = {}) {
    return {
        "allowedAudience": n => { broadcastMeetingSettings.allowedAudience = n.getEnumValue(BroadcastMeetingAudience); },
        "captions": n => { broadcastMeetingSettings.captions = n.getObject(deserializeIntoBroadcastMeetingCaptionSettings); },
        "isAttendeeReportEnabled": n => { broadcastMeetingSettings.isAttendeeReportEnabled = n.getBooleanValue(); },
        "isQuestionAndAnswerEnabled": n => { broadcastMeetingSettings.isQuestionAndAnswerEnabled = n.getBooleanValue(); },
        "isRecordingEnabled": n => { broadcastMeetingSettings.isRecordingEnabled = n.getBooleanValue(); },
        "isVideoOnDemandEnabled": n => { broadcastMeetingSettings.isVideoOnDemandEnabled = n.getBooleanValue(); },
    };
}

function deserializeIntoCallTranscript(callTranscript = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(callTranscript)), { "content": n => { callTranscript.content = n.getStringValue(); }, "createdDateTime": n => { callTranscript.createdDateTime = n.getDateValue(); } });
}

function deserializeIntoChatInfo(chatInfo = {}) {
    return {
        "messageId": n => { chatInfo.messageId = n.getStringValue(); },
        "replyChainMessageId": n => { chatInfo.replyChainMessageId = n.getStringValue(); },
        "threadId": n => { chatInfo.threadId = n.getStringValue(); },
    };
}

function deserializeIntoJoinMeetingIdSettings(joinMeetingIdSettings = {}) {
    return {
        "isPasscodeRequired": n => { joinMeetingIdSettings.isPasscodeRequired = n.getBooleanValue(); },
        "joinMeetingId": n => { joinMeetingIdSettings.joinMeetingId = n.getStringValue(); },
        "passcode": n => { joinMeetingIdSettings.passcode = n.getStringValue(); },
    };
}

var LobbyBypassScope;
(function (LobbyBypassScope) {
    LobbyBypassScope["Organizer"] = "organizer";
    LobbyBypassScope["Organization"] = "organization";
    LobbyBypassScope["OrganizationAndFederated"] = "organizationAndFederated";
    LobbyBypassScope["Everyone"] = "everyone";
    LobbyBypassScope["UnknownFutureValue"] = "unknownFutureValue";
    LobbyBypassScope["Invited"] = "invited";
    LobbyBypassScope["OrganizationExcludingGuests"] = "organizationExcludingGuests";
})(LobbyBypassScope || (LobbyBypassScope = {}));

function deserializeIntoLobbyBypassSettings(lobbyBypassSettings = {}) {
    return {
        "isDialInBypassEnabled": n => { lobbyBypassSettings.isDialInBypassEnabled = n.getBooleanValue(); },
        "scope": n => { lobbyBypassSettings.scope = n.getEnumValue(LobbyBypassScope); },
    };
}

function deserializeIntoAttendanceInterval(attendanceInterval = {}) {
    return {
        "durationInSeconds": n => { attendanceInterval.durationInSeconds = n.getNumberValue(); },
        "joinDateTime": n => { attendanceInterval.joinDateTime = n.getDateValue(); },
        "leaveDateTime": n => { attendanceInterval.leaveDateTime = n.getDateValue(); },
    };
}

function deserializeIntoAttendanceRecord(attendanceRecord = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(attendanceRecord)), { "attendanceIntervals": n => { attendanceRecord.attendanceIntervals = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttendanceInterval); }, "emailAddress": n => { attendanceRecord.emailAddress = n.getStringValue(); }, "identity": n => { attendanceRecord.identity = n.getObject(deserializeIntoIdentity); }, "registrantId": n => { attendanceRecord.registrantId = n.getStringValue(); }, "role": n => { attendanceRecord.role = n.getStringValue(); }, "totalAttendanceInSeconds": n => { attendanceRecord.totalAttendanceInSeconds = n.getNumberValue(); } });
}

function deserializeIntoMeetingAttendanceReport(meetingAttendanceReport = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(meetingAttendanceReport)), { "attendanceRecords": n => { meetingAttendanceReport.attendanceRecords = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttendanceRecord); }, "meetingEndDateTime": n => { meetingAttendanceReport.meetingEndDateTime = n.getDateValue(); }, "meetingStartDateTime": n => { meetingAttendanceReport.meetingStartDateTime = n.getDateValue(); }, "totalParticipantCount": n => { meetingAttendanceReport.totalParticipantCount = n.getNumberValue(); } });
}

var OnlineMeetingRole;
(function (OnlineMeetingRole) {
    OnlineMeetingRole["Attendee"] = "attendee";
    OnlineMeetingRole["Presenter"] = "presenter";
    OnlineMeetingRole["UnknownFutureValue"] = "unknownFutureValue";
    OnlineMeetingRole["Producer"] = "producer";
    OnlineMeetingRole["Coorganizer"] = "coorganizer";
})(OnlineMeetingRole || (OnlineMeetingRole = {}));

function deserializeIntoMeetingParticipantInfo(meetingParticipantInfo = {}) {
    return {
        "identity": n => { meetingParticipantInfo.identity = n.getObject(deserializeIntoIdentitySet); },
        "role": n => { meetingParticipantInfo.role = n.getEnumValue(OnlineMeetingRole); },
        "upn": n => { meetingParticipantInfo.upn = n.getStringValue(); },
    };
}

function deserializeIntoMeetingParticipants(meetingParticipants = {}) {
    return {
        "attendees": n => { meetingParticipants.attendees = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingParticipantInfo); },
        "contributors": n => { meetingParticipants.contributors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingParticipantInfo); },
        "organizer": n => { meetingParticipants.organizer = n.getObject(deserializeIntoMeetingParticipantInfo); },
        "producers": n => { meetingParticipants.producers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingParticipantInfo); },
    };
}

function deserializeIntoMeetingRegistrantBase(meetingRegistrantBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(meetingRegistrantBase)), { "joinWebUrl": n => { meetingRegistrantBase.joinWebUrl = n.getStringValue(); } });
}

var MeetingAudience;
(function (MeetingAudience) {
    MeetingAudience["Everyone"] = "everyone";
    MeetingAudience["Organization"] = "organization";
    MeetingAudience["UnknownFutureValue"] = "unknownFutureValue";
})(MeetingAudience || (MeetingAudience = {}));

function deserializeIntoMeetingRegistrationBase(meetingRegistrationBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(meetingRegistrationBase)), { "allowedRegistrant": n => { meetingRegistrationBase.allowedRegistrant = n.getEnumValue(MeetingAudience); }, "registrants": n => { meetingRegistrationBase.registrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingRegistrantBase); } });
}

var AnswerInputType;
(function (AnswerInputType) {
    AnswerInputType["Text"] = "text";
    AnswerInputType["RadioButton"] = "radioButton";
    AnswerInputType["UnknownFutureValue"] = "unknownFutureValue";
})(AnswerInputType || (AnswerInputType = {}));

function deserializeIntoMeetingRegistrationQuestion(meetingRegistrationQuestion = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(meetingRegistrationQuestion)), { "answerInputType": n => { meetingRegistrationQuestion.answerInputType = n.getEnumValue(AnswerInputType); }, "answerOptions": n => { meetingRegistrationQuestion.answerOptions = n.getCollectionOfPrimitiveValues(); }, "displayName": n => { meetingRegistrationQuestion.displayName = n.getStringValue(); }, "isRequired": n => { meetingRegistrationQuestion.isRequired = n.getBooleanValue(); } });
}

function deserializeIntoMeetingSpeaker(meetingSpeaker = {}) {
    return {
        "bio": n => { meetingSpeaker.bio = n.getStringValue(); },
        "displayName": n => { meetingSpeaker.displayName = n.getStringValue(); },
    };
}

function deserializeIntoMeetingRegistration(meetingRegistration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoMeetingRegistrationBase(meetingRegistration)), { "customQuestions": n => { meetingRegistration.customQuestions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingRegistrationQuestion); }, "description": n => { meetingRegistration.description = n.getStringValue(); }, "endDateTime": n => { meetingRegistration.endDateTime = n.getDateValue(); }, "registrationPageViewCount": n => { meetingRegistration.registrationPageViewCount = n.getNumberValue(); }, "registrationPageWebUrl": n => { meetingRegistration.registrationPageWebUrl = n.getStringValue(); }, "speakers": n => { meetingRegistration.speakers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingSpeaker); }, "startDateTime": n => { meetingRegistration.startDateTime = n.getDateValue(); }, "subject": n => { meetingRegistration.subject = n.getStringValue(); } });
}

function deserializeIntoVirtualAppointmentSettings(virtualAppointmentSettings = {}) {
    return {
        "allowClientToJoinUsingBrowser": n => { virtualAppointmentSettings.allowClientToJoinUsingBrowser = n.getBooleanValue(); },
    };
}

function deserializeIntoVirtualAppointmentUser(virtualAppointmentUser = {}) {
    return {
        "displayName": n => { virtualAppointmentUser.displayName = n.getStringValue(); },
        "emailAddress": n => { virtualAppointmentUser.emailAddress = n.getStringValue(); },
        "smsCapablePhoneNumber": n => { virtualAppointmentUser.smsCapablePhoneNumber = n.getStringValue(); },
    };
}

function deserializeIntoVirtualAppointment(virtualAppointment = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(virtualAppointment)), { "appointmentClientJoinWebUrl": n => { virtualAppointment.appointmentClientJoinWebUrl = n.getStringValue(); }, "appointmentClients": n => { virtualAppointment.appointmentClients = n.getCollectionOfObjectValuesFromMethod(deserializeIntoVirtualAppointmentUser); }, "externalAppointmentId": n => { virtualAppointment.externalAppointmentId = n.getStringValue(); }, "externalAppointmentUrl": n => { virtualAppointment.externalAppointmentUrl = n.getStringValue(); }, "settings": n => { virtualAppointment.settings = n.getObject(deserializeIntoVirtualAppointmentSettings); } });
}

var MeetingCapabilities;
(function (MeetingCapabilities) {
    MeetingCapabilities["QuestionAndAnswer"] = "questionAndAnswer";
    MeetingCapabilities["UnknownFutureValue"] = "unknownFutureValue";
})(MeetingCapabilities || (MeetingCapabilities = {}));

var OnlineMeetingPresenters;
(function (OnlineMeetingPresenters) {
    OnlineMeetingPresenters["Everyone"] = "everyone";
    OnlineMeetingPresenters["Organization"] = "organization";
    OnlineMeetingPresenters["RoleIsPresenter"] = "roleIsPresenter";
    OnlineMeetingPresenters["Organizer"] = "organizer";
    OnlineMeetingPresenters["UnknownFutureValue"] = "unknownFutureValue";
})(OnlineMeetingPresenters || (OnlineMeetingPresenters = {}));

function deserializeIntoOnlineMeeting(onlineMeeting = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(onlineMeeting)), { "allowAttendeeToEnableCamera": n => { onlineMeeting.allowAttendeeToEnableCamera = n.getBooleanValue(); }, "allowAttendeeToEnableMic": n => { onlineMeeting.allowAttendeeToEnableMic = n.getBooleanValue(); }, "allowedPresenters": n => { onlineMeeting.allowedPresenters = n.getEnumValue(OnlineMeetingPresenters); }, "allowTeamworkReactions": n => { onlineMeeting.allowTeamworkReactions = n.getBooleanValue(); }, "alternativeRecording": n => { onlineMeeting.alternativeRecording = n.getStringValue(); }, "anonymizeIdentityForRoles": n => { onlineMeeting.anonymizeIdentityForRoles = n.getEnumValues(OnlineMeetingRole); }, "attendanceReports": n => { onlineMeeting.attendanceReports = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMeetingAttendanceReport); }, "attendeeReport": n => { onlineMeeting.attendeeReport = n.getStringValue(); }, "audioConferencing": n => { onlineMeeting.audioConferencing = n.getObject(deserializeIntoAudioConferencing); }, "broadcastSettings": n => { onlineMeeting.broadcastSettings = n.getObject(deserializeIntoBroadcastMeetingSettings); }, "capabilities": n => { onlineMeeting.capabilities = n.getEnumValues(MeetingCapabilities); }, "chatInfo": n => { onlineMeeting.chatInfo = n.getObject(deserializeIntoChatInfo); }, "creationDateTime": n => { onlineMeeting.creationDateTime = n.getDateValue(); }, "endDateTime": n => { onlineMeeting.endDateTime = n.getDateValue(); }, "externalId": n => { onlineMeeting.externalId = n.getStringValue(); }, "isBroadcast": n => { onlineMeeting.isBroadcast = n.getBooleanValue(); }, "isEntryExitAnnounced": n => { onlineMeeting.isEntryExitAnnounced = n.getBooleanValue(); }, "joinInformation": n => { onlineMeeting.joinInformation = n.getObject(deserializeIntoItemBody); }, "joinMeetingIdSettings": n => { onlineMeeting.joinMeetingIdSettings = n.getObject(deserializeIntoJoinMeetingIdSettings); }, "joinUrl": n => { onlineMeeting.joinUrl = n.getStringValue(); }, "joinWebUrl": n => { onlineMeeting.joinWebUrl = n.getStringValue(); }, "lobbyBypassSettings": n => { onlineMeeting.lobbyBypassSettings = n.getObject(deserializeIntoLobbyBypassSettings); }, "meetingAttendanceReport": n => { onlineMeeting.meetingAttendanceReport = n.getObject(deserializeIntoMeetingAttendanceReport); }, "participants": n => { onlineMeeting.participants = n.getObject(deserializeIntoMeetingParticipants); }, "recordAutomatically": n => { onlineMeeting.recordAutomatically = n.getBooleanValue(); }, "recording": n => { onlineMeeting.recording = n.getStringValue(); }, "registration": n => { onlineMeeting.registration = n.getObject(deserializeIntoMeetingRegistration); }, "startDateTime": n => { onlineMeeting.startDateTime = n.getDateValue(); }, "subject": n => { onlineMeeting.subject = n.getStringValue(); }, "transcripts": n => { onlineMeeting.transcripts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCallTranscript); }, "videoTeleconferenceId": n => { onlineMeeting.videoTeleconferenceId = n.getStringValue(); }, "virtualAppointment": n => { onlineMeeting.virtualAppointment = n.getObject(deserializeIntoVirtualAppointment); } });
}

var CategoryColor;
(function (CategoryColor) {
    CategoryColor["None"] = "none";
    CategoryColor["Preset0"] = "preset0";
    CategoryColor["Preset1"] = "preset1";
    CategoryColor["Preset2"] = "preset2";
    CategoryColor["Preset3"] = "preset3";
    CategoryColor["Preset4"] = "preset4";
    CategoryColor["Preset5"] = "preset5";
    CategoryColor["Preset6"] = "preset6";
    CategoryColor["Preset7"] = "preset7";
    CategoryColor["Preset8"] = "preset8";
    CategoryColor["Preset9"] = "preset9";
    CategoryColor["Preset10"] = "preset10";
    CategoryColor["Preset11"] = "preset11";
    CategoryColor["Preset12"] = "preset12";
    CategoryColor["Preset13"] = "preset13";
    CategoryColor["Preset14"] = "preset14";
    CategoryColor["Preset15"] = "preset15";
    CategoryColor["Preset16"] = "preset16";
    CategoryColor["Preset17"] = "preset17";
    CategoryColor["Preset18"] = "preset18";
    CategoryColor["Preset19"] = "preset19";
    CategoryColor["Preset20"] = "preset20";
    CategoryColor["Preset21"] = "preset21";
    CategoryColor["Preset22"] = "preset22";
    CategoryColor["Preset23"] = "preset23";
    CategoryColor["Preset24"] = "preset24";
})(CategoryColor || (CategoryColor = {}));

function deserializeIntoOutlookCategory(outlookCategory = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(outlookCategory)), { "color": n => { outlookCategory.color = n.getEnumValue(CategoryColor); }, "displayName": n => { outlookCategory.displayName = n.getStringValue(); } });
}

var TaskStatus;
(function (TaskStatus) {
    TaskStatus["NotStarted"] = "notStarted";
    TaskStatus["InProgress"] = "inProgress";
    TaskStatus["Completed"] = "completed";
    TaskStatus["WaitingOnOthers"] = "waitingOnOthers";
    TaskStatus["Deferred"] = "deferred";
})(TaskStatus || (TaskStatus = {}));

function deserializeIntoOutlookTask(outlookTask = {}) {
    return Object.assign(Object.assign({}, deserializeIntoOutlookItem(outlookTask)), { "assignedTo": n => { outlookTask.assignedTo = n.getStringValue(); }, "attachments": n => { outlookTask.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachment); }, "body": n => { outlookTask.body = n.getObject(deserializeIntoItemBody); }, "completedDateTime": n => { outlookTask.completedDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "dueDateTime": n => { outlookTask.dueDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "hasAttachments": n => { outlookTask.hasAttachments = n.getBooleanValue(); }, "importance": n => { outlookTask.importance = n.getEnumValue(Importance); }, "isReminderOn": n => { outlookTask.isReminderOn = n.getBooleanValue(); }, "multiValueExtendedProperties": n => { outlookTask.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "owner": n => { outlookTask.owner = n.getStringValue(); }, "parentFolderId": n => { outlookTask.parentFolderId = n.getStringValue(); }, "recurrence": n => { outlookTask.recurrence = n.getObject(deserializeIntoPatternedRecurrence); }, "reminderDateTime": n => { outlookTask.reminderDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "sensitivity": n => { outlookTask.sensitivity = n.getEnumValue(Sensitivity); }, "singleValueExtendedProperties": n => { outlookTask.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "startDateTime": n => { outlookTask.startDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "status": n => { outlookTask.status = n.getEnumValue(TaskStatus); }, "subject": n => { outlookTask.subject = n.getStringValue(); } });
}

function deserializeIntoOutlookTaskFolder(outlookTaskFolder = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(outlookTaskFolder)), { "changeKey": n => { outlookTaskFolder.changeKey = n.getStringValue(); }, "isDefaultFolder": n => { outlookTaskFolder.isDefaultFolder = n.getBooleanValue(); }, "multiValueExtendedProperties": n => { outlookTaskFolder.multiValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); }, "name": n => { outlookTaskFolder.name = n.getStringValue(); }, "parentGroupKey": n => { outlookTaskFolder.parentGroupKey = n.getStringValue(); }, "singleValueExtendedProperties": n => { outlookTaskFolder.singleValueExtendedProperties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); }, "tasks": n => { outlookTaskFolder.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTask); } });
}

function deserializeIntoOutlookTaskGroup(outlookTaskGroup = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(outlookTaskGroup)), { "changeKey": n => { outlookTaskGroup.changeKey = n.getStringValue(); }, "groupKey": n => { outlookTaskGroup.groupKey = n.getStringValue(); }, "isDefaultGroup": n => { outlookTaskGroup.isDefaultGroup = n.getBooleanValue(); }, "name": n => { outlookTaskGroup.name = n.getStringValue(); }, "taskFolders": n => { outlookTaskGroup.taskFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTaskFolder); } });
}

function deserializeIntoOutlookUser(outlookUser = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(outlookUser)), { "masterCategories": n => { outlookUser.masterCategories = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookCategory); }, "taskFolders": n => { outlookUser.taskFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTaskFolder); }, "taskGroups": n => { outlookUser.taskGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTaskGroup); }, "tasks": n => { outlookUser.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTask); } });
}

function deserializeIntoPasswordProfile(passwordProfile = {}) {
    return {
        "forceChangePasswordNextSignIn": n => { passwordProfile.forceChangePasswordNextSignIn = n.getBooleanValue(); },
        "forceChangePasswordNextSignInWithMfa": n => { passwordProfile.forceChangePasswordNextSignInWithMfa = n.getBooleanValue(); },
        "password": n => { passwordProfile.password = n.getStringValue(); },
    };
}

function deserializeIntoPersonDataSource(personDataSource = {}) {
    return {
        "type": n => { personDataSource.type = n.getStringValue(); },
    };
}

function deserializeIntoRankedEmailAddress(rankedEmailAddress = {}) {
    return {
        "address": n => { rankedEmailAddress.address = n.getStringValue(); },
        "rank": n => { rankedEmailAddress.rank = n.getNumberValue(); },
    };
}

function deserializeIntoPerson(person = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(person)), { "birthday": n => { person.birthday = n.getStringValue(); }, "companyName": n => { person.companyName = n.getStringValue(); }, "department": n => { person.department = n.getStringValue(); }, "displayName": n => { person.displayName = n.getStringValue(); }, "emailAddresses": n => { person.emailAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRankedEmailAddress); }, "givenName": n => { person.givenName = n.getStringValue(); }, "isFavorite": n => { person.isFavorite = n.getBooleanValue(); }, "mailboxType": n => { person.mailboxType = n.getStringValue(); }, "officeLocation": n => { person.officeLocation = n.getStringValue(); }, "personNotes": n => { person.personNotes = n.getStringValue(); }, "personType": n => { person.personType = n.getStringValue(); }, "phones": n => { person.phones = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPhone); }, "postalAddresses": n => { person.postalAddresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocation); }, "profession": n => { person.profession = n.getStringValue(); }, "sources": n => { person.sources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonDataSource); }, "surname": n => { person.surname = n.getStringValue(); }, "title": n => { person.title = n.getStringValue(); }, "userPrincipalName": n => { person.userPrincipalName = n.getStringValue(); }, "websites": n => { person.websites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWebsite); }, "yomiCompany": n => { person.yomiCompany = n.getStringValue(); } });
}

function deserializeIntoPlannerFavoritePlanReferenceCollection(plannerFavoritePlanReferenceCollection = {}) {
    return {};
}

function deserializeIntoPlannerRecentPlanReferenceCollection(plannerRecentPlanReferenceCollection = {}) {
    return {};
}

function deserializeIntoPlannerUser(plannerUser = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPlannerDelta(plannerUser)), { "all": n => { plannerUser.all = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerDelta); }, "favoritePlanReferences": n => { plannerUser.favoritePlanReferences = n.getObject(deserializeIntoPlannerFavoritePlanReferenceCollection); }, "favoritePlans": n => { plannerUser.favoritePlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerPlan); }, "plans": n => { plannerUser.plans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerPlan); }, "recentPlanReferences": n => { plannerUser.recentPlanReferences = n.getObject(deserializeIntoPlannerRecentPlanReferenceCollection); }, "recentPlans": n => { plannerUser.recentPlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerPlan); }, "rosterPlans": n => { plannerUser.rosterPlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerPlan); }, "tasks": n => { plannerUser.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPlannerTask); } });
}

function deserializeIntoOutOfOfficeSettings(outOfOfficeSettings = {}) {
    return {
        "isOutOfOffice": n => { outOfOfficeSettings.isOutOfOffice = n.getBooleanValue(); },
        "message": n => { outOfOfficeSettings.message = n.getStringValue(); },
    };
}

function deserializeIntoPresence(presence = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(presence)), { "activity": n => { presence.activity = n.getStringValue(); }, "availability": n => { presence.availability = n.getStringValue(); }, "outOfOfficeSettings": n => { presence.outOfOfficeSettings = n.getObject(deserializeIntoOutOfOfficeSettings); } });
}

function deserializeIntoEducationalActivityDetail(educationalActivityDetail = {}) {
    return {
        "abbreviation": n => { educationalActivityDetail.abbreviation = n.getStringValue(); },
        "activities": n => { educationalActivityDetail.activities = n.getCollectionOfPrimitiveValues(); },
        "awards": n => { educationalActivityDetail.awards = n.getCollectionOfPrimitiveValues(); },
        "description": n => { educationalActivityDetail.description = n.getStringValue(); },
        "displayName": n => { educationalActivityDetail.displayName = n.getStringValue(); },
        "fieldsOfStudy": n => { educationalActivityDetail.fieldsOfStudy = n.getCollectionOfPrimitiveValues(); },
        "grade": n => { educationalActivityDetail.grade = n.getStringValue(); },
        "notes": n => { educationalActivityDetail.notes = n.getStringValue(); },
        "webUrl": n => { educationalActivityDetail.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoInstitutionData(institutionData = {}) {
    return {
        "description": n => { institutionData.description = n.getStringValue(); },
        "displayName": n => { institutionData.displayName = n.getStringValue(); },
        "location": n => { institutionData.location = n.getObject(deserializeIntoPhysicalAddress); },
        "webUrl": n => { institutionData.webUrl = n.getStringValue(); },
    };
}

var AllowedAudiences;
(function (AllowedAudiences) {
    AllowedAudiences["Me"] = "me";
    AllowedAudiences["Family"] = "family";
    AllowedAudiences["Contacts"] = "contacts";
    AllowedAudiences["GroupMembers"] = "groupMembers";
    AllowedAudiences["Organization"] = "organization";
    AllowedAudiences["FederatedOrganizations"] = "federatedOrganizations";
    AllowedAudiences["Everyone"] = "everyone";
    AllowedAudiences["UnknownFutureValue"] = "unknownFutureValue";
})(AllowedAudiences || (AllowedAudiences = {}));

function deserializeIntoInferenceData(inferenceData = {}) {
    return {
        "confidenceScore": n => { inferenceData.confidenceScore = n.getNumberValue(); },
        "userHasVerifiedAccuracy": n => { inferenceData.userHasVerifiedAccuracy = n.getBooleanValue(); },
    };
}

function deserializeIntoPersonDataSources(personDataSources = {}) {
    return {
        "type": n => { personDataSources.type = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoItemFacet(itemFacet = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(itemFacet)), { "allowedAudiences": n => { itemFacet.allowedAudiences = n.getEnumValue(AllowedAudiences); }, "createdBy": n => { itemFacet.createdBy = n.getObject(deserializeIntoIdentitySet); }, "createdDateTime": n => { itemFacet.createdDateTime = n.getDateValue(); }, "inference": n => { itemFacet.inference = n.getObject(deserializeIntoInferenceData); }, "isSearchable": n => { itemFacet.isSearchable = n.getBooleanValue(); }, "lastModifiedBy": n => { itemFacet.lastModifiedBy = n.getObject(deserializeIntoIdentitySet); }, "lastModifiedDateTime": n => { itemFacet.lastModifiedDateTime = n.getDateValue(); }, "source": n => { itemFacet.source = n.getObject(deserializeIntoPersonDataSources); } });
}

function deserializeIntoEducationalActivity(educationalActivity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(educationalActivity)), { "completionMonthYear": n => { educationalActivity.completionMonthYear = n.getDateOnlyValue(); }, "endMonthYear": n => { educationalActivity.endMonthYear = n.getDateOnlyValue(); }, "institution": n => { educationalActivity.institution = n.getObject(deserializeIntoInstitutionData); }, "program": n => { educationalActivity.program = n.getObject(deserializeIntoEducationalActivityDetail); }, "startMonthYear": n => { educationalActivity.startMonthYear = n.getDateOnlyValue(); } });
}

function deserializeIntoItemAddress(itemAddress = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(itemAddress)), { "detail": n => { itemAddress.detail = n.getObject(deserializeIntoPhysicalAddress); }, "displayName": n => { itemAddress.displayName = n.getStringValue(); }, "geoCoordinates": n => { itemAddress.geoCoordinates = n.getObject(deserializeIntoGeoCoordinates); } });
}

function deserializeIntoItemEmail(itemEmail = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(itemEmail)), { "address": n => { itemEmail.address = n.getStringValue(); }, "displayName": n => { itemEmail.displayName = n.getStringValue(); }, "type": n => { itemEmail.type = n.getEnumValue(EmailType); } });
}

function deserializeIntoItemPatent(itemPatent = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(itemPatent)), { "description": n => { itemPatent.description = n.getStringValue(); }, "displayName": n => { itemPatent.displayName = n.getStringValue(); }, "isPending": n => { itemPatent.isPending = n.getBooleanValue(); }, "issuedDate": n => { itemPatent.issuedDate = n.getDateOnlyValue(); }, "issuingAuthority": n => { itemPatent.issuingAuthority = n.getStringValue(); }, "number": n => { itemPatent.number = n.getStringValue(); }, "webUrl": n => { itemPatent.webUrl = n.getStringValue(); } });
}

function deserializeIntoItemPhone(itemPhone = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(itemPhone)), { "displayName": n => { itemPhone.displayName = n.getStringValue(); }, "number": n => { itemPhone.number = n.getStringValue(); }, "type": n => { itemPhone.type = n.getEnumValue(PhoneType); } });
}

function deserializeIntoItemPublication(itemPublication = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(itemPublication)), { "description": n => { itemPublication.description = n.getStringValue(); }, "displayName": n => { itemPublication.displayName = n.getStringValue(); }, "publishedDate": n => { itemPublication.publishedDate = n.getDateOnlyValue(); }, "publisher": n => { itemPublication.publisher = n.getStringValue(); }, "thumbnailUrl": n => { itemPublication.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { itemPublication.webUrl = n.getStringValue(); } });
}

var LanguageProficiencyLevel;
(function (LanguageProficiencyLevel) {
    LanguageProficiencyLevel["Elementary"] = "elementary";
    LanguageProficiencyLevel["Conversational"] = "conversational";
    LanguageProficiencyLevel["LimitedWorking"] = "limitedWorking";
    LanguageProficiencyLevel["ProfessionalWorking"] = "professionalWorking";
    LanguageProficiencyLevel["FullProfessional"] = "fullProfessional";
    LanguageProficiencyLevel["NativeOrBilingual"] = "nativeOrBilingual";
    LanguageProficiencyLevel["UnknownFutureValue"] = "unknownFutureValue";
})(LanguageProficiencyLevel || (LanguageProficiencyLevel = {}));

function deserializeIntoLanguageProficiency(languageProficiency = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(languageProficiency)), { "displayName": n => { languageProficiency.displayName = n.getStringValue(); }, "proficiency": n => { languageProficiency.proficiency = n.getEnumValue(LanguageProficiencyLevel); }, "reading": n => { languageProficiency.reading = n.getEnumValue(LanguageProficiencyLevel); }, "spoken": n => { languageProficiency.spoken = n.getEnumValue(LanguageProficiencyLevel); }, "tag": n => { languageProficiency.tag = n.getStringValue(); }, "thumbnailUrl": n => { languageProficiency.thumbnailUrl = n.getStringValue(); }, "written": n => { languageProficiency.written = n.getEnumValue(LanguageProficiencyLevel); } });
}

function deserializeIntoPersonAnnotation(personAnnotation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personAnnotation)), { "detail": n => { personAnnotation.detail = n.getObject(deserializeIntoItemBody); }, "displayName": n => { personAnnotation.displayName = n.getStringValue(); }, "thumbnailUrl": n => { personAnnotation.thumbnailUrl = n.getStringValue(); } });
}

var PersonAnnualEventType;
(function (PersonAnnualEventType) {
    PersonAnnualEventType["Birthday"] = "birthday";
    PersonAnnualEventType["Wedding"] = "wedding";
    PersonAnnualEventType["Work"] = "work";
    PersonAnnualEventType["Other"] = "other";
    PersonAnnualEventType["UnknownFutureValue"] = "unknownFutureValue";
})(PersonAnnualEventType || (PersonAnnualEventType = {}));

function deserializeIntoPersonAnnualEvent(personAnnualEvent = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personAnnualEvent)), { "date": n => { personAnnualEvent.date = n.getDateOnlyValue(); }, "displayName": n => { personAnnualEvent.displayName = n.getStringValue(); }, "type": n => { personAnnualEvent.type = n.getEnumValue(PersonAnnualEventType); } });
}

function deserializeIntoPersonAward(personAward = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personAward)), { "description": n => { personAward.description = n.getStringValue(); }, "displayName": n => { personAward.displayName = n.getStringValue(); }, "issuedDate": n => { personAward.issuedDate = n.getDateOnlyValue(); }, "issuingAuthority": n => { personAward.issuingAuthority = n.getStringValue(); }, "thumbnailUrl": n => { personAward.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { personAward.webUrl = n.getStringValue(); } });
}

function deserializeIntoPersonCertification(personCertification = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personCertification)), { "certificationId": n => { personCertification.certificationId = n.getStringValue(); }, "description": n => { personCertification.description = n.getStringValue(); }, "displayName": n => { personCertification.displayName = n.getStringValue(); }, "endDate": n => { personCertification.endDate = n.getDateOnlyValue(); }, "issuedDate": n => { personCertification.issuedDate = n.getDateOnlyValue(); }, "issuingAuthority": n => { personCertification.issuingAuthority = n.getStringValue(); }, "issuingCompany": n => { personCertification.issuingCompany = n.getStringValue(); }, "startDate": n => { personCertification.startDate = n.getDateOnlyValue(); }, "thumbnailUrl": n => { personCertification.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { personCertification.webUrl = n.getStringValue(); } });
}

function deserializeIntoPersonInterest(personInterest = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personInterest)), { "categories": n => { personInterest.categories = n.getCollectionOfPrimitiveValues(); }, "collaborationTags": n => { personInterest.collaborationTags = n.getCollectionOfPrimitiveValues(); }, "description": n => { personInterest.description = n.getStringValue(); }, "displayName": n => { personInterest.displayName = n.getStringValue(); }, "thumbnailUrl": n => { personInterest.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { personInterest.webUrl = n.getStringValue(); } });
}

function deserializeIntoPersonNamePronounciation(personNamePronounciation = {}) {
    return {
        "displayName": n => { personNamePronounciation.displayName = n.getStringValue(); },
        "first": n => { personNamePronounciation.first = n.getStringValue(); },
        "last": n => { personNamePronounciation.last = n.getStringValue(); },
        "maiden": n => { personNamePronounciation.maiden = n.getStringValue(); },
        "middle": n => { personNamePronounciation.middle = n.getStringValue(); },
    };
}

function deserializeIntoPersonName(personName = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personName)), { "displayName": n => { personName.displayName = n.getStringValue(); }, "first": n => { personName.first = n.getStringValue(); }, "initials": n => { personName.initials = n.getStringValue(); }, "languageTag": n => { personName.languageTag = n.getStringValue(); }, "last": n => { personName.last = n.getStringValue(); }, "maiden": n => { personName.maiden = n.getStringValue(); }, "middle": n => { personName.middle = n.getStringValue(); }, "nickname": n => { personName.nickname = n.getStringValue(); }, "pronunciation": n => { personName.pronunciation = n.getObject(deserializeIntoPersonNamePronounciation); }, "suffix": n => { personName.suffix = n.getStringValue(); }, "title": n => { personName.title = n.getStringValue(); } });
}

function deserializeIntoPersonWebsite(personWebsite = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(personWebsite)), { "categories": n => { personWebsite.categories = n.getCollectionOfPrimitiveValues(); }, "description": n => { personWebsite.description = n.getStringValue(); }, "displayName": n => { personWebsite.displayName = n.getStringValue(); }, "thumbnailUrl": n => { personWebsite.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { personWebsite.webUrl = n.getStringValue(); } });
}

function deserializeIntoCompanyDetail(companyDetail = {}) {
    return {
        "address": n => { companyDetail.address = n.getObject(deserializeIntoPhysicalAddress); },
        "department": n => { companyDetail.department = n.getStringValue(); },
        "displayName": n => { companyDetail.displayName = n.getStringValue(); },
        "officeLocation": n => { companyDetail.officeLocation = n.getStringValue(); },
        "pronunciation": n => { companyDetail.pronunciation = n.getStringValue(); },
        "webUrl": n => { companyDetail.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoPositionDetail(positionDetail = {}) {
    return {
        "company": n => { positionDetail.company = n.getObject(deserializeIntoCompanyDetail); },
        "description": n => { positionDetail.description = n.getStringValue(); },
        "endMonthYear": n => { positionDetail.endMonthYear = n.getDateOnlyValue(); },
        "jobTitle": n => { positionDetail.jobTitle = n.getStringValue(); },
        "role": n => { positionDetail.role = n.getStringValue(); },
        "startMonthYear": n => { positionDetail.startMonthYear = n.getDateOnlyValue(); },
        "summary": n => { positionDetail.summary = n.getStringValue(); },
    };
}

var PersonRelationship;
(function (PersonRelationship) {
    PersonRelationship["Manager"] = "manager";
    PersonRelationship["Colleague"] = "colleague";
    PersonRelationship["DirectReport"] = "directReport";
    PersonRelationship["DotLineReport"] = "dotLineReport";
    PersonRelationship["Assistant"] = "assistant";
    PersonRelationship["DotLineManager"] = "dotLineManager";
    PersonRelationship["AlternateContact"] = "alternateContact";
    PersonRelationship["Friend"] = "friend";
    PersonRelationship["Spouse"] = "spouse";
    PersonRelationship["Sibling"] = "sibling";
    PersonRelationship["Child"] = "child";
    PersonRelationship["Parent"] = "parent";
    PersonRelationship["Sponsor"] = "sponsor";
    PersonRelationship["EmergencyContact"] = "emergencyContact";
    PersonRelationship["Other"] = "other";
    PersonRelationship["UnknownFutureValue"] = "unknownFutureValue";
})(PersonRelationship || (PersonRelationship = {}));

function deserializeIntoRelatedPerson(relatedPerson = {}) {
    return {
        "displayName": n => { relatedPerson.displayName = n.getStringValue(); },
        "relationship": n => { relatedPerson.relationship = n.getEnumValue(PersonRelationship); },
        "userPrincipalName": n => { relatedPerson.userPrincipalName = n.getStringValue(); },
    };
}

function deserializeIntoProjectParticipation(projectParticipation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(projectParticipation)), { "categories": n => { projectParticipation.categories = n.getCollectionOfPrimitiveValues(); }, "client": n => { projectParticipation.client = n.getObject(deserializeIntoCompanyDetail); }, "collaborationTags": n => { projectParticipation.collaborationTags = n.getCollectionOfPrimitiveValues(); }, "colleagues": n => { projectParticipation.colleagues = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRelatedPerson); }, "detail": n => { projectParticipation.detail = n.getObject(deserializeIntoPositionDetail); }, "displayName": n => { projectParticipation.displayName = n.getStringValue(); }, "sponsors": n => { projectParticipation.sponsors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRelatedPerson); }, "thumbnailUrl": n => { projectParticipation.thumbnailUrl = n.getStringValue(); } });
}

var SkillProficiencyLevel;
(function (SkillProficiencyLevel) {
    SkillProficiencyLevel["Elementary"] = "elementary";
    SkillProficiencyLevel["LimitedWorking"] = "limitedWorking";
    SkillProficiencyLevel["GeneralProfessional"] = "generalProfessional";
    SkillProficiencyLevel["AdvancedProfessional"] = "advancedProfessional";
    SkillProficiencyLevel["Expert"] = "expert";
    SkillProficiencyLevel["UnknownFutureValue"] = "unknownFutureValue";
})(SkillProficiencyLevel || (SkillProficiencyLevel = {}));

function deserializeIntoSkillProficiency(skillProficiency = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(skillProficiency)), { "categories": n => { skillProficiency.categories = n.getCollectionOfPrimitiveValues(); }, "collaborationTags": n => { skillProficiency.collaborationTags = n.getCollectionOfPrimitiveValues(); }, "displayName": n => { skillProficiency.displayName = n.getStringValue(); }, "proficiency": n => { skillProficiency.proficiency = n.getEnumValue(SkillProficiencyLevel); }, "thumbnailUrl": n => { skillProficiency.thumbnailUrl = n.getStringValue(); }, "webUrl": n => { skillProficiency.webUrl = n.getStringValue(); } });
}

function deserializeIntoUserAccountInformation(userAccountInformation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(userAccountInformation)), { "ageGroup": n => { userAccountInformation.ageGroup = n.getStringValue(); }, "countryCode": n => { userAccountInformation.countryCode = n.getStringValue(); }, "preferredLanguageTag": n => { userAccountInformation.preferredLanguageTag = n.getObject(deserializeIntoLocaleInfo); }, "userPrincipalName": n => { userAccountInformation.userPrincipalName = n.getStringValue(); } });
}

function deserializeIntoServiceInformation(serviceInformation = {}) {
    return {
        "name": n => { serviceInformation.name = n.getStringValue(); },
        "webUrl": n => { serviceInformation.webUrl = n.getStringValue(); },
    };
}

function deserializeIntoWebAccount(webAccount = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(webAccount)), { "description": n => { webAccount.description = n.getStringValue(); }, "service": n => { webAccount.service = n.getObject(deserializeIntoServiceInformation); }, "statusMessage": n => { webAccount.statusMessage = n.getStringValue(); }, "thumbnailUrl": n => { webAccount.thumbnailUrl = n.getStringValue(); }, "userId": n => { webAccount.userId = n.getStringValue(); }, "webUrl": n => { webAccount.webUrl = n.getStringValue(); } });
}

function deserializeIntoWorkPosition(workPosition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoItemFacet(workPosition)), { "categories": n => { workPosition.categories = n.getCollectionOfPrimitiveValues(); }, "colleagues": n => { workPosition.colleagues = n.getCollectionOfObjectValuesFromMethod(deserializeIntoRelatedPerson); }, "detail": n => { workPosition.detail = n.getObject(deserializeIntoPositionDetail); }, "isCurrent": n => { workPosition.isCurrent = n.getBooleanValue(); }, "manager": n => { workPosition.manager = n.getObject(deserializeIntoRelatedPerson); } });
}

function deserializeIntoProfile(profile = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(profile)), { "account": n => { profile.account = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUserAccountInformation); }, "addresses": n => { profile.addresses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemAddress); }, "anniversaries": n => { profile.anniversaries = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonAnnualEvent); }, "awards": n => { profile.awards = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonAward); }, "certifications": n => { profile.certifications = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonCertification); }, "educationalActivities": n => { profile.educationalActivities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEducationalActivity); }, "emails": n => { profile.emails = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemEmail); }, "interests": n => { profile.interests = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonInterest); }, "languages": n => { profile.languages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLanguageProficiency); }, "names": n => { profile.names = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonName); }, "notes": n => { profile.notes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonAnnotation); }, "patents": n => { profile.patents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemPatent); }, "phones": n => { profile.phones = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemPhone); }, "positions": n => { profile.positions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWorkPosition); }, "projects": n => { profile.projects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoProjectParticipation); }, "publications": n => { profile.publications = n.getCollectionOfObjectValuesFromMethod(deserializeIntoItemPublication); }, "skills": n => { profile.skills = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSkillProficiency); }, "webAccounts": n => { profile.webAccounts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWebAccount); }, "websites": n => { profile.websites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPersonWebsite); } });
}

function deserializeIntoProvisionedPlan(provisionedPlan = {}) {
    return {
        "capabilityStatus": n => { provisionedPlan.capabilityStatus = n.getStringValue(); },
        "provisioningStatus": n => { provisionedPlan.provisioningStatus = n.getStringValue(); },
        "service": n => { provisionedPlan.service = n.getStringValue(); },
    };
}

function deserializeIntoScopedRoleMembership(scopedRoleMembership = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(scopedRoleMembership)), { "administrativeUnitId": n => { scopedRoleMembership.administrativeUnitId = n.getStringValue(); }, "roleId": n => { scopedRoleMembership.roleId = n.getStringValue(); }, "roleMemberInfo": n => { scopedRoleMembership.roleMemberInfo = n.getObject(deserializeIntoIdentity); } });
}

function deserializeIntoAddIn(addIn = {}) {
    return {
        "id": n => { addIn.id = n.getStringValue(); },
        "properties": n => { addIn.properties = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValue); },
        "type": n => { addIn.type = n.getStringValue(); },
    };
}

var AppKeyCredentialRestrictionType;
(function (AppKeyCredentialRestrictionType) {
    AppKeyCredentialRestrictionType["AsymmetricKeyLifetime"] = "asymmetricKeyLifetime";
    AppKeyCredentialRestrictionType["UnknownFutureValue"] = "unknownFutureValue";
})(AppKeyCredentialRestrictionType || (AppKeyCredentialRestrictionType = {}));

function deserializeIntoKeyCredentialConfiguration(keyCredentialConfiguration = {}) {
    return {
        "maxLifetime": n => { keyCredentialConfiguration.maxLifetime = n.getDurationValue(); },
        "restrictForAppsCreatedAfterDateTime": n => { keyCredentialConfiguration.restrictForAppsCreatedAfterDateTime = n.getDateValue(); },
        "restrictionType": n => { keyCredentialConfiguration.restrictionType = n.getEnumValue(AppKeyCredentialRestrictionType); },
    };
}

var AppCredentialRestrictionType;
(function (AppCredentialRestrictionType) {
    AppCredentialRestrictionType["PasswordAddition"] = "passwordAddition";
    AppCredentialRestrictionType["PasswordLifetime"] = "passwordLifetime";
    AppCredentialRestrictionType["SymmetricKeyAddition"] = "symmetricKeyAddition";
    AppCredentialRestrictionType["SymmetricKeyLifetime"] = "symmetricKeyLifetime";
    AppCredentialRestrictionType["CustomPasswordAddition"] = "customPasswordAddition";
    AppCredentialRestrictionType["UnknownFutureValue"] = "unknownFutureValue";
})(AppCredentialRestrictionType || (AppCredentialRestrictionType = {}));

function deserializeIntoPasswordCredentialConfiguration(passwordCredentialConfiguration = {}) {
    return {
        "maxLifetime": n => { passwordCredentialConfiguration.maxLifetime = n.getDurationValue(); },
        "restrictForAppsCreatedAfterDateTime": n => { passwordCredentialConfiguration.restrictForAppsCreatedAfterDateTime = n.getDateValue(); },
        "restrictionType": n => { passwordCredentialConfiguration.restrictionType = n.getEnumValue(AppCredentialRestrictionType); },
    };
}

function deserializeIntoAppManagementConfiguration(appManagementConfiguration = {}) {
    return {
        "keyCredentials": n => { appManagementConfiguration.keyCredentials = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyCredentialConfiguration); },
        "passwordCredentials": n => { appManagementConfiguration.passwordCredentials = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPasswordCredentialConfiguration); },
    };
}

function deserializeIntoPolicyBase(policyBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(policyBase)), { "description": n => { policyBase.description = n.getStringValue(); }, "displayName": n => { policyBase.displayName = n.getStringValue(); } });
}

function deserializeIntoAppManagementPolicy(appManagementPolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPolicyBase(appManagementPolicy)), { "appliesTo": n => { appManagementPolicy.appliesTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "isEnabled": n => { appManagementPolicy.isEnabled = n.getBooleanValue(); }, "restrictions": n => { appManagementPolicy.restrictions = n.getObject(deserializeIntoAppManagementConfiguration); } });
}

function deserializeIntoAppRole(appRole = {}) {
    return {
        "allowedMemberTypes": n => { appRole.allowedMemberTypes = n.getCollectionOfPrimitiveValues(); },
        "description": n => { appRole.description = n.getStringValue(); },
        "displayName": n => { appRole.displayName = n.getStringValue(); },
        "id": n => { appRole.id = n.getStringValue(); },
        "isEnabled": n => { appRole.isEnabled = n.getBooleanValue(); },
        "origin": n => { appRole.origin = n.getStringValue(); },
        "value": n => { appRole.value = n.getStringValue(); },
    };
}

function deserializeIntoStsPolicy(stsPolicy = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPolicyBase(stsPolicy)), { "appliesTo": n => { stsPolicy.appliesTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "definition": n => { stsPolicy.definition = n.getCollectionOfPrimitiveValues(); }, "isOrganizationDefault": n => { stsPolicy.isOrganizationDefault = n.getBooleanValue(); } });
}

function deserializeIntoClaimsMappingPolicy(claimsMappingPolicy = {}) {
    return Object.assign({}, deserializeIntoStsPolicy(claimsMappingPolicy));
}

var PermissionClassificationType;
(function (PermissionClassificationType) {
    PermissionClassificationType["Low"] = "low";
    PermissionClassificationType["Medium"] = "medium";
    PermissionClassificationType["High"] = "high";
    PermissionClassificationType["UnknownFutureValue"] = "unknownFutureValue";
})(PermissionClassificationType || (PermissionClassificationType = {}));

function deserializeIntoDelegatedPermissionClassification(delegatedPermissionClassification = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(delegatedPermissionClassification)), { "classification": n => { delegatedPermissionClassification.classification = n.getEnumValue(PermissionClassificationType); }, "permissionId": n => { delegatedPermissionClassification.permissionId = n.getStringValue(); }, "permissionName": n => { delegatedPermissionClassification.permissionName = n.getStringValue(); } });
}

function deserializeIntoFederatedIdentityCredential(federatedIdentityCredential = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(federatedIdentityCredential)), { "audiences": n => { federatedIdentityCredential.audiences = n.getCollectionOfPrimitiveValues(); }, "description": n => { federatedIdentityCredential.description = n.getStringValue(); }, "issuer": n => { federatedIdentityCredential.issuer = n.getStringValue(); }, "name": n => { federatedIdentityCredential.name = n.getStringValue(); }, "subject": n => { federatedIdentityCredential.subject = n.getStringValue(); } });
}

function deserializeIntoHomeRealmDiscoveryPolicy(homeRealmDiscoveryPolicy = {}) {
    return Object.assign({}, deserializeIntoStsPolicy(homeRealmDiscoveryPolicy));
}

function deserializeIntoInformationalUrl(informationalUrl = {}) {
    return {
        "logoUrl": n => { informationalUrl.logoUrl = n.getStringValue(); },
        "marketingUrl": n => { informationalUrl.marketingUrl = n.getStringValue(); },
        "privacyStatementUrl": n => { informationalUrl.privacyStatementUrl = n.getStringValue(); },
        "supportUrl": n => { informationalUrl.supportUrl = n.getStringValue(); },
        "termsOfServiceUrl": n => { informationalUrl.termsOfServiceUrl = n.getStringValue(); },
    };
}

function deserializeIntoKeyCredential(keyCredential = {}) {
    return {
        "customKeyIdentifier": n => { keyCredential.customKeyIdentifier = n.getStringValue(); },
        "displayName": n => { keyCredential.displayName = n.getStringValue(); },
        "endDateTime": n => { keyCredential.endDateTime = n.getDateValue(); },
        "key": n => { keyCredential.key = n.getStringValue(); },
        "keyId": n => { keyCredential.keyId = n.getStringValue(); },
        "startDateTime": n => { keyCredential.startDateTime = n.getDateValue(); },
        "type": n => { keyCredential.type = n.getStringValue(); },
        "usage": n => { keyCredential.usage = n.getStringValue(); },
    };
}

function deserializeIntoPasswordCredential(passwordCredential = {}) {
    return {
        "customKeyIdentifier": n => { passwordCredential.customKeyIdentifier = n.getStringValue(); },
        "displayName": n => { passwordCredential.displayName = n.getStringValue(); },
        "endDateTime": n => { passwordCredential.endDateTime = n.getDateValue(); },
        "hint": n => { passwordCredential.hint = n.getStringValue(); },
        "keyId": n => { passwordCredential.keyId = n.getStringValue(); },
        "secretText": n => { passwordCredential.secretText = n.getStringValue(); },
        "startDateTime": n => { passwordCredential.startDateTime = n.getDateValue(); },
    };
}

function deserializeIntoPasswordSingleSignOnField(passwordSingleSignOnField = {}) {
    return {
        "customizedLabel": n => { passwordSingleSignOnField.customizedLabel = n.getStringValue(); },
        "defaultLabel": n => { passwordSingleSignOnField.defaultLabel = n.getStringValue(); },
        "fieldId": n => { passwordSingleSignOnField.fieldId = n.getStringValue(); },
        "type": n => { passwordSingleSignOnField.type = n.getStringValue(); },
    };
}

function deserializeIntoPasswordSingleSignOnSettings(passwordSingleSignOnSettings = {}) {
    return {
        "fields": n => { passwordSingleSignOnSettings.fields = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPasswordSingleSignOnField); },
    };
}

function deserializeIntoPermissionScope(permissionScope = {}) {
    return {
        "adminConsentDescription": n => { permissionScope.adminConsentDescription = n.getStringValue(); },
        "adminConsentDisplayName": n => { permissionScope.adminConsentDisplayName = n.getStringValue(); },
        "id": n => { permissionScope.id = n.getStringValue(); },
        "isEnabled": n => { permissionScope.isEnabled = n.getBooleanValue(); },
        "origin": n => { permissionScope.origin = n.getStringValue(); },
        "type": n => { permissionScope.type = n.getStringValue(); },
        "userConsentDescription": n => { permissionScope.userConsentDescription = n.getStringValue(); },
        "userConsentDisplayName": n => { permissionScope.userConsentDisplayName = n.getStringValue(); },
        "value": n => { permissionScope.value = n.getStringValue(); },
    };
}

function deserializeIntoSamlSingleSignOnSettings(samlSingleSignOnSettings = {}) {
    return {
        "relayState": n => { samlSingleSignOnSettings.relayState = n.getStringValue(); },
    };
}

var SynchronizationScheduleState;
(function (SynchronizationScheduleState) {
    SynchronizationScheduleState["Active"] = "Active";
    SynchronizationScheduleState["Disabled"] = "Disabled";
    SynchronizationScheduleState["Paused"] = "Paused";
})(SynchronizationScheduleState || (SynchronizationScheduleState = {}));

function deserializeIntoSynchronizationSchedule(synchronizationSchedule = {}) {
    return {
        "expiration": n => { synchronizationSchedule.expiration = n.getDateValue(); },
        "interval": n => { synchronizationSchedule.interval = n.getDurationValue(); },
        "state": n => { synchronizationSchedule.state = n.getEnumValue(SynchronizationScheduleState); },
    };
}

var AttributeType;
(function (AttributeType) {
    AttributeType["String"] = "String";
    AttributeType["Integer"] = "Integer";
    AttributeType["Reference"] = "Reference";
    AttributeType["Binary"] = "Binary";
    AttributeType["Boolean"] = "Boolean";
    AttributeType["DateTime"] = "DateTime";
})(AttributeType || (AttributeType = {}));

function deserializeIntoMetadataEntry(metadataEntry = {}) {
    return {
        "key": n => { metadataEntry.key = n.getStringValue(); },
        "value": n => { metadataEntry.value = n.getStringValue(); },
    };
}

function deserializeIntoReferencedObject(referencedObject = {}) {
    return {
        "referencedObjectName": n => { referencedObject.referencedObjectName = n.getStringValue(); },
        "referencedProperty": n => { referencedObject.referencedProperty = n.getStringValue(); },
    };
}

function deserializeIntoStringKeyStringValuePair(stringKeyStringValuePair = {}) {
    return {
        "key": n => { stringKeyStringValuePair.key = n.getStringValue(); },
        "value": n => { stringKeyStringValuePair.value = n.getStringValue(); },
    };
}

var Mutability;
(function (Mutability) {
    Mutability["ReadWrite"] = "ReadWrite";
    Mutability["ReadOnly"] = "ReadOnly";
    Mutability["Immutable"] = "Immutable";
    Mutability["WriteOnly"] = "WriteOnly";
})(Mutability || (Mutability = {}));

function deserializeIntoAttributeDefinition(attributeDefinition = {}) {
    return {
        "anchor": n => { attributeDefinition.anchor = n.getBooleanValue(); },
        "apiExpressions": n => { attributeDefinition.apiExpressions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoStringKeyStringValuePair); },
        "caseExact": n => { attributeDefinition.caseExact = n.getBooleanValue(); },
        "defaultValue": n => { attributeDefinition.defaultValue = n.getStringValue(); },
        "flowNullValues": n => { attributeDefinition.flowNullValues = n.getBooleanValue(); },
        "metadata": n => { attributeDefinition.metadata = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMetadataEntry); },
        "multivalued": n => { attributeDefinition.multivalued = n.getBooleanValue(); },
        "mutability": n => { attributeDefinition.mutability = n.getEnumValue(Mutability); },
        "name": n => { attributeDefinition.name = n.getStringValue(); },
        "referencedObjects": n => { attributeDefinition.referencedObjects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoReferencedObject); },
        "required": n => { attributeDefinition.required = n.getBooleanValue(); },
        "type": n => { attributeDefinition.type = n.getEnumValue(AttributeType); },
    };
}

function deserializeIntoObjectDefinition(objectDefinition = {}) {
    return {
        "attributes": n => { objectDefinition.attributes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttributeDefinition); },
        "metadata": n => { objectDefinition.metadata = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMetadataEntry); },
        "name": n => { objectDefinition.name = n.getStringValue(); },
        "supportedApis": n => { objectDefinition.supportedApis = n.getCollectionOfPrimitiveValues(); },
    };
}

var DirectoryDefinitionDiscoverabilities;
(function (DirectoryDefinitionDiscoverabilities) {
    DirectoryDefinitionDiscoverabilities["None"] = "None";
    DirectoryDefinitionDiscoverabilities["AttributeNames"] = "AttributeNames";
    DirectoryDefinitionDiscoverabilities["AttributeDataTypes"] = "AttributeDataTypes";
    DirectoryDefinitionDiscoverabilities["AttributeReadOnly"] = "AttributeReadOnly";
    DirectoryDefinitionDiscoverabilities["ReferenceAttributes"] = "ReferenceAttributes";
    DirectoryDefinitionDiscoverabilities["UnknownFutureValue"] = "UnknownFutureValue";
})(DirectoryDefinitionDiscoverabilities || (DirectoryDefinitionDiscoverabilities = {}));

function deserializeIntoDirectoryDefinition(directoryDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(directoryDefinition)), { "discoverabilities": n => { directoryDefinition.discoverabilities = n.getEnumValue(DirectoryDefinitionDiscoverabilities); }, "discoveryDateTime": n => { directoryDefinition.discoveryDateTime = n.getDateValue(); }, "name": n => { directoryDefinition.name = n.getStringValue(); }, "objects": n => { directoryDefinition.objects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoObjectDefinition); }, "readOnly": n => { directoryDefinition.readOnly = n.getBooleanValue(); }, "version": n => { directoryDefinition.version = n.getStringValue(); } });
}

var AttributeFlowBehavior;
(function (AttributeFlowBehavior) {
    AttributeFlowBehavior["FlowWhenChanged"] = "FlowWhenChanged";
    AttributeFlowBehavior["FlowAlways"] = "FlowAlways";
})(AttributeFlowBehavior || (AttributeFlowBehavior = {}));

var AttributeFlowType;
(function (AttributeFlowType) {
    AttributeFlowType["Always"] = "Always";
    AttributeFlowType["ObjectAddOnly"] = "ObjectAddOnly";
    AttributeFlowType["MultiValueAddOnly"] = "MultiValueAddOnly";
    AttributeFlowType["ValueAddOnly"] = "ValueAddOnly";
    AttributeFlowType["AttributeAddOnly"] = "AttributeAddOnly";
})(AttributeFlowType || (AttributeFlowType = {}));

var AttributeMappingSourceType;
(function (AttributeMappingSourceType) {
    AttributeMappingSourceType["Attribute"] = "Attribute";
    AttributeMappingSourceType["Constant"] = "Constant";
    AttributeMappingSourceType["Function_escaped"] = "Function";
})(AttributeMappingSourceType || (AttributeMappingSourceType = {}));

function deserializeIntoStringKeyAttributeMappingSourceValuePair(stringKeyAttributeMappingSourceValuePair = {}) {
    return {
        "key": n => { stringKeyAttributeMappingSourceValuePair.key = n.getStringValue(); },
        "value": n => { stringKeyAttributeMappingSourceValuePair.value = n.getObject(deserializeIntoAttributeMappingSource); },
    };
}

function deserializeIntoAttributeMappingSource(attributeMappingSource = {}) {
    return {
        "expression": n => { attributeMappingSource.expression = n.getStringValue(); },
        "name": n => { attributeMappingSource.name = n.getStringValue(); },
        "parameters": n => { attributeMappingSource.parameters = n.getCollectionOfObjectValuesFromMethod(deserializeIntoStringKeyAttributeMappingSourceValuePair); },
        "type": n => { attributeMappingSource.type = n.getEnumValue(AttributeMappingSourceType); },
    };
}

function deserializeIntoAttributeMapping(attributeMapping = {}) {
    return {
        "defaultValue": n => { attributeMapping.defaultValue = n.getStringValue(); },
        "exportMissingReferences": n => { attributeMapping.exportMissingReferences = n.getBooleanValue(); },
        "flowBehavior": n => { attributeMapping.flowBehavior = n.getEnumValue(AttributeFlowBehavior); },
        "flowType": n => { attributeMapping.flowType = n.getEnumValue(AttributeFlowType); },
        "matchingPriority": n => { attributeMapping.matchingPriority = n.getNumberValue(); },
        "source": n => { attributeMapping.source = n.getObject(deserializeIntoAttributeMappingSource); },
        "targetAttributeName": n => { attributeMapping.targetAttributeName = n.getStringValue(); },
    };
}

function deserializeIntoFilterOperand(filterOperand = {}) {
    return {
        "values": n => { filterOperand.values = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoFilterClause(filterClause = {}) {
    return {
        "operatorName": n => { filterClause.operatorName = n.getStringValue(); },
        "sourceOperandName": n => { filterClause.sourceOperandName = n.getStringValue(); },
        "targetOperand": n => { filterClause.targetOperand = n.getObject(deserializeIntoFilterOperand); },
    };
}

function deserializeIntoFilterGroup(filterGroup = {}) {
    return {
        "clauses": n => { filterGroup.clauses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFilterClause); },
        "name": n => { filterGroup.name = n.getStringValue(); },
    };
}

function deserializeIntoFilter(filter = {}) {
    return {
        "categoryFilterGroups": n => { filter.categoryFilterGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFilterGroup); },
        "groups": n => { filter.groups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFilterGroup); },
        "inputFilterGroups": n => { filter.inputFilterGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFilterGroup); },
    };
}

var ObjectFlowTypes;
(function (ObjectFlowTypes) {
    ObjectFlowTypes["None"] = "None";
    ObjectFlowTypes["Add"] = "Add";
    ObjectFlowTypes["Update"] = "Update";
    ObjectFlowTypes["Delete"] = "Delete";
})(ObjectFlowTypes || (ObjectFlowTypes = {}));

function deserializeIntoObjectMapping(objectMapping = {}) {
    return {
        "attributeMappings": n => { objectMapping.attributeMappings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttributeMapping); },
        "enabled": n => { objectMapping.enabled = n.getBooleanValue(); },
        "flowTypes": n => { objectMapping.flowTypes = n.getEnumValue(ObjectFlowTypes); },
        "metadata": n => { objectMapping.metadata = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMetadataEntry); },
        "name": n => { objectMapping.name = n.getStringValue(); },
        "scope": n => { objectMapping.scope = n.getObject(deserializeIntoFilter); },
        "sourceObjectName": n => { objectMapping.sourceObjectName = n.getStringValue(); },
        "targetObjectName": n => { objectMapping.targetObjectName = n.getStringValue(); },
    };
}

function deserializeIntoSynchronizationRule(synchronizationRule = {}) {
    return {
        "editable": n => { synchronizationRule.editable = n.getBooleanValue(); },
        "id": n => { synchronizationRule.id = n.getStringValue(); },
        "metadata": n => { synchronizationRule.metadata = n.getCollectionOfObjectValuesFromMethod(deserializeIntoStringKeyStringValuePair); },
        "name": n => { synchronizationRule.name = n.getStringValue(); },
        "objectMappings": n => { synchronizationRule.objectMappings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoObjectMapping); },
        "priority": n => { synchronizationRule.priority = n.getNumberValue(); },
        "sourceDirectoryName": n => { synchronizationRule.sourceDirectoryName = n.getStringValue(); },
        "targetDirectoryName": n => { synchronizationRule.targetDirectoryName = n.getStringValue(); },
    };
}

function deserializeIntoSynchronizationSchema(synchronizationSchema = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(synchronizationSchema)), { "directories": n => { synchronizationSchema.directories = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryDefinition); }, "synchronizationRules": n => { synchronizationSchema.synchronizationRules = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSynchronizationRule); }, "version": n => { synchronizationSchema.version = n.getStringValue(); } });
}

function deserializeIntoStringKeyLongValuePair(stringKeyLongValuePair = {}) {
    return {
        "key": n => { stringKeyLongValuePair.key = n.getStringValue(); },
        "value": n => { stringKeyLongValuePair.value = n.getNumberValue(); },
    };
}

function deserializeIntoSynchronizationProgress(synchronizationProgress = {}) {
    return {
        "completedUnits": n => { synchronizationProgress.completedUnits = n.getNumberValue(); },
        "progressObservationDateTime": n => { synchronizationProgress.progressObservationDateTime = n.getDateValue(); },
        "totalUnits": n => { synchronizationProgress.totalUnits = n.getNumberValue(); },
        "units": n => { synchronizationProgress.units = n.getStringValue(); },
    };
}

function deserializeIntoSynchronizationError(synchronizationError = {}) {
    return {
        "code": n => { synchronizationError.code = n.getStringValue(); },
        "message": n => { synchronizationError.message = n.getStringValue(); },
        "tenantActionable": n => { synchronizationError.tenantActionable = n.getBooleanValue(); },
    };
}

var QuarantineReason;
(function (QuarantineReason) {
    QuarantineReason["EncounteredBaseEscrowThreshold"] = "EncounteredBaseEscrowThreshold";
    QuarantineReason["EncounteredTotalEscrowThreshold"] = "EncounteredTotalEscrowThreshold";
    QuarantineReason["EncounteredEscrowProportionThreshold"] = "EncounteredEscrowProportionThreshold";
    QuarantineReason["EncounteredQuarantineException"] = "EncounteredQuarantineException";
    QuarantineReason["Unknown"] = "Unknown";
    QuarantineReason["QuarantinedOnDemand"] = "QuarantinedOnDemand";
    QuarantineReason["TooManyDeletes"] = "TooManyDeletes";
    QuarantineReason["IngestionInterrupted"] = "IngestionInterrupted";
})(QuarantineReason || (QuarantineReason = {}));

function deserializeIntoSynchronizationQuarantine(synchronizationQuarantine = {}) {
    return {
        "currentBegan": n => { synchronizationQuarantine.currentBegan = n.getDateValue(); },
        "error": n => { synchronizationQuarantine.error_escaped = n.getObject(deserializeIntoSynchronizationError); },
        "nextAttempt": n => { synchronizationQuarantine.nextAttempt = n.getDateValue(); },
        "reason": n => { synchronizationQuarantine.reason = n.getEnumValue(QuarantineReason); },
        "seriesBegan": n => { synchronizationQuarantine.seriesBegan = n.getDateValue(); },
        "seriesCount": n => { synchronizationQuarantine.seriesCount = n.getNumberValue(); },
    };
}

var SynchronizationTaskExecutionResult;
(function (SynchronizationTaskExecutionResult) {
    SynchronizationTaskExecutionResult["Succeeded"] = "Succeeded";
    SynchronizationTaskExecutionResult["Failed"] = "Failed";
    SynchronizationTaskExecutionResult["EntryLevelErrors"] = "EntryLevelErrors";
})(SynchronizationTaskExecutionResult || (SynchronizationTaskExecutionResult = {}));

function deserializeIntoSynchronizationTaskExecution(synchronizationTaskExecution = {}) {
    return {
        "activityIdentifier": n => { synchronizationTaskExecution.activityIdentifier = n.getStringValue(); },
        "countEntitled": n => { synchronizationTaskExecution.countEntitled = n.getNumberValue(); },
        "countEntitledForProvisioning": n => { synchronizationTaskExecution.countEntitledForProvisioning = n.getNumberValue(); },
        "countEscrowed": n => { synchronizationTaskExecution.countEscrowed = n.getNumberValue(); },
        "countEscrowedRaw": n => { synchronizationTaskExecution.countEscrowedRaw = n.getNumberValue(); },
        "countExported": n => { synchronizationTaskExecution.countExported = n.getNumberValue(); },
        "countExports": n => { synchronizationTaskExecution.countExports = n.getNumberValue(); },
        "countImported": n => { synchronizationTaskExecution.countImported = n.getNumberValue(); },
        "countImportedDeltas": n => { synchronizationTaskExecution.countImportedDeltas = n.getNumberValue(); },
        "countImportedReferenceDeltas": n => { synchronizationTaskExecution.countImportedReferenceDeltas = n.getNumberValue(); },
        "error": n => { synchronizationTaskExecution.error_escaped = n.getObject(deserializeIntoSynchronizationError); },
        "state": n => { synchronizationTaskExecution.state = n.getEnumValue(SynchronizationTaskExecutionResult); },
        "timeBegan": n => { synchronizationTaskExecution.timeBegan = n.getDateValue(); },
        "timeEnded": n => { synchronizationTaskExecution.timeEnded = n.getDateValue(); },
    };
}

var SynchronizationStatusCode;
(function (SynchronizationStatusCode) {
    SynchronizationStatusCode["NotConfigured"] = "NotConfigured";
    SynchronizationStatusCode["NotRun"] = "NotRun";
    SynchronizationStatusCode["Active"] = "Active";
    SynchronizationStatusCode["Paused"] = "Paused";
    SynchronizationStatusCode["Quarantine"] = "Quarantine";
})(SynchronizationStatusCode || (SynchronizationStatusCode = {}));

function deserializeIntoSynchronizationStatus(synchronizationStatus = {}) {
    return {
        "code": n => { synchronizationStatus.code = n.getEnumValue(SynchronizationStatusCode); },
        "countSuccessiveCompleteFailures": n => { synchronizationStatus.countSuccessiveCompleteFailures = n.getNumberValue(); },
        "escrowsPruned": n => { synchronizationStatus.escrowsPruned = n.getBooleanValue(); },
        "lastExecution": n => { synchronizationStatus.lastExecution = n.getObject(deserializeIntoSynchronizationTaskExecution); },
        "lastSuccessfulExecution": n => { synchronizationStatus.lastSuccessfulExecution = n.getObject(deserializeIntoSynchronizationTaskExecution); },
        "lastSuccessfulExecutionWithExports": n => { synchronizationStatus.lastSuccessfulExecutionWithExports = n.getObject(deserializeIntoSynchronizationTaskExecution); },
        "progress": n => { synchronizationStatus.progress = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSynchronizationProgress); },
        "quarantine": n => { synchronizationStatus.quarantine = n.getObject(deserializeIntoSynchronizationQuarantine); },
        "steadyStateFirstAchievedTime": n => { synchronizationStatus.steadyStateFirstAchievedTime = n.getDateValue(); },
        "steadyStateLastAchievedTime": n => { synchronizationStatus.steadyStateLastAchievedTime = n.getDateValue(); },
        "synchronizedEntryCountByType": n => { synchronizationStatus.synchronizedEntryCountByType = n.getCollectionOfObjectValuesFromMethod(deserializeIntoStringKeyLongValuePair); },
        "troubleshootingUrl": n => { synchronizationStatus.troubleshootingUrl = n.getStringValue(); },
    };
}

function deserializeIntoSynchronizationJob(synchronizationJob = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(synchronizationJob)), { "schedule": n => { synchronizationJob.schedule = n.getObject(deserializeIntoSynchronizationSchedule); }, "schema": n => { synchronizationJob.schema = n.getObject(deserializeIntoSynchronizationSchema); }, "status": n => { synchronizationJob.status = n.getObject(deserializeIntoSynchronizationStatus); }, "synchronizationJobSettings": n => { synchronizationJob.synchronizationJobSettings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyValuePair); }, "templateId": n => { synchronizationJob.templateId = n.getStringValue(); } });
}

var SynchronizationSecret;
(function (SynchronizationSecret) {
    SynchronizationSecret["None"] = "None";
    SynchronizationSecret["UserName"] = "UserName";
    SynchronizationSecret["Password"] = "Password";
    SynchronizationSecret["SecretToken"] = "SecretToken";
    SynchronizationSecret["AppKey"] = "AppKey";
    SynchronizationSecret["BaseAddress"] = "BaseAddress";
    SynchronizationSecret["ClientIdentifier"] = "ClientIdentifier";
    SynchronizationSecret["ClientSecret"] = "ClientSecret";
    SynchronizationSecret["SingleSignOnType"] = "SingleSignOnType";
    SynchronizationSecret["Sandbox"] = "Sandbox";
    SynchronizationSecret["Url"] = "Url";
    SynchronizationSecret["Domain"] = "Domain";
    SynchronizationSecret["ConsumerKey"] = "ConsumerKey";
    SynchronizationSecret["ConsumerSecret"] = "ConsumerSecret";
    SynchronizationSecret["TokenKey"] = "TokenKey";
    SynchronizationSecret["TokenExpiration"] = "TokenExpiration";
    SynchronizationSecret["Oauth2AccessToken"] = "Oauth2AccessToken";
    SynchronizationSecret["Oauth2AccessTokenCreationTime"] = "Oauth2AccessTokenCreationTime";
    SynchronizationSecret["Oauth2RefreshToken"] = "Oauth2RefreshToken";
    SynchronizationSecret["SyncAll"] = "SyncAll";
    SynchronizationSecret["InstanceName"] = "InstanceName";
    SynchronizationSecret["Oauth2ClientId"] = "Oauth2ClientId";
    SynchronizationSecret["Oauth2ClientSecret"] = "Oauth2ClientSecret";
    SynchronizationSecret["CompanyId"] = "CompanyId";
    SynchronizationSecret["UpdateKeyOnSoftDelete"] = "UpdateKeyOnSoftDelete";
    SynchronizationSecret["SynchronizationSchedule"] = "SynchronizationSchedule";
    SynchronizationSecret["SystemOfRecord"] = "SystemOfRecord";
    SynchronizationSecret["SandboxName"] = "SandboxName";
    SynchronizationSecret["EnforceDomain"] = "EnforceDomain";
    SynchronizationSecret["SyncNotificationSettings"] = "SyncNotificationSettings";
    SynchronizationSecret["SkipOutOfScopeDeletions"] = "SkipOutOfScopeDeletions";
    SynchronizationSecret["Oauth2AuthorizationCode"] = "Oauth2AuthorizationCode";
    SynchronizationSecret["Oauth2RedirectUri"] = "Oauth2RedirectUri";
    SynchronizationSecret["ApplicationTemplateIdentifier"] = "ApplicationTemplateIdentifier";
    SynchronizationSecret["Oauth2TokenExchangeUri"] = "Oauth2TokenExchangeUri";
    SynchronizationSecret["Oauth2AuthorizationUri"] = "Oauth2AuthorizationUri";
    SynchronizationSecret["AuthenticationType"] = "AuthenticationType";
    SynchronizationSecret["Server"] = "Server";
    SynchronizationSecret["PerformInboundEntitlementGrants"] = "PerformInboundEntitlementGrants";
    SynchronizationSecret["HardDeletesEnabled"] = "HardDeletesEnabled";
    SynchronizationSecret["SyncAgentCompatibilityKey"] = "SyncAgentCompatibilityKey";
    SynchronizationSecret["SyncAgentADContainer"] = "SyncAgentADContainer";
    SynchronizationSecret["ValidateDomain"] = "ValidateDomain";
    SynchronizationSecret["TestReferences"] = "TestReferences";
    SynchronizationSecret["ConnectionString"] = "ConnectionString";
})(SynchronizationSecret || (SynchronizationSecret = {}));

function deserializeIntoSynchronizationSecretKeyStringValuePair(synchronizationSecretKeyStringValuePair = {}) {
    return {
        "key": n => { synchronizationSecretKeyStringValuePair.key = n.getEnumValue(SynchronizationSecret); },
        "value": n => { synchronizationSecretKeyStringValuePair.value = n.getStringValue(); },
    };
}

function deserializeIntoSynchronizationTemplate(synchronizationTemplate = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(synchronizationTemplate)), { "applicationId": n => { synchronizationTemplate.applicationId = n.getStringValue(); }, "default": n => { synchronizationTemplate.default_escaped = n.getBooleanValue(); }, "description": n => { synchronizationTemplate.description = n.getStringValue(); }, "discoverable": n => { synchronizationTemplate.discoverable = n.getBooleanValue(); }, "factoryTag": n => { synchronizationTemplate.factoryTag = n.getStringValue(); }, "metadata": n => { synchronizationTemplate.metadata = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMetadataEntry); }, "schema": n => { synchronizationTemplate.schema = n.getObject(deserializeIntoSynchronizationSchema); } });
}

function deserializeIntoSynchronization(synchronization = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(synchronization)), { "jobs": n => { synchronization.jobs = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSynchronizationJob); }, "secrets": n => { synchronization.secrets = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSynchronizationSecretKeyStringValuePair); }, "templates": n => { synchronization.templates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSynchronizationTemplate); } });
}

function deserializeIntoTokenIssuancePolicy(tokenIssuancePolicy = {}) {
    return Object.assign({}, deserializeIntoStsPolicy(tokenIssuancePolicy));
}

function deserializeIntoTokenLifetimePolicy(tokenLifetimePolicy = {}) {
    return Object.assign({}, deserializeIntoStsPolicy(tokenLifetimePolicy));
}

function deserializeIntoVerifiedPublisher(verifiedPublisher = {}) {
    return {
        "addedDateTime": n => { verifiedPublisher.addedDateTime = n.getDateValue(); },
        "displayName": n => { verifiedPublisher.displayName = n.getStringValue(); },
        "verifiedPublisherId": n => { verifiedPublisher.verifiedPublisherId = n.getStringValue(); },
    };
}

function deserializeIntoServicePrincipal(servicePrincipal = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(servicePrincipal)), { "accountEnabled": n => { servicePrincipal.accountEnabled = n.getBooleanValue(); }, "addIns": n => { servicePrincipal.addIns = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAddIn); }, "alternativeNames": n => { servicePrincipal.alternativeNames = n.getCollectionOfPrimitiveValues(); }, "appDescription": n => { servicePrincipal.appDescription = n.getStringValue(); }, "appDisplayName": n => { servicePrincipal.appDisplayName = n.getStringValue(); }, "appId": n => { servicePrincipal.appId = n.getStringValue(); }, "applicationTemplateId": n => { servicePrincipal.applicationTemplateId = n.getStringValue(); }, "appManagementPolicies": n => { servicePrincipal.appManagementPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppManagementPolicy); }, "appOwnerOrganizationId": n => { servicePrincipal.appOwnerOrganizationId = n.getStringValue(); }, "appRoleAssignedTo": n => { servicePrincipal.appRoleAssignedTo = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppRoleAssignment); }, "appRoleAssignmentRequired": n => { servicePrincipal.appRoleAssignmentRequired = n.getBooleanValue(); }, "appRoleAssignments": n => { servicePrincipal.appRoleAssignments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppRoleAssignment); }, "appRoles": n => { servicePrincipal.appRoles = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppRole); }, "claimsMappingPolicies": n => { servicePrincipal.claimsMappingPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoClaimsMappingPolicy); }, "createdObjects": n => { servicePrincipal.createdObjects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "customSecurityAttributes": n => { servicePrincipal.customSecurityAttributes = n.getObject(deserializeIntoCustomSecurityAttributeValue); }, "delegatedPermissionClassifications": n => { servicePrincipal.delegatedPermissionClassifications = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDelegatedPermissionClassification); }, "description": n => { servicePrincipal.description = n.getStringValue(); }, "disabledByMicrosoftStatus": n => { servicePrincipal.disabledByMicrosoftStatus = n.getStringValue(); }, "displayName": n => { servicePrincipal.displayName = n.getStringValue(); }, "endpoints": n => { servicePrincipal.endpoints = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEndpoint); }, "errorUrl": n => { servicePrincipal.errorUrl = n.getStringValue(); }, "federatedIdentityCredentials": n => { servicePrincipal.federatedIdentityCredentials = n.getCollectionOfObjectValuesFromMethod(deserializeIntoFederatedIdentityCredential); }, "homepage": n => { servicePrincipal.homepage = n.getStringValue(); }, "homeRealmDiscoveryPolicies": n => { servicePrincipal.homeRealmDiscoveryPolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoHomeRealmDiscoveryPolicy); }, "info": n => { servicePrincipal.info = n.getObject(deserializeIntoInformationalUrl); }, "keyCredentials": n => { servicePrincipal.keyCredentials = n.getCollectionOfObjectValuesFromMethod(deserializeIntoKeyCredential); }, "licenseDetails": n => { servicePrincipal.licenseDetails = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLicenseDetails); }, "loginUrl": n => { servicePrincipal.loginUrl = n.getStringValue(); }, "logoutUrl": n => { servicePrincipal.logoutUrl = n.getStringValue(); }, "memberOf": n => { servicePrincipal.memberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "notes": n => { servicePrincipal.notes = n.getStringValue(); }, "notificationEmailAddresses": n => { servicePrincipal.notificationEmailAddresses = n.getCollectionOfPrimitiveValues(); }, "oauth2PermissionGrants": n => { servicePrincipal.oauth2PermissionGrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOAuth2PermissionGrant); }, "ownedObjects": n => { servicePrincipal.ownedObjects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "owners": n => { servicePrincipal.owners = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "passwordCredentials": n => { servicePrincipal.passwordCredentials = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPasswordCredential); }, "passwordSingleSignOnSettings": n => { servicePrincipal.passwordSingleSignOnSettings = n.getObject(deserializeIntoPasswordSingleSignOnSettings); }, "preferredSingleSignOnMode": n => { servicePrincipal.preferredSingleSignOnMode = n.getStringValue(); }, "preferredTokenSigningKeyEndDateTime": n => { servicePrincipal.preferredTokenSigningKeyEndDateTime = n.getDateValue(); }, "preferredTokenSigningKeyThumbprint": n => { servicePrincipal.preferredTokenSigningKeyThumbprint = n.getStringValue(); }, "publishedPermissionScopes": n => { servicePrincipal.publishedPermissionScopes = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPermissionScope); }, "publisherName": n => { servicePrincipal.publisherName = n.getStringValue(); }, "replyUrls": n => { servicePrincipal.replyUrls = n.getCollectionOfPrimitiveValues(); }, "samlMetadataUrl": n => { servicePrincipal.samlMetadataUrl = n.getStringValue(); }, "samlSingleSignOnSettings": n => { servicePrincipal.samlSingleSignOnSettings = n.getObject(deserializeIntoSamlSingleSignOnSettings); }, "servicePrincipalNames": n => { servicePrincipal.servicePrincipalNames = n.getCollectionOfPrimitiveValues(); }, "servicePrincipalType": n => { servicePrincipal.servicePrincipalType = n.getStringValue(); }, "signInAudience": n => { servicePrincipal.signInAudience = n.getStringValue(); }, "synchronization": n => { servicePrincipal.synchronization = n.getObject(deserializeIntoSynchronization); }, "tags": n => { servicePrincipal.tags = n.getCollectionOfPrimitiveValues(); }, "tokenEncryptionKeyId": n => { servicePrincipal.tokenEncryptionKeyId = n.getStringValue(); }, "tokenIssuancePolicies": n => { servicePrincipal.tokenIssuancePolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTokenIssuancePolicy); }, "tokenLifetimePolicies": n => { servicePrincipal.tokenLifetimePolicies = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTokenLifetimePolicy); }, "transitiveMemberOf": n => { servicePrincipal.transitiveMemberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "verifiedPublisher": n => { servicePrincipal.verifiedPublisher = n.getObject(deserializeIntoVerifiedPublisher); } });
}

function deserializeIntoSignInActivity(signInActivity = {}) {
    return {
        "lastNonInteractiveSignInDateTime": n => { signInActivity.lastNonInteractiveSignInDateTime = n.getDateValue(); },
        "lastNonInteractiveSignInRequestId": n => { signInActivity.lastNonInteractiveSignInRequestId = n.getStringValue(); },
        "lastSignInDateTime": n => { signInActivity.lastSignInDateTime = n.getDateValue(); },
        "lastSignInRequestId": n => { signInActivity.lastSignInRequestId = n.getStringValue(); },
    };
}

function deserializeIntoAttachmentBase(attachmentBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(attachmentBase)), { "contentType": n => { attachmentBase.contentType = n.getStringValue(); }, "lastModifiedDateTime": n => { attachmentBase.lastModifiedDateTime = n.getDateValue(); }, "name": n => { attachmentBase.name = n.getStringValue(); }, "size": n => { attachmentBase.size = n.getNumberValue(); } });
}

function deserializeIntoAttachmentSession(attachmentSession = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(attachmentSession)), { "content": n => { attachmentSession.content = n.getStringValue(); }, "expirationDateTime": n => { attachmentSession.expirationDateTime = n.getDateValue(); }, "nextExpectedRanges": n => { attachmentSession.nextExpectedRanges = n.getCollectionOfPrimitiveValues(); } });
}

function deserializeIntoChecklistItem(checklistItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(checklistItem)), { "checkedDateTime": n => { checklistItem.checkedDateTime = n.getDateValue(); }, "createdDateTime": n => { checklistItem.createdDateTime = n.getDateValue(); }, "displayName": n => { checklistItem.displayName = n.getStringValue(); }, "isChecked": n => { checklistItem.isChecked = n.getBooleanValue(); } });
}

function deserializeIntoLinkedResource(linkedResource = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(linkedResource)), { "applicationName": n => { linkedResource.applicationName = n.getStringValue(); }, "displayName": n => { linkedResource.displayName = n.getStringValue(); }, "externalId": n => { linkedResource.externalId = n.getStringValue(); }, "webUrl": n => { linkedResource.webUrl = n.getStringValue(); } });
}

function deserializeIntoTodoTask(todoTask = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(todoTask)), { "attachments": n => { todoTask.attachments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachmentBase); }, "attachmentSessions": n => { todoTask.attachmentSessions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachmentSession); }, "body": n => { todoTask.body = n.getObject(deserializeIntoItemBody); }, "bodyLastModifiedDateTime": n => { todoTask.bodyLastModifiedDateTime = n.getDateValue(); }, "categories": n => { todoTask.categories = n.getCollectionOfPrimitiveValues(); }, "checklistItems": n => { todoTask.checklistItems = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChecklistItem); }, "completedDateTime": n => { todoTask.completedDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "createdDateTime": n => { todoTask.createdDateTime = n.getDateValue(); }, "dueDateTime": n => { todoTask.dueDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "extensions": n => { todoTask.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "hasAttachments": n => { todoTask.hasAttachments = n.getBooleanValue(); }, "importance": n => { todoTask.importance = n.getEnumValue(Importance); }, "isReminderOn": n => { todoTask.isReminderOn = n.getBooleanValue(); }, "lastModifiedDateTime": n => { todoTask.lastModifiedDateTime = n.getDateValue(); }, "linkedResources": n => { todoTask.linkedResources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLinkedResource); }, "recurrence": n => { todoTask.recurrence = n.getObject(deserializeIntoPatternedRecurrence); }, "reminderDateTime": n => { todoTask.reminderDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "startDateTime": n => { todoTask.startDateTime = n.getObject(deserializeIntoDateTimeTimeZone); }, "status": n => { todoTask.status = n.getEnumValue(TaskStatus); }, "title": n => { todoTask.title = n.getStringValue(); } });
}

var WellknownListName;
(function (WellknownListName) {
    WellknownListName["None"] = "none";
    WellknownListName["DefaultList"] = "defaultList";
    WellknownListName["FlaggedEmails"] = "flaggedEmails";
    WellknownListName["UnknownFutureValue"] = "unknownFutureValue";
})(WellknownListName || (WellknownListName = {}));

function deserializeIntoTodoTaskList(todoTaskList = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(todoTaskList)), { "displayName": n => { todoTaskList.displayName = n.getStringValue(); }, "extensions": n => { todoTaskList.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "isOwner": n => { todoTaskList.isOwner = n.getBooleanValue(); }, "isShared": n => { todoTaskList.isShared = n.getBooleanValue(); }, "tasks": n => { todoTaskList.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTodoTask); }, "wellknownListName": n => { todoTaskList.wellknownListName = n.getEnumValue(WellknownListName); } });
}

function deserializeIntoTodo(todo = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(todo)), { "lists": n => { todo.lists = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTodoTaskList); } });
}

var Status;
(function (Status) {
    Status["Active"] = "active";
    Status["Updated"] = "updated";
    Status["Deleted"] = "deleted";
    Status["Ignored"] = "ignored";
    Status["UnknownFutureValue"] = "unknownFutureValue";
})(Status || (Status = {}));

function deserializeIntoActivityHistoryItem(activityHistoryItem = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(activityHistoryItem)), { "activeDurationSeconds": n => { activityHistoryItem.activeDurationSeconds = n.getNumberValue(); }, "activity": n => { activityHistoryItem.activity = n.getObject(deserializeIntoUserActivity); }, "createdDateTime": n => { activityHistoryItem.createdDateTime = n.getDateValue(); }, "expirationDateTime": n => { activityHistoryItem.expirationDateTime = n.getDateValue(); }, "lastActiveDateTime": n => { activityHistoryItem.lastActiveDateTime = n.getDateValue(); }, "lastModifiedDateTime": n => { activityHistoryItem.lastModifiedDateTime = n.getDateValue(); }, "startedDateTime": n => { activityHistoryItem.startedDateTime = n.getDateValue(); }, "status": n => { activityHistoryItem.status = n.getEnumValue(Status); }, "userTimezone": n => { activityHistoryItem.userTimezone = n.getStringValue(); } });
}

function deserializeIntoImageInfo(imageInfo = {}) {
    return {
        "addImageQuery": n => { imageInfo.addImageQuery = n.getBooleanValue(); },
        "alternateText": n => { imageInfo.alternateText = n.getStringValue(); },
        "alternativeText": n => { imageInfo.alternativeText = n.getStringValue(); },
        "iconUrl": n => { imageInfo.iconUrl = n.getStringValue(); },
    };
}

function deserializeIntoVisualInfo(visualInfo = {}) {
    return {
        "attribution": n => { visualInfo.attribution = n.getObject(deserializeIntoImageInfo); },
        "backgroundColor": n => { visualInfo.backgroundColor = n.getStringValue(); },
        "content": n => { visualInfo.content = n.getObject(deserializeIntoJson); },
        "description": n => { visualInfo.description = n.getStringValue(); },
        "displayText": n => { visualInfo.displayText = n.getStringValue(); },
    };
}

function deserializeIntoUserActivity(userActivity = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userActivity)), { "activationUrl": n => { userActivity.activationUrl = n.getStringValue(); }, "activitySourceHost": n => { userActivity.activitySourceHost = n.getStringValue(); }, "appActivityId": n => { userActivity.appActivityId = n.getStringValue(); }, "appDisplayName": n => { userActivity.appDisplayName = n.getStringValue(); }, "contentInfo": n => { userActivity.contentInfo = n.getObject(deserializeIntoJson); }, "contentUrl": n => { userActivity.contentUrl = n.getStringValue(); }, "createdDateTime": n => { userActivity.createdDateTime = n.getDateValue(); }, "expirationDateTime": n => { userActivity.expirationDateTime = n.getDateValue(); }, "fallbackUrl": n => { userActivity.fallbackUrl = n.getStringValue(); }, "historyItems": n => { userActivity.historyItems = n.getCollectionOfObjectValuesFromMethod(deserializeIntoActivityHistoryItem); }, "lastModifiedDateTime": n => { userActivity.lastModifiedDateTime = n.getDateValue(); }, "status": n => { userActivity.status = n.getEnumValue(Status); }, "userTimezone": n => { userActivity.userTimezone = n.getStringValue(); }, "visualElements": n => { userActivity.visualElements = n.getObject(deserializeIntoVisualInfo); } });
}

var AnalyticsActivityType;
(function (AnalyticsActivityType) {
    AnalyticsActivityType["Email"] = "Email";
    AnalyticsActivityType["Meeting"] = "Meeting";
    AnalyticsActivityType["Focus"] = "Focus";
    AnalyticsActivityType["Chat"] = "Chat";
    AnalyticsActivityType["Call"] = "Call";
})(AnalyticsActivityType || (AnalyticsActivityType = {}));

function deserializeIntoActivityStatistics(activityStatistics = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(activityStatistics)), { "activity": n => { activityStatistics.activity = n.getEnumValue(AnalyticsActivityType); }, "duration": n => { activityStatistics.duration = n.getDurationValue(); }, "endDate": n => { activityStatistics.endDate = n.getDateOnlyValue(); }, "startDate": n => { activityStatistics.startDate = n.getDateOnlyValue(); }, "timeZoneUsed": n => { activityStatistics.timeZoneUsed = n.getStringValue(); } });
}

function deserializeIntoSettings(settings = {}) {
    return {
        "hasGraphMailbox": n => { settings.hasGraphMailbox = n.getBooleanValue(); },
        "hasLicense": n => { settings.hasLicense = n.getBooleanValue(); },
        "hasOptedOut": n => { settings.hasOptedOut = n.getBooleanValue(); },
    };
}

function deserializeIntoUserAnalytics(userAnalytics = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userAnalytics)), { "activityStatistics": n => { userAnalytics.activityStatistics = n.getCollectionOfObjectValuesFromMethod(deserializeIntoActivityStatistics); }, "settings": n => { userAnalytics.settings = n.getObject(deserializeIntoSettings); } });
}

function deserializeIntoDeviceHealth(deviceHealth = {}) {
    return {
        "lastConnectionTime": n => { deviceHealth.lastConnectionTime = n.getDateValue(); },
    };
}

function deserializeIntoPrinterLocation(printerLocation = {}) {
    return {
        "altitudeInMeters": n => { printerLocation.altitudeInMeters = n.getNumberValue(); },
        "building": n => { printerLocation.building = n.getStringValue(); },
        "city": n => { printerLocation.city = n.getStringValue(); },
        "countryOrRegion": n => { printerLocation.countryOrRegion = n.getStringValue(); },
        "floor": n => { printerLocation.floor = n.getStringValue(); },
        "floorDescription": n => { printerLocation.floorDescription = n.getStringValue(); },
        "floorNumber": n => { printerLocation.floorNumber = n.getNumberValue(); },
        "latitude": n => { printerLocation.latitude = n.getNumberValue(); },
        "longitude": n => { printerLocation.longitude = n.getNumberValue(); },
        "organization": n => { printerLocation.organization = n.getCollectionOfPrimitiveValues(); },
        "postalCode": n => { printerLocation.postalCode = n.getStringValue(); },
        "roomDescription": n => { printerLocation.roomDescription = n.getStringValue(); },
        "roomName": n => { printerLocation.roomName = n.getStringValue(); },
        "roomNumber": n => { printerLocation.roomNumber = n.getNumberValue(); },
        "site": n => { printerLocation.site = n.getStringValue(); },
        "stateOrProvince": n => { printerLocation.stateOrProvince = n.getStringValue(); },
        "streetAddress": n => { printerLocation.streetAddress = n.getStringValue(); },
        "subdivision": n => { printerLocation.subdivision = n.getCollectionOfPrimitiveValues(); },
        "subunit": n => { printerLocation.subunit = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoPrintConnector(printConnector = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printConnector)), { "appVersion": n => { printConnector.appVersion = n.getStringValue(); }, "deviceHealth": n => { printConnector.deviceHealth = n.getObject(deserializeIntoDeviceHealth); }, "displayName": n => { printConnector.displayName = n.getStringValue(); }, "fullyQualifiedDomainName": n => { printConnector.fullyQualifiedDomainName = n.getStringValue(); }, "location": n => { printConnector.location = n.getObject(deserializeIntoPrinterLocation); }, "name": n => { printConnector.name = n.getStringValue(); }, "operatingSystem": n => { printConnector.operatingSystem = n.getStringValue(); }, "registeredDateTime": n => { printConnector.registeredDateTime = n.getDateValue(); } });
}

function deserializeIntoIntegerRange(integerRange = {}) {
    return {
        "end": n => { integerRange.end = n.getNumberValue(); },
        "maximum": n => { integerRange.maximum = n.getNumberValue(); },
        "minimum": n => { integerRange.minimum = n.getNumberValue(); },
        "start": n => { integerRange.start = n.getNumberValue(); },
    };
}

var PrintColorConfiguration;
(function (PrintColorConfiguration) {
    PrintColorConfiguration["BlackAndWhite"] = "blackAndWhite";
    PrintColorConfiguration["Grayscale"] = "grayscale";
    PrintColorConfiguration["Color"] = "color";
    PrintColorConfiguration["Auto"] = "auto";
})(PrintColorConfiguration || (PrintColorConfiguration = {}));

var PrintColorMode;
(function (PrintColorMode) {
    PrintColorMode["BlackAndWhite"] = "blackAndWhite";
    PrintColorMode["Grayscale"] = "grayscale";
    PrintColorMode["Color"] = "color";
    PrintColorMode["Auto"] = "auto";
})(PrintColorMode || (PrintColorMode = {}));

var PrintDuplexConfiguration;
(function (PrintDuplexConfiguration) {
    PrintDuplexConfiguration["TwoSidedLongEdge"] = "twoSidedLongEdge";
    PrintDuplexConfiguration["TwoSidedShortEdge"] = "twoSidedShortEdge";
    PrintDuplexConfiguration["OneSided"] = "oneSided";
})(PrintDuplexConfiguration || (PrintDuplexConfiguration = {}));

var PrintDuplexMode;
(function (PrintDuplexMode) {
    PrintDuplexMode["FlipOnLongEdge"] = "flipOnLongEdge";
    PrintDuplexMode["FlipOnShortEdge"] = "flipOnShortEdge";
    PrintDuplexMode["OneSided"] = "oneSided";
})(PrintDuplexMode || (PrintDuplexMode = {}));

var PrinterFeedDirection;
(function (PrinterFeedDirection) {
    PrinterFeedDirection["LongEdgeFirst"] = "longEdgeFirst";
    PrinterFeedDirection["ShortEdgeFirst"] = "shortEdgeFirst";
})(PrinterFeedDirection || (PrinterFeedDirection = {}));

var PrinterFeedOrientation;
(function (PrinterFeedOrientation) {
    PrinterFeedOrientation["LongEdgeFirst"] = "longEdgeFirst";
    PrinterFeedOrientation["ShortEdgeFirst"] = "shortEdgeFirst";
})(PrinterFeedOrientation || (PrinterFeedOrientation = {}));

var PrintFinishing;
(function (PrintFinishing) {
    PrintFinishing["None"] = "none";
    PrintFinishing["Staple"] = "staple";
    PrintFinishing["Punch"] = "punch";
    PrintFinishing["Cover"] = "cover";
    PrintFinishing["Bind"] = "bind";
    PrintFinishing["SaddleStitch"] = "saddleStitch";
    PrintFinishing["StitchEdge"] = "stitchEdge";
    PrintFinishing["StapleTopLeft"] = "stapleTopLeft";
    PrintFinishing["StapleBottomLeft"] = "stapleBottomLeft";
    PrintFinishing["StapleTopRight"] = "stapleTopRight";
    PrintFinishing["StapleBottomRight"] = "stapleBottomRight";
    PrintFinishing["StitchLeftEdge"] = "stitchLeftEdge";
    PrintFinishing["StitchTopEdge"] = "stitchTopEdge";
    PrintFinishing["StitchRightEdge"] = "stitchRightEdge";
    PrintFinishing["StitchBottomEdge"] = "stitchBottomEdge";
    PrintFinishing["StapleDualLeft"] = "stapleDualLeft";
    PrintFinishing["StapleDualTop"] = "stapleDualTop";
    PrintFinishing["StapleDualRight"] = "stapleDualRight";
    PrintFinishing["StapleDualBottom"] = "stapleDualBottom";
    PrintFinishing["UnknownFutureValue"] = "unknownFutureValue";
})(PrintFinishing || (PrintFinishing = {}));

var PrintMediaType;
(function (PrintMediaType) {
    PrintMediaType["Stationery"] = "stationery";
    PrintMediaType["Transparency"] = "transparency";
    PrintMediaType["Envelope"] = "envelope";
    PrintMediaType["EnvelopePlain"] = "envelopePlain";
    PrintMediaType["Continuous"] = "continuous";
    PrintMediaType["Screen"] = "screen";
    PrintMediaType["ScreenPaged"] = "screenPaged";
    PrintMediaType["ContinuousLong"] = "continuousLong";
    PrintMediaType["ContinuousShort"] = "continuousShort";
    PrintMediaType["EnvelopeWindow"] = "envelopeWindow";
    PrintMediaType["MultiPartForm"] = "multiPartForm";
    PrintMediaType["MultiLayer"] = "multiLayer";
    PrintMediaType["Labels"] = "labels";
})(PrintMediaType || (PrintMediaType = {}));

var PrintMultipageLayout;
(function (PrintMultipageLayout) {
    PrintMultipageLayout["ClockwiseFromTopLeft"] = "clockwiseFromTopLeft";
    PrintMultipageLayout["CounterclockwiseFromTopLeft"] = "counterclockwiseFromTopLeft";
    PrintMultipageLayout["CounterclockwiseFromTopRight"] = "counterclockwiseFromTopRight";
    PrintMultipageLayout["ClockwiseFromTopRight"] = "clockwiseFromTopRight";
    PrintMultipageLayout["CounterclockwiseFromBottomLeft"] = "counterclockwiseFromBottomLeft";
    PrintMultipageLayout["ClockwiseFromBottomLeft"] = "clockwiseFromBottomLeft";
    PrintMultipageLayout["CounterclockwiseFromBottomRight"] = "counterclockwiseFromBottomRight";
    PrintMultipageLayout["ClockwiseFromBottomRight"] = "clockwiseFromBottomRight";
})(PrintMultipageLayout || (PrintMultipageLayout = {}));

var PrintOrientation;
(function (PrintOrientation) {
    PrintOrientation["Portrait"] = "portrait";
    PrintOrientation["Landscape"] = "landscape";
    PrintOrientation["ReverseLandscape"] = "reverseLandscape";
    PrintOrientation["ReversePortrait"] = "reversePortrait";
})(PrintOrientation || (PrintOrientation = {}));

var PrintPresentationDirection;
(function (PrintPresentationDirection) {
    PrintPresentationDirection["ClockwiseFromTopLeft"] = "clockwiseFromTopLeft";
    PrintPresentationDirection["CounterClockwiseFromTopLeft"] = "counterClockwiseFromTopLeft";
    PrintPresentationDirection["CounterClockwiseFromTopRight"] = "counterClockwiseFromTopRight";
    PrintPresentationDirection["ClockwiseFromTopRight"] = "clockwiseFromTopRight";
    PrintPresentationDirection["CounterClockwiseFromBottomLeft"] = "counterClockwiseFromBottomLeft";
    PrintPresentationDirection["ClockwiseFromBottomLeft"] = "clockwiseFromBottomLeft";
    PrintPresentationDirection["CounterClockwiseFromBottomRight"] = "counterClockwiseFromBottomRight";
    PrintPresentationDirection["ClockwiseFromBottomRight"] = "clockwiseFromBottomRight";
})(PrintPresentationDirection || (PrintPresentationDirection = {}));

var PrintQuality;
(function (PrintQuality) {
    PrintQuality["Low"] = "low";
    PrintQuality["Medium"] = "medium";
    PrintQuality["High"] = "high";
    PrintQuality["UnknownFutureValue"] = "unknownFutureValue";
})(PrintQuality || (PrintQuality = {}));

var PrintScaling;
(function (PrintScaling) {
    PrintScaling["Auto"] = "auto";
    PrintScaling["ShrinkToFit"] = "shrinkToFit";
    PrintScaling["Fill"] = "fill";
    PrintScaling["Fit"] = "fit";
    PrintScaling["None"] = "none";
    PrintScaling["UnknownFutureValue"] = "unknownFutureValue";
})(PrintScaling || (PrintScaling = {}));

function deserializeIntoPrinterCapabilities(printerCapabilities = {}) {
    return {
        "bottomMargins": n => { printerCapabilities.bottomMargins = n.getCollectionOfPrimitiveValues(); },
        "collation": n => { printerCapabilities.collation = n.getBooleanValue(); },
        "colorModes": n => { printerCapabilities.colorModes = n.getEnumValues(PrintColorMode); },
        "contentTypes": n => { printerCapabilities.contentTypes = n.getCollectionOfPrimitiveValues(); },
        "copiesPerJob": n => { printerCapabilities.copiesPerJob = n.getObject(deserializeIntoIntegerRange); },
        "dpis": n => { printerCapabilities.dpis = n.getCollectionOfPrimitiveValues(); },
        "duplexModes": n => { printerCapabilities.duplexModes = n.getEnumValues(PrintDuplexMode); },
        "feedDirections": n => { printerCapabilities.feedDirections = n.getEnumValues(PrinterFeedDirection); },
        "feedOrientations": n => { printerCapabilities.feedOrientations = n.getEnumValues(PrinterFeedOrientation); },
        "finishings": n => { printerCapabilities.finishings = n.getEnumValues(PrintFinishing); },
        "inputBins": n => { printerCapabilities.inputBins = n.getCollectionOfPrimitiveValues(); },
        "isColorPrintingSupported": n => { printerCapabilities.isColorPrintingSupported = n.getBooleanValue(); },
        "isPageRangeSupported": n => { printerCapabilities.isPageRangeSupported = n.getBooleanValue(); },
        "leftMargins": n => { printerCapabilities.leftMargins = n.getCollectionOfPrimitiveValues(); },
        "mediaColors": n => { printerCapabilities.mediaColors = n.getCollectionOfPrimitiveValues(); },
        "mediaSizes": n => { printerCapabilities.mediaSizes = n.getCollectionOfPrimitiveValues(); },
        "mediaTypes": n => { printerCapabilities.mediaTypes = n.getCollectionOfPrimitiveValues(); },
        "multipageLayouts": n => { printerCapabilities.multipageLayouts = n.getEnumValues(PrintMultipageLayout); },
        "orientations": n => { printerCapabilities.orientations = n.getEnumValues(PrintOrientation); },
        "outputBins": n => { printerCapabilities.outputBins = n.getCollectionOfPrimitiveValues(); },
        "pagesPerSheet": n => { printerCapabilities.pagesPerSheet = n.getCollectionOfPrimitiveValues(); },
        "qualities": n => { printerCapabilities.qualities = n.getEnumValues(PrintQuality); },
        "rightMargins": n => { printerCapabilities.rightMargins = n.getCollectionOfPrimitiveValues(); },
        "scalings": n => { printerCapabilities.scalings = n.getEnumValues(PrintScaling); },
        "supportedColorConfigurations": n => { printerCapabilities.supportedColorConfigurations = n.getEnumValues(PrintColorConfiguration); },
        "supportedCopiesPerJob": n => { printerCapabilities.supportedCopiesPerJob = n.getObject(deserializeIntoIntegerRange); },
        "supportedDocumentMimeTypes": n => { printerCapabilities.supportedDocumentMimeTypes = n.getCollectionOfPrimitiveValues(); },
        "supportedDuplexConfigurations": n => { printerCapabilities.supportedDuplexConfigurations = n.getEnumValues(PrintDuplexConfiguration); },
        "supportedFinishings": n => { printerCapabilities.supportedFinishings = n.getEnumValues(PrintFinishing); },
        "supportedMediaColors": n => { printerCapabilities.supportedMediaColors = n.getCollectionOfPrimitiveValues(); },
        "supportedMediaSizes": n => { printerCapabilities.supportedMediaSizes = n.getCollectionOfPrimitiveValues(); },
        "supportedMediaTypes": n => { printerCapabilities.supportedMediaTypes = n.getEnumValues(PrintMediaType); },
        "supportedOrientations": n => { printerCapabilities.supportedOrientations = n.getEnumValues(PrintOrientation); },
        "supportedOutputBins": n => { printerCapabilities.supportedOutputBins = n.getCollectionOfPrimitiveValues(); },
        "supportedPagesPerSheet": n => { printerCapabilities.supportedPagesPerSheet = n.getObject(deserializeIntoIntegerRange); },
        "supportedPresentationDirections": n => { printerCapabilities.supportedPresentationDirections = n.getEnumValues(PrintPresentationDirection); },
        "supportedPrintQualities": n => { printerCapabilities.supportedPrintQualities = n.getEnumValues(PrintQuality); },
        "supportsFitPdfToPage": n => { printerCapabilities.supportsFitPdfToPage = n.getBooleanValue(); },
        "topMargins": n => { printerCapabilities.topMargins = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoPrinterDefaults(printerDefaults = {}) {
    return {
        "colorMode": n => { printerDefaults.colorMode = n.getEnumValue(PrintColorMode); },
        "contentType": n => { printerDefaults.contentType = n.getStringValue(); },
        "copiesPerJob": n => { printerDefaults.copiesPerJob = n.getNumberValue(); },
        "documentMimeType": n => { printerDefaults.documentMimeType = n.getStringValue(); },
        "dpi": n => { printerDefaults.dpi = n.getNumberValue(); },
        "duplexConfiguration": n => { printerDefaults.duplexConfiguration = n.getEnumValue(PrintDuplexConfiguration); },
        "duplexMode": n => { printerDefaults.duplexMode = n.getEnumValue(PrintDuplexMode); },
        "finishings": n => { printerDefaults.finishings = n.getEnumValues(PrintFinishing); },
        "fitPdfToPage": n => { printerDefaults.fitPdfToPage = n.getBooleanValue(); },
        "inputBin": n => { printerDefaults.inputBin = n.getStringValue(); },
        "mediaColor": n => { printerDefaults.mediaColor = n.getStringValue(); },
        "mediaSize": n => { printerDefaults.mediaSize = n.getStringValue(); },
        "mediaType": n => { printerDefaults.mediaType = n.getStringValue(); },
        "multipageLayout": n => { printerDefaults.multipageLayout = n.getEnumValue(PrintMultipageLayout); },
        "orientation": n => { printerDefaults.orientation = n.getEnumValue(PrintOrientation); },
        "outputBin": n => { printerDefaults.outputBin = n.getStringValue(); },
        "pagesPerSheet": n => { printerDefaults.pagesPerSheet = n.getNumberValue(); },
        "pdfFitToPage": n => { printerDefaults.pdfFitToPage = n.getBooleanValue(); },
        "presentationDirection": n => { printerDefaults.presentationDirection = n.getEnumValue(PrintPresentationDirection); },
        "printColorConfiguration": n => { printerDefaults.printColorConfiguration = n.getEnumValue(PrintColorConfiguration); },
        "printQuality": n => { printerDefaults.printQuality = n.getEnumValue(PrintQuality); },
        "quality": n => { printerDefaults.quality = n.getEnumValue(PrintQuality); },
        "scaling": n => { printerDefaults.scaling = n.getEnumValue(PrintScaling); },
    };
}

var PrinterProcessingState;
(function (PrinterProcessingState) {
    PrinterProcessingState["Unknown"] = "unknown";
    PrinterProcessingState["Idle"] = "idle";
    PrinterProcessingState["Processing"] = "processing";
    PrinterProcessingState["Stopped"] = "stopped";
    PrinterProcessingState["UnknownFutureValue"] = "unknownFutureValue";
})(PrinterProcessingState || (PrinterProcessingState = {}));

var PrinterProcessingStateDetail;
(function (PrinterProcessingStateDetail) {
    PrinterProcessingStateDetail["Paused"] = "paused";
    PrinterProcessingStateDetail["MediaJam"] = "mediaJam";
    PrinterProcessingStateDetail["MediaNeeded"] = "mediaNeeded";
    PrinterProcessingStateDetail["MediaLow"] = "mediaLow";
    PrinterProcessingStateDetail["MediaEmpty"] = "mediaEmpty";
    PrinterProcessingStateDetail["CoverOpen"] = "coverOpen";
    PrinterProcessingStateDetail["InterlockOpen"] = "interlockOpen";
    PrinterProcessingStateDetail["OutputTrayMissing"] = "outputTrayMissing";
    PrinterProcessingStateDetail["OutputAreaFull"] = "outputAreaFull";
    PrinterProcessingStateDetail["MarkerSupplyLow"] = "markerSupplyLow";
    PrinterProcessingStateDetail["MarkerSupplyEmpty"] = "markerSupplyEmpty";
    PrinterProcessingStateDetail["InputTrayMissing"] = "inputTrayMissing";
    PrinterProcessingStateDetail["OutputAreaAlmostFull"] = "outputAreaAlmostFull";
    PrinterProcessingStateDetail["MarkerWasteAlmostFull"] = "markerWasteAlmostFull";
    PrinterProcessingStateDetail["MarkerWasteFull"] = "markerWasteFull";
    PrinterProcessingStateDetail["FuserOverTemp"] = "fuserOverTemp";
    PrinterProcessingStateDetail["FuserUnderTemp"] = "fuserUnderTemp";
    PrinterProcessingStateDetail["Other"] = "other";
    PrinterProcessingStateDetail["None"] = "none";
    PrinterProcessingStateDetail["MovingToPaused"] = "movingToPaused";
    PrinterProcessingStateDetail["Shutdown"] = "shutdown";
    PrinterProcessingStateDetail["ConnectingToDevice"] = "connectingToDevice";
    PrinterProcessingStateDetail["TimedOut"] = "timedOut";
    PrinterProcessingStateDetail["Stopping"] = "stopping";
    PrinterProcessingStateDetail["StoppedPartially"] = "stoppedPartially";
    PrinterProcessingStateDetail["TonerLow"] = "tonerLow";
    PrinterProcessingStateDetail["TonerEmpty"] = "tonerEmpty";
    PrinterProcessingStateDetail["SpoolAreaFull"] = "spoolAreaFull";
    PrinterProcessingStateDetail["DoorOpen"] = "doorOpen";
    PrinterProcessingStateDetail["OpticalPhotoConductorNearEndOfLife"] = "opticalPhotoConductorNearEndOfLife";
    PrinterProcessingStateDetail["OpticalPhotoConductorLifeOver"] = "opticalPhotoConductorLifeOver";
    PrinterProcessingStateDetail["DeveloperLow"] = "developerLow";
    PrinterProcessingStateDetail["DeveloperEmpty"] = "developerEmpty";
    PrinterProcessingStateDetail["InterpreterResourceUnavailable"] = "interpreterResourceUnavailable";
    PrinterProcessingStateDetail["UnknownFutureValue"] = "unknownFutureValue";
    PrinterProcessingStateDetail["AlertRemovalOfBinaryChangeEntry"] = "alertRemovalOfBinaryChangeEntry";
    PrinterProcessingStateDetail["BanderAdded"] = "banderAdded";
    PrinterProcessingStateDetail["BanderAlmostEmpty"] = "banderAlmostEmpty";
    PrinterProcessingStateDetail["BanderAlmostFull"] = "banderAlmostFull";
    PrinterProcessingStateDetail["BanderAtLimit"] = "banderAtLimit";
    PrinterProcessingStateDetail["BanderClosed"] = "banderClosed";
    PrinterProcessingStateDetail["BanderConfigurationChange"] = "banderConfigurationChange";
    PrinterProcessingStateDetail["BanderCoverClosed"] = "banderCoverClosed";
    PrinterProcessingStateDetail["BanderCoverOpen"] = "banderCoverOpen";
    PrinterProcessingStateDetail["BanderEmpty"] = "banderEmpty";
    PrinterProcessingStateDetail["BanderFull"] = "banderFull";
    PrinterProcessingStateDetail["BanderInterlockClosed"] = "banderInterlockClosed";
    PrinterProcessingStateDetail["BanderInterlockOpen"] = "banderInterlockOpen";
    PrinterProcessingStateDetail["BanderJam"] = "banderJam";
    PrinterProcessingStateDetail["BanderLifeAlmostOver"] = "banderLifeAlmostOver";
    PrinterProcessingStateDetail["BanderLifeOver"] = "banderLifeOver";
    PrinterProcessingStateDetail["BanderMemoryExhausted"] = "banderMemoryExhausted";
    PrinterProcessingStateDetail["BanderMissing"] = "banderMissing";
    PrinterProcessingStateDetail["BanderMotorFailure"] = "banderMotorFailure";
    PrinterProcessingStateDetail["BanderNearLimit"] = "banderNearLimit";
    PrinterProcessingStateDetail["BanderOffline"] = "banderOffline";
    PrinterProcessingStateDetail["BanderOpened"] = "banderOpened";
    PrinterProcessingStateDetail["BanderOverTemperature"] = "banderOverTemperature";
    PrinterProcessingStateDetail["BanderPowerSaver"] = "banderPowerSaver";
    PrinterProcessingStateDetail["BanderRecoverableFailure"] = "banderRecoverableFailure";
    PrinterProcessingStateDetail["BanderRecoverableStorage"] = "banderRecoverableStorage";
    PrinterProcessingStateDetail["BanderRemoved"] = "banderRemoved";
    PrinterProcessingStateDetail["BanderResourceAdded"] = "banderResourceAdded";
    PrinterProcessingStateDetail["BanderResourceRemoved"] = "banderResourceRemoved";
    PrinterProcessingStateDetail["BanderThermistorFailure"] = "banderThermistorFailure";
    PrinterProcessingStateDetail["BanderTimingFailure"] = "banderTimingFailure";
    PrinterProcessingStateDetail["BanderTurnedOff"] = "banderTurnedOff";
    PrinterProcessingStateDetail["BanderTurnedOn"] = "banderTurnedOn";
    PrinterProcessingStateDetail["BanderUnderTemperature"] = "banderUnderTemperature";
    PrinterProcessingStateDetail["BanderUnrecoverableFailure"] = "banderUnrecoverableFailure";
    PrinterProcessingStateDetail["BanderUnrecoverableStorageError"] = "banderUnrecoverableStorageError";
    PrinterProcessingStateDetail["BanderWarmingUp"] = "banderWarmingUp";
    PrinterProcessingStateDetail["BinderAdded"] = "binderAdded";
    PrinterProcessingStateDetail["BinderAlmostEmpty"] = "binderAlmostEmpty";
    PrinterProcessingStateDetail["BinderAlmostFull"] = "binderAlmostFull";
    PrinterProcessingStateDetail["BinderAtLimit"] = "binderAtLimit";
    PrinterProcessingStateDetail["BinderClosed"] = "binderClosed";
    PrinterProcessingStateDetail["BinderConfigurationChange"] = "binderConfigurationChange";
    PrinterProcessingStateDetail["BinderCoverClosed"] = "binderCoverClosed";
    PrinterProcessingStateDetail["BinderCoverOpen"] = "binderCoverOpen";
    PrinterProcessingStateDetail["BinderEmpty"] = "binderEmpty";
    PrinterProcessingStateDetail["BinderFull"] = "binderFull";
    PrinterProcessingStateDetail["BinderInterlockClosed"] = "binderInterlockClosed";
    PrinterProcessingStateDetail["BinderInterlockOpen"] = "binderInterlockOpen";
    PrinterProcessingStateDetail["BinderJam"] = "binderJam";
    PrinterProcessingStateDetail["BinderLifeAlmostOver"] = "binderLifeAlmostOver";
    PrinterProcessingStateDetail["BinderLifeOver"] = "binderLifeOver";
    PrinterProcessingStateDetail["BinderMemoryExhausted"] = "binderMemoryExhausted";
    PrinterProcessingStateDetail["BinderMissing"] = "binderMissing";
    PrinterProcessingStateDetail["BinderMotorFailure"] = "binderMotorFailure";
    PrinterProcessingStateDetail["BinderNearLimit"] = "binderNearLimit";
    PrinterProcessingStateDetail["BinderOffline"] = "binderOffline";
    PrinterProcessingStateDetail["BinderOpened"] = "binderOpened";
    PrinterProcessingStateDetail["BinderOverTemperature"] = "binderOverTemperature";
    PrinterProcessingStateDetail["BinderPowerSaver"] = "binderPowerSaver";
    PrinterProcessingStateDetail["BinderRecoverableFailure"] = "binderRecoverableFailure";
    PrinterProcessingStateDetail["BinderRecoverableStorage"] = "binderRecoverableStorage";
    PrinterProcessingStateDetail["BinderRemoved"] = "binderRemoved";
    PrinterProcessingStateDetail["BinderResourceAdded"] = "binderResourceAdded";
    PrinterProcessingStateDetail["BinderResourceRemoved"] = "binderResourceRemoved";
    PrinterProcessingStateDetail["BinderThermistorFailure"] = "binderThermistorFailure";
    PrinterProcessingStateDetail["BinderTimingFailure"] = "binderTimingFailure";
    PrinterProcessingStateDetail["BinderTurnedOff"] = "binderTurnedOff";
    PrinterProcessingStateDetail["BinderTurnedOn"] = "binderTurnedOn";
    PrinterProcessingStateDetail["BinderUnderTemperature"] = "binderUnderTemperature";
    PrinterProcessingStateDetail["BinderUnrecoverableFailure"] = "binderUnrecoverableFailure";
    PrinterProcessingStateDetail["BinderUnrecoverableStorageError"] = "binderUnrecoverableStorageError";
    PrinterProcessingStateDetail["BinderWarmingUp"] = "binderWarmingUp";
    PrinterProcessingStateDetail["CameraFailure"] = "cameraFailure";
    PrinterProcessingStateDetail["ChamberCooling"] = "chamberCooling";
    PrinterProcessingStateDetail["ChamberFailure"] = "chamberFailure";
    PrinterProcessingStateDetail["ChamberHeating"] = "chamberHeating";
    PrinterProcessingStateDetail["ChamberTemperatureHigh"] = "chamberTemperatureHigh";
    PrinterProcessingStateDetail["ChamberTemperatureLow"] = "chamberTemperatureLow";
    PrinterProcessingStateDetail["CleanerLifeAlmostOver"] = "cleanerLifeAlmostOver";
    PrinterProcessingStateDetail["CleanerLifeOver"] = "cleanerLifeOver";
    PrinterProcessingStateDetail["ConfigurationChange"] = "configurationChange";
    PrinterProcessingStateDetail["Deactivated"] = "deactivated";
    PrinterProcessingStateDetail["Deleted"] = "deleted";
    PrinterProcessingStateDetail["DieCutterAdded"] = "dieCutterAdded";
    PrinterProcessingStateDetail["DieCutterAlmostEmpty"] = "dieCutterAlmostEmpty";
    PrinterProcessingStateDetail["DieCutterAlmostFull"] = "dieCutterAlmostFull";
    PrinterProcessingStateDetail["DieCutterAtLimit"] = "dieCutterAtLimit";
    PrinterProcessingStateDetail["DieCutterClosed"] = "dieCutterClosed";
    PrinterProcessingStateDetail["DieCutterConfigurationChange"] = "dieCutterConfigurationChange";
    PrinterProcessingStateDetail["DieCutterCoverClosed"] = "dieCutterCoverClosed";
    PrinterProcessingStateDetail["DieCutterCoverOpen"] = "dieCutterCoverOpen";
    PrinterProcessingStateDetail["DieCutterEmpty"] = "dieCutterEmpty";
    PrinterProcessingStateDetail["DieCutterFull"] = "dieCutterFull";
    PrinterProcessingStateDetail["DieCutterInterlockClosed"] = "dieCutterInterlockClosed";
    PrinterProcessingStateDetail["DieCutterInterlockOpen"] = "dieCutterInterlockOpen";
    PrinterProcessingStateDetail["DieCutterJam"] = "dieCutterJam";
    PrinterProcessingStateDetail["DieCutterLifeAlmostOver"] = "dieCutterLifeAlmostOver";
    PrinterProcessingStateDetail["DieCutterLifeOver"] = "dieCutterLifeOver";
    PrinterProcessingStateDetail["DieCutterMemoryExhausted"] = "dieCutterMemoryExhausted";
    PrinterProcessingStateDetail["DieCutterMissing"] = "dieCutterMissing";
    PrinterProcessingStateDetail["DieCutterMotorFailure"] = "dieCutterMotorFailure";
    PrinterProcessingStateDetail["DieCutterNearLimit"] = "dieCutterNearLimit";
    PrinterProcessingStateDetail["DieCutterOffline"] = "dieCutterOffline";
    PrinterProcessingStateDetail["DieCutterOpened"] = "dieCutterOpened";
    PrinterProcessingStateDetail["DieCutterOverTemperature"] = "dieCutterOverTemperature";
    PrinterProcessingStateDetail["DieCutterPowerSaver"] = "dieCutterPowerSaver";
    PrinterProcessingStateDetail["DieCutterRecoverableFailure"] = "dieCutterRecoverableFailure";
    PrinterProcessingStateDetail["DieCutterRecoverableStorage"] = "dieCutterRecoverableStorage";
    PrinterProcessingStateDetail["DieCutterRemoved"] = "dieCutterRemoved";
    PrinterProcessingStateDetail["DieCutterResourceAdded"] = "dieCutterResourceAdded";
    PrinterProcessingStateDetail["DieCutterResourceRemoved"] = "dieCutterResourceRemoved";
    PrinterProcessingStateDetail["DieCutterThermistorFailure"] = "dieCutterThermistorFailure";
    PrinterProcessingStateDetail["DieCutterTimingFailure"] = "dieCutterTimingFailure";
    PrinterProcessingStateDetail["DieCutterTurnedOff"] = "dieCutterTurnedOff";
    PrinterProcessingStateDetail["DieCutterTurnedOn"] = "dieCutterTurnedOn";
    PrinterProcessingStateDetail["DieCutterUnderTemperature"] = "dieCutterUnderTemperature";
    PrinterProcessingStateDetail["DieCutterUnrecoverableFailure"] = "dieCutterUnrecoverableFailure";
    PrinterProcessingStateDetail["DieCutterUnrecoverableStorageError"] = "dieCutterUnrecoverableStorageError";
    PrinterProcessingStateDetail["DieCutterWarmingUp"] = "dieCutterWarmingUp";
    PrinterProcessingStateDetail["ExtruderCooling"] = "extruderCooling";
    PrinterProcessingStateDetail["ExtruderFailure"] = "extruderFailure";
    PrinterProcessingStateDetail["ExtruderHeating"] = "extruderHeating";
    PrinterProcessingStateDetail["ExtruderJam"] = "extruderJam";
    PrinterProcessingStateDetail["ExtruderTemperatureHigh"] = "extruderTemperatureHigh";
    PrinterProcessingStateDetail["ExtruderTemperatureLow"] = "extruderTemperatureLow";
    PrinterProcessingStateDetail["FanFailure"] = "fanFailure";
    PrinterProcessingStateDetail["FaxModemLifeAlmostOver"] = "faxModemLifeAlmostOver";
    PrinterProcessingStateDetail["FaxModemLifeOver"] = "faxModemLifeOver";
    PrinterProcessingStateDetail["FaxModemMissing"] = "faxModemMissing";
    PrinterProcessingStateDetail["FaxModemTurnedOff"] = "faxModemTurnedOff";
    PrinterProcessingStateDetail["FaxModemTurnedOn"] = "faxModemTurnedOn";
    PrinterProcessingStateDetail["FolderAdded"] = "folderAdded";
    PrinterProcessingStateDetail["FolderAlmostEmpty"] = "folderAlmostEmpty";
    PrinterProcessingStateDetail["FolderAlmostFull"] = "folderAlmostFull";
    PrinterProcessingStateDetail["FolderAtLimit"] = "folderAtLimit";
    PrinterProcessingStateDetail["FolderClosed"] = "folderClosed";
    PrinterProcessingStateDetail["FolderConfigurationChange"] = "folderConfigurationChange";
    PrinterProcessingStateDetail["FolderCoverClosed"] = "folderCoverClosed";
    PrinterProcessingStateDetail["FolderCoverOpen"] = "folderCoverOpen";
    PrinterProcessingStateDetail["FolderEmpty"] = "folderEmpty";
    PrinterProcessingStateDetail["FolderFull"] = "folderFull";
    PrinterProcessingStateDetail["FolderInterlockClosed"] = "folderInterlockClosed";
    PrinterProcessingStateDetail["FolderInterlockOpen"] = "folderInterlockOpen";
    PrinterProcessingStateDetail["FolderJam"] = "folderJam";
    PrinterProcessingStateDetail["FolderLifeAlmostOver"] = "folderLifeAlmostOver";
    PrinterProcessingStateDetail["FolderLifeOver"] = "folderLifeOver";
    PrinterProcessingStateDetail["FolderMemoryExhausted"] = "folderMemoryExhausted";
    PrinterProcessingStateDetail["FolderMissing"] = "folderMissing";
    PrinterProcessingStateDetail["FolderMotorFailure"] = "folderMotorFailure";
    PrinterProcessingStateDetail["FolderNearLimit"] = "folderNearLimit";
    PrinterProcessingStateDetail["FolderOffline"] = "folderOffline";
    PrinterProcessingStateDetail["FolderOpened"] = "folderOpened";
    PrinterProcessingStateDetail["FolderOverTemperature"] = "folderOverTemperature";
    PrinterProcessingStateDetail["FolderPowerSaver"] = "folderPowerSaver";
    PrinterProcessingStateDetail["FolderRecoverableFailure"] = "folderRecoverableFailure";
    PrinterProcessingStateDetail["FolderRecoverableStorage"] = "folderRecoverableStorage";
    PrinterProcessingStateDetail["FolderRemoved"] = "folderRemoved";
    PrinterProcessingStateDetail["FolderResourceAdded"] = "folderResourceAdded";
    PrinterProcessingStateDetail["FolderResourceRemoved"] = "folderResourceRemoved";
    PrinterProcessingStateDetail["FolderThermistorFailure"] = "folderThermistorFailure";
    PrinterProcessingStateDetail["FolderTimingFailure"] = "folderTimingFailure";
    PrinterProcessingStateDetail["FolderTurnedOff"] = "folderTurnedOff";
    PrinterProcessingStateDetail["FolderTurnedOn"] = "folderTurnedOn";
    PrinterProcessingStateDetail["FolderUnderTemperature"] = "folderUnderTemperature";
    PrinterProcessingStateDetail["FolderUnrecoverableFailure"] = "folderUnrecoverableFailure";
    PrinterProcessingStateDetail["FolderUnrecoverableStorageError"] = "folderUnrecoverableStorageError";
    PrinterProcessingStateDetail["FolderWarmingUp"] = "folderWarmingUp";
    PrinterProcessingStateDetail["Hibernate"] = "hibernate";
    PrinterProcessingStateDetail["HoldNewJobs"] = "holdNewJobs";
    PrinterProcessingStateDetail["IdentifyPrinterRequested"] = "identifyPrinterRequested";
    PrinterProcessingStateDetail["ImprinterAdded"] = "imprinterAdded";
    PrinterProcessingStateDetail["ImprinterAlmostEmpty"] = "imprinterAlmostEmpty";
    PrinterProcessingStateDetail["ImprinterAlmostFull"] = "imprinterAlmostFull";
    PrinterProcessingStateDetail["ImprinterAtLimit"] = "imprinterAtLimit";
    PrinterProcessingStateDetail["ImprinterClosed"] = "imprinterClosed";
    PrinterProcessingStateDetail["ImprinterConfigurationChange"] = "imprinterConfigurationChange";
    PrinterProcessingStateDetail["ImprinterCoverClosed"] = "imprinterCoverClosed";
    PrinterProcessingStateDetail["ImprinterCoverOpen"] = "imprinterCoverOpen";
    PrinterProcessingStateDetail["ImprinterEmpty"] = "imprinterEmpty";
    PrinterProcessingStateDetail["ImprinterFull"] = "imprinterFull";
    PrinterProcessingStateDetail["ImprinterInterlockClosed"] = "imprinterInterlockClosed";
    PrinterProcessingStateDetail["ImprinterInterlockOpen"] = "imprinterInterlockOpen";
    PrinterProcessingStateDetail["ImprinterJam"] = "imprinterJam";
    PrinterProcessingStateDetail["ImprinterLifeAlmostOver"] = "imprinterLifeAlmostOver";
    PrinterProcessingStateDetail["ImprinterLifeOver"] = "imprinterLifeOver";
    PrinterProcessingStateDetail["ImprinterMemoryExhausted"] = "imprinterMemoryExhausted";
    PrinterProcessingStateDetail["ImprinterMissing"] = "imprinterMissing";
    PrinterProcessingStateDetail["ImprinterMotorFailure"] = "imprinterMotorFailure";
    PrinterProcessingStateDetail["ImprinterNearLimit"] = "imprinterNearLimit";
    PrinterProcessingStateDetail["ImprinterOffline"] = "imprinterOffline";
    PrinterProcessingStateDetail["ImprinterOpened"] = "imprinterOpened";
    PrinterProcessingStateDetail["ImprinterOverTemperature"] = "imprinterOverTemperature";
    PrinterProcessingStateDetail["ImprinterPowerSaver"] = "imprinterPowerSaver";
    PrinterProcessingStateDetail["ImprinterRecoverableFailure"] = "imprinterRecoverableFailure";
    PrinterProcessingStateDetail["ImprinterRecoverableStorage"] = "imprinterRecoverableStorage";
    PrinterProcessingStateDetail["ImprinterRemoved"] = "imprinterRemoved";
    PrinterProcessingStateDetail["ImprinterResourceAdded"] = "imprinterResourceAdded";
    PrinterProcessingStateDetail["ImprinterResourceRemoved"] = "imprinterResourceRemoved";
    PrinterProcessingStateDetail["ImprinterThermistorFailure"] = "imprinterThermistorFailure";
    PrinterProcessingStateDetail["ImprinterTimingFailure"] = "imprinterTimingFailure";
    PrinterProcessingStateDetail["ImprinterTurnedOff"] = "imprinterTurnedOff";
    PrinterProcessingStateDetail["ImprinterTurnedOn"] = "imprinterTurnedOn";
    PrinterProcessingStateDetail["ImprinterUnderTemperature"] = "imprinterUnderTemperature";
    PrinterProcessingStateDetail["ImprinterUnrecoverableFailure"] = "imprinterUnrecoverableFailure";
    PrinterProcessingStateDetail["ImprinterUnrecoverableStorageError"] = "imprinterUnrecoverableStorageError";
    PrinterProcessingStateDetail["ImprinterWarmingUp"] = "imprinterWarmingUp";
    PrinterProcessingStateDetail["InputCannotFeedSizeSelected"] = "inputCannotFeedSizeSelected";
    PrinterProcessingStateDetail["InputManualInputRequest"] = "inputManualInputRequest";
    PrinterProcessingStateDetail["InputMediaColorChange"] = "inputMediaColorChange";
    PrinterProcessingStateDetail["InputMediaFormPartsChange"] = "inputMediaFormPartsChange";
    PrinterProcessingStateDetail["InputMediaSizeChange"] = "inputMediaSizeChange";
    PrinterProcessingStateDetail["InputMediaTrayFailure"] = "inputMediaTrayFailure";
    PrinterProcessingStateDetail["InputMediaTrayFeedError"] = "inputMediaTrayFeedError";
    PrinterProcessingStateDetail["InputMediaTrayJam"] = "inputMediaTrayJam";
    PrinterProcessingStateDetail["InputMediaTypeChange"] = "inputMediaTypeChange";
    PrinterProcessingStateDetail["InputMediaWeightChange"] = "inputMediaWeightChange";
    PrinterProcessingStateDetail["InputPickRollerFailure"] = "inputPickRollerFailure";
    PrinterProcessingStateDetail["InputPickRollerLifeOver"] = "inputPickRollerLifeOver";
    PrinterProcessingStateDetail["InputPickRollerLifeWarn"] = "inputPickRollerLifeWarn";
    PrinterProcessingStateDetail["InputPickRollerMissing"] = "inputPickRollerMissing";
    PrinterProcessingStateDetail["InputTrayElevationFailure"] = "inputTrayElevationFailure";
    PrinterProcessingStateDetail["InputTrayPositionFailure"] = "inputTrayPositionFailure";
    PrinterProcessingStateDetail["InserterAdded"] = "inserterAdded";
    PrinterProcessingStateDetail["InserterAlmostEmpty"] = "inserterAlmostEmpty";
    PrinterProcessingStateDetail["InserterAlmostFull"] = "inserterAlmostFull";
    PrinterProcessingStateDetail["InserterAtLimit"] = "inserterAtLimit";
    PrinterProcessingStateDetail["InserterClosed"] = "inserterClosed";
    PrinterProcessingStateDetail["InserterConfigurationChange"] = "inserterConfigurationChange";
    PrinterProcessingStateDetail["InserterCoverClosed"] = "inserterCoverClosed";
    PrinterProcessingStateDetail["InserterCoverOpen"] = "inserterCoverOpen";
    PrinterProcessingStateDetail["InserterEmpty"] = "inserterEmpty";
    PrinterProcessingStateDetail["InserterFull"] = "inserterFull";
    PrinterProcessingStateDetail["InserterInterlockClosed"] = "inserterInterlockClosed";
    PrinterProcessingStateDetail["InserterInterlockOpen"] = "inserterInterlockOpen";
    PrinterProcessingStateDetail["InserterJam"] = "inserterJam";
    PrinterProcessingStateDetail["InserterLifeAlmostOver"] = "inserterLifeAlmostOver";
    PrinterProcessingStateDetail["InserterLifeOver"] = "inserterLifeOver";
    PrinterProcessingStateDetail["InserterMemoryExhausted"] = "inserterMemoryExhausted";
    PrinterProcessingStateDetail["InserterMissing"] = "inserterMissing";
    PrinterProcessingStateDetail["InserterMotorFailure"] = "inserterMotorFailure";
    PrinterProcessingStateDetail["InserterNearLimit"] = "inserterNearLimit";
    PrinterProcessingStateDetail["InserterOffline"] = "inserterOffline";
    PrinterProcessingStateDetail["InserterOpened"] = "inserterOpened";
    PrinterProcessingStateDetail["InserterOverTemperature"] = "inserterOverTemperature";
    PrinterProcessingStateDetail["InserterPowerSaver"] = "inserterPowerSaver";
    PrinterProcessingStateDetail["InserterRecoverableFailure"] = "inserterRecoverableFailure";
    PrinterProcessingStateDetail["InserterRecoverableStorage"] = "inserterRecoverableStorage";
    PrinterProcessingStateDetail["InserterRemoved"] = "inserterRemoved";
    PrinterProcessingStateDetail["InserterResourceAdded"] = "inserterResourceAdded";
    PrinterProcessingStateDetail["InserterResourceRemoved"] = "inserterResourceRemoved";
    PrinterProcessingStateDetail["InserterThermistorFailure"] = "inserterThermistorFailure";
    PrinterProcessingStateDetail["InserterTimingFailure"] = "inserterTimingFailure";
    PrinterProcessingStateDetail["InserterTurnedOff"] = "inserterTurnedOff";
    PrinterProcessingStateDetail["InserterTurnedOn"] = "inserterTurnedOn";
    PrinterProcessingStateDetail["InserterUnderTemperature"] = "inserterUnderTemperature";
    PrinterProcessingStateDetail["InserterUnrecoverableFailure"] = "inserterUnrecoverableFailure";
    PrinterProcessingStateDetail["InserterUnrecoverableStorageError"] = "inserterUnrecoverableStorageError";
    PrinterProcessingStateDetail["InserterWarmingUp"] = "inserterWarmingUp";
    PrinterProcessingStateDetail["InterlockClosed"] = "interlockClosed";
    PrinterProcessingStateDetail["InterpreterCartridgeAdded"] = "interpreterCartridgeAdded";
    PrinterProcessingStateDetail["InterpreterCartridgeDeleted"] = "interpreterCartridgeDeleted";
    PrinterProcessingStateDetail["InterpreterComplexPageEncountered"] = "interpreterComplexPageEncountered";
    PrinterProcessingStateDetail["InterpreterMemoryDecrease"] = "interpreterMemoryDecrease";
    PrinterProcessingStateDetail["InterpreterMemoryIncrease"] = "interpreterMemoryIncrease";
    PrinterProcessingStateDetail["InterpreterResourceAdded"] = "interpreterResourceAdded";
    PrinterProcessingStateDetail["InterpreterResourceDeleted"] = "interpreterResourceDeleted";
    PrinterProcessingStateDetail["LampAtEol"] = "lampAtEol";
    PrinterProcessingStateDetail["LampFailure"] = "lampFailure";
    PrinterProcessingStateDetail["LampNearEol"] = "lampNearEol";
    PrinterProcessingStateDetail["LaserAtEol"] = "laserAtEol";
    PrinterProcessingStateDetail["LaserFailure"] = "laserFailure";
    PrinterProcessingStateDetail["LaserNearEol"] = "laserNearEol";
    PrinterProcessingStateDetail["MakeEnvelopeAdded"] = "makeEnvelopeAdded";
    PrinterProcessingStateDetail["MakeEnvelopeAlmostEmpty"] = "makeEnvelopeAlmostEmpty";
    PrinterProcessingStateDetail["MakeEnvelopeAlmostFull"] = "makeEnvelopeAlmostFull";
    PrinterProcessingStateDetail["MakeEnvelopeAtLimit"] = "makeEnvelopeAtLimit";
    PrinterProcessingStateDetail["MakeEnvelopeClosed"] = "makeEnvelopeClosed";
    PrinterProcessingStateDetail["MakeEnvelopeConfigurationChange"] = "makeEnvelopeConfigurationChange";
    PrinterProcessingStateDetail["MakeEnvelopeCoverClosed"] = "makeEnvelopeCoverClosed";
    PrinterProcessingStateDetail["MakeEnvelopeCoverOpen"] = "makeEnvelopeCoverOpen";
    PrinterProcessingStateDetail["MakeEnvelopeEmpty"] = "makeEnvelopeEmpty";
    PrinterProcessingStateDetail["MakeEnvelopeFull"] = "makeEnvelopeFull";
    PrinterProcessingStateDetail["MakeEnvelopeInterlockClosed"] = "makeEnvelopeInterlockClosed";
    PrinterProcessingStateDetail["MakeEnvelopeInterlockOpen"] = "makeEnvelopeInterlockOpen";
    PrinterProcessingStateDetail["MakeEnvelopeJam"] = "makeEnvelopeJam";
    PrinterProcessingStateDetail["MakeEnvelopeLifeAlmostOver"] = "makeEnvelopeLifeAlmostOver";
    PrinterProcessingStateDetail["MakeEnvelopeLifeOver"] = "makeEnvelopeLifeOver";
    PrinterProcessingStateDetail["MakeEnvelopeMemoryExhausted"] = "makeEnvelopeMemoryExhausted";
    PrinterProcessingStateDetail["MakeEnvelopeMissing"] = "makeEnvelopeMissing";
    PrinterProcessingStateDetail["MakeEnvelopeMotorFailure"] = "makeEnvelopeMotorFailure";
    PrinterProcessingStateDetail["MakeEnvelopeNearLimit"] = "makeEnvelopeNearLimit";
    PrinterProcessingStateDetail["MakeEnvelopeOffline"] = "makeEnvelopeOffline";
    PrinterProcessingStateDetail["MakeEnvelopeOpened"] = "makeEnvelopeOpened";
    PrinterProcessingStateDetail["MakeEnvelopeOverTemperature"] = "makeEnvelopeOverTemperature";
    PrinterProcessingStateDetail["MakeEnvelopePowerSaver"] = "makeEnvelopePowerSaver";
    PrinterProcessingStateDetail["MakeEnvelopeRecoverableFailure"] = "makeEnvelopeRecoverableFailure";
    PrinterProcessingStateDetail["MakeEnvelopeRecoverableStorage"] = "makeEnvelopeRecoverableStorage";
    PrinterProcessingStateDetail["MakeEnvelopeRemoved"] = "makeEnvelopeRemoved";
    PrinterProcessingStateDetail["MakeEnvelopeResourceAdded"] = "makeEnvelopeResourceAdded";
    PrinterProcessingStateDetail["MakeEnvelopeResourceRemoved"] = "makeEnvelopeResourceRemoved";
    PrinterProcessingStateDetail["MakeEnvelopeThermistorFailure"] = "makeEnvelopeThermistorFailure";
    PrinterProcessingStateDetail["MakeEnvelopeTimingFailure"] = "makeEnvelopeTimingFailure";
    PrinterProcessingStateDetail["MakeEnvelopeTurnedOff"] = "makeEnvelopeTurnedOff";
    PrinterProcessingStateDetail["MakeEnvelopeTurnedOn"] = "makeEnvelopeTurnedOn";
    PrinterProcessingStateDetail["MakeEnvelopeUnderTemperature"] = "makeEnvelopeUnderTemperature";
    PrinterProcessingStateDetail["MakeEnvelopeUnrecoverableFailure"] = "makeEnvelopeUnrecoverableFailure";
    PrinterProcessingStateDetail["MakeEnvelopeUnrecoverableStorageError"] = "makeEnvelopeUnrecoverableStorageError";
    PrinterProcessingStateDetail["MakeEnvelopeWarmingUp"] = "makeEnvelopeWarmingUp";
    PrinterProcessingStateDetail["MarkerAdjustingPrintQuality"] = "markerAdjustingPrintQuality";
    PrinterProcessingStateDetail["MarkerCleanerMissing"] = "markerCleanerMissing";
    PrinterProcessingStateDetail["MarkerDeveloperAlmostEmpty"] = "markerDeveloperAlmostEmpty";
    PrinterProcessingStateDetail["MarkerDeveloperEmpty"] = "markerDeveloperEmpty";
    PrinterProcessingStateDetail["MarkerDeveloperMissing"] = "markerDeveloperMissing";
    PrinterProcessingStateDetail["MarkerFuserMissing"] = "markerFuserMissing";
    PrinterProcessingStateDetail["MarkerFuserThermistorFailure"] = "markerFuserThermistorFailure";
    PrinterProcessingStateDetail["MarkerFuserTimingFailure"] = "markerFuserTimingFailure";
    PrinterProcessingStateDetail["MarkerInkAlmostEmpty"] = "markerInkAlmostEmpty";
    PrinterProcessingStateDetail["MarkerInkEmpty"] = "markerInkEmpty";
    PrinterProcessingStateDetail["MarkerInkMissing"] = "markerInkMissing";
    PrinterProcessingStateDetail["MarkerOpcMissing"] = "markerOpcMissing";
    PrinterProcessingStateDetail["MarkerPrintRibbonAlmostEmpty"] = "markerPrintRibbonAlmostEmpty";
    PrinterProcessingStateDetail["MarkerPrintRibbonEmpty"] = "markerPrintRibbonEmpty";
    PrinterProcessingStateDetail["MarkerPrintRibbonMissing"] = "markerPrintRibbonMissing";
    PrinterProcessingStateDetail["MarkerSupplyAlmostEmpty"] = "markerSupplyAlmostEmpty";
    PrinterProcessingStateDetail["MarkerSupplyMissing"] = "markerSupplyMissing";
    PrinterProcessingStateDetail["MarkerTonerCartridgeMissing"] = "markerTonerCartridgeMissing";
    PrinterProcessingStateDetail["MarkerTonerMissing"] = "markerTonerMissing";
    PrinterProcessingStateDetail["MarkerWasteInkReceptacleAlmostFull"] = "markerWasteInkReceptacleAlmostFull";
    PrinterProcessingStateDetail["MarkerWasteInkReceptacleFull"] = "markerWasteInkReceptacleFull";
    PrinterProcessingStateDetail["MarkerWasteInkReceptacleMissing"] = "markerWasteInkReceptacleMissing";
    PrinterProcessingStateDetail["MarkerWasteMissing"] = "markerWasteMissing";
    PrinterProcessingStateDetail["MarkerWasteTonerReceptacleAlmostFull"] = "markerWasteTonerReceptacleAlmostFull";
    PrinterProcessingStateDetail["MarkerWasteTonerReceptacleFull"] = "markerWasteTonerReceptacleFull";
    PrinterProcessingStateDetail["MarkerWasteTonerReceptacleMissing"] = "markerWasteTonerReceptacleMissing";
    PrinterProcessingStateDetail["MaterialEmpty"] = "materialEmpty";
    PrinterProcessingStateDetail["MaterialLow"] = "materialLow";
    PrinterProcessingStateDetail["MaterialNeeded"] = "materialNeeded";
    PrinterProcessingStateDetail["MediaDrying"] = "mediaDrying";
    PrinterProcessingStateDetail["MediaPathCannotDuplexMediaSelected"] = "mediaPathCannotDuplexMediaSelected";
    PrinterProcessingStateDetail["MediaPathFailure"] = "mediaPathFailure";
    PrinterProcessingStateDetail["MediaPathInputEmpty"] = "mediaPathInputEmpty";
    PrinterProcessingStateDetail["MediaPathInputFeedError"] = "mediaPathInputFeedError";
    PrinterProcessingStateDetail["MediaPathInputJam"] = "mediaPathInputJam";
    PrinterProcessingStateDetail["MediaPathInputRequest"] = "mediaPathInputRequest";
    PrinterProcessingStateDetail["MediaPathJam"] = "mediaPathJam";
    PrinterProcessingStateDetail["MediaPathMediaTrayAlmostFull"] = "mediaPathMediaTrayAlmostFull";
    PrinterProcessingStateDetail["MediaPathMediaTrayFull"] = "mediaPathMediaTrayFull";
    PrinterProcessingStateDetail["MediaPathMediaTrayMissing"] = "mediaPathMediaTrayMissing";
    PrinterProcessingStateDetail["MediaPathOutputFeedError"] = "mediaPathOutputFeedError";
    PrinterProcessingStateDetail["MediaPathOutputFull"] = "mediaPathOutputFull";
    PrinterProcessingStateDetail["MediaPathOutputJam"] = "mediaPathOutputJam";
    PrinterProcessingStateDetail["MediaPathPickRollerFailure"] = "mediaPathPickRollerFailure";
    PrinterProcessingStateDetail["MediaPathPickRollerLifeOver"] = "mediaPathPickRollerLifeOver";
    PrinterProcessingStateDetail["MediaPathPickRollerLifeWarn"] = "mediaPathPickRollerLifeWarn";
    PrinterProcessingStateDetail["MediaPathPickRollerMissing"] = "mediaPathPickRollerMissing";
    PrinterProcessingStateDetail["MotorFailure"] = "motorFailure";
    PrinterProcessingStateDetail["OutputMailboxSelectFailure"] = "outputMailboxSelectFailure";
    PrinterProcessingStateDetail["OutputMediaTrayFailure"] = "outputMediaTrayFailure";
    PrinterProcessingStateDetail["OutputMediaTrayFeedError"] = "outputMediaTrayFeedError";
    PrinterProcessingStateDetail["OutputMediaTrayJam"] = "outputMediaTrayJam";
    PrinterProcessingStateDetail["PerforaterAdded"] = "perforaterAdded";
    PrinterProcessingStateDetail["PerforaterAlmostEmpty"] = "perforaterAlmostEmpty";
    PrinterProcessingStateDetail["PerforaterAlmostFull"] = "perforaterAlmostFull";
    PrinterProcessingStateDetail["PerforaterAtLimit"] = "perforaterAtLimit";
    PrinterProcessingStateDetail["PerforaterClosed"] = "perforaterClosed";
    PrinterProcessingStateDetail["PerforaterConfigurationChange"] = "perforaterConfigurationChange";
    PrinterProcessingStateDetail["PerforaterCoverClosed"] = "perforaterCoverClosed";
    PrinterProcessingStateDetail["PerforaterCoverOpen"] = "perforaterCoverOpen";
    PrinterProcessingStateDetail["PerforaterEmpty"] = "perforaterEmpty";
    PrinterProcessingStateDetail["PerforaterFull"] = "perforaterFull";
    PrinterProcessingStateDetail["PerforaterInterlockClosed"] = "perforaterInterlockClosed";
    PrinterProcessingStateDetail["PerforaterInterlockOpen"] = "perforaterInterlockOpen";
    PrinterProcessingStateDetail["PerforaterJam"] = "perforaterJam";
    PrinterProcessingStateDetail["PerforaterLifeAlmostOver"] = "perforaterLifeAlmostOver";
    PrinterProcessingStateDetail["PerforaterLifeOver"] = "perforaterLifeOver";
    PrinterProcessingStateDetail["PerforaterMemoryExhausted"] = "perforaterMemoryExhausted";
    PrinterProcessingStateDetail["PerforaterMissing"] = "perforaterMissing";
    PrinterProcessingStateDetail["PerforaterMotorFailure"] = "perforaterMotorFailure";
    PrinterProcessingStateDetail["PerforaterNearLimit"] = "perforaterNearLimit";
    PrinterProcessingStateDetail["PerforaterOffline"] = "perforaterOffline";
    PrinterProcessingStateDetail["PerforaterOpened"] = "perforaterOpened";
    PrinterProcessingStateDetail["PerforaterOverTemperature"] = "perforaterOverTemperature";
    PrinterProcessingStateDetail["PerforaterPowerSaver"] = "perforaterPowerSaver";
    PrinterProcessingStateDetail["PerforaterRecoverableFailure"] = "perforaterRecoverableFailure";
    PrinterProcessingStateDetail["PerforaterRecoverableStorage"] = "perforaterRecoverableStorage";
    PrinterProcessingStateDetail["PerforaterRemoved"] = "perforaterRemoved";
    PrinterProcessingStateDetail["PerforaterResourceAdded"] = "perforaterResourceAdded";
    PrinterProcessingStateDetail["PerforaterResourceRemoved"] = "perforaterResourceRemoved";
    PrinterProcessingStateDetail["PerforaterThermistorFailure"] = "perforaterThermistorFailure";
    PrinterProcessingStateDetail["PerforaterTimingFailure"] = "perforaterTimingFailure";
    PrinterProcessingStateDetail["PerforaterTurnedOff"] = "perforaterTurnedOff";
    PrinterProcessingStateDetail["PerforaterTurnedOn"] = "perforaterTurnedOn";
    PrinterProcessingStateDetail["PerforaterUnderTemperature"] = "perforaterUnderTemperature";
    PrinterProcessingStateDetail["PerforaterUnrecoverableFailure"] = "perforaterUnrecoverableFailure";
    PrinterProcessingStateDetail["PerforaterUnrecoverableStorageError"] = "perforaterUnrecoverableStorageError";
    PrinterProcessingStateDetail["PerforaterWarmingUp"] = "perforaterWarmingUp";
    PrinterProcessingStateDetail["PlatformCooling"] = "platformCooling";
    PrinterProcessingStateDetail["PlatformFailure"] = "platformFailure";
    PrinterProcessingStateDetail["PlatformHeating"] = "platformHeating";
    PrinterProcessingStateDetail["PlatformTemperatureHigh"] = "platformTemperatureHigh";
    PrinterProcessingStateDetail["PlatformTemperatureLow"] = "platformTemperatureLow";
    PrinterProcessingStateDetail["PowerDown"] = "powerDown";
    PrinterProcessingStateDetail["PowerUp"] = "powerUp";
    PrinterProcessingStateDetail["PrinterManualReset"] = "printerManualReset";
    PrinterProcessingStateDetail["PrinterNmsReset"] = "printerNmsReset";
    PrinterProcessingStateDetail["PrinterReadyToPrint"] = "printerReadyToPrint";
    PrinterProcessingStateDetail["PuncherAdded"] = "puncherAdded";
    PrinterProcessingStateDetail["PuncherAlmostEmpty"] = "puncherAlmostEmpty";
    PrinterProcessingStateDetail["PuncherAlmostFull"] = "puncherAlmostFull";
    PrinterProcessingStateDetail["PuncherAtLimit"] = "puncherAtLimit";
    PrinterProcessingStateDetail["PuncherClosed"] = "puncherClosed";
    PrinterProcessingStateDetail["PuncherConfigurationChange"] = "puncherConfigurationChange";
    PrinterProcessingStateDetail["PuncherCoverClosed"] = "puncherCoverClosed";
    PrinterProcessingStateDetail["PuncherCoverOpen"] = "puncherCoverOpen";
    PrinterProcessingStateDetail["PuncherEmpty"] = "puncherEmpty";
    PrinterProcessingStateDetail["PuncherFull"] = "puncherFull";
    PrinterProcessingStateDetail["PuncherInterlockClosed"] = "puncherInterlockClosed";
    PrinterProcessingStateDetail["PuncherInterlockOpen"] = "puncherInterlockOpen";
    PrinterProcessingStateDetail["PuncherJam"] = "puncherJam";
    PrinterProcessingStateDetail["PuncherLifeAlmostOver"] = "puncherLifeAlmostOver";
    PrinterProcessingStateDetail["PuncherLifeOver"] = "puncherLifeOver";
    PrinterProcessingStateDetail["PuncherMemoryExhausted"] = "puncherMemoryExhausted";
    PrinterProcessingStateDetail["PuncherMissing"] = "puncherMissing";
    PrinterProcessingStateDetail["PuncherMotorFailure"] = "puncherMotorFailure";
    PrinterProcessingStateDetail["PuncherNearLimit"] = "puncherNearLimit";
    PrinterProcessingStateDetail["PuncherOffline"] = "puncherOffline";
    PrinterProcessingStateDetail["PuncherOpened"] = "puncherOpened";
    PrinterProcessingStateDetail["PuncherOverTemperature"] = "puncherOverTemperature";
    PrinterProcessingStateDetail["PuncherPowerSaver"] = "puncherPowerSaver";
    PrinterProcessingStateDetail["PuncherRecoverableFailure"] = "puncherRecoverableFailure";
    PrinterProcessingStateDetail["PuncherRecoverableStorage"] = "puncherRecoverableStorage";
    PrinterProcessingStateDetail["PuncherRemoved"] = "puncherRemoved";
    PrinterProcessingStateDetail["PuncherResourceAdded"] = "puncherResourceAdded";
    PrinterProcessingStateDetail["PuncherResourceRemoved"] = "puncherResourceRemoved";
    PrinterProcessingStateDetail["PuncherThermistorFailure"] = "puncherThermistorFailure";
    PrinterProcessingStateDetail["PuncherTimingFailure"] = "puncherTimingFailure";
    PrinterProcessingStateDetail["PuncherTurnedOff"] = "puncherTurnedOff";
    PrinterProcessingStateDetail["PuncherTurnedOn"] = "puncherTurnedOn";
    PrinterProcessingStateDetail["PuncherUnderTemperature"] = "puncherUnderTemperature";
    PrinterProcessingStateDetail["PuncherUnrecoverableFailure"] = "puncherUnrecoverableFailure";
    PrinterProcessingStateDetail["PuncherUnrecoverableStorageError"] = "puncherUnrecoverableStorageError";
    PrinterProcessingStateDetail["PuncherWarmingUp"] = "puncherWarmingUp";
    PrinterProcessingStateDetail["Resuming"] = "resuming";
    PrinterProcessingStateDetail["ScanMediaPathFailure"] = "scanMediaPathFailure";
    PrinterProcessingStateDetail["ScanMediaPathInputEmpty"] = "scanMediaPathInputEmpty";
    PrinterProcessingStateDetail["ScanMediaPathInputFeedError"] = "scanMediaPathInputFeedError";
    PrinterProcessingStateDetail["ScanMediaPathInputJam"] = "scanMediaPathInputJam";
    PrinterProcessingStateDetail["ScanMediaPathInputRequest"] = "scanMediaPathInputRequest";
    PrinterProcessingStateDetail["ScanMediaPathJam"] = "scanMediaPathJam";
    PrinterProcessingStateDetail["ScanMediaPathOutputFeedError"] = "scanMediaPathOutputFeedError";
    PrinterProcessingStateDetail["ScanMediaPathOutputFull"] = "scanMediaPathOutputFull";
    PrinterProcessingStateDetail["ScanMediaPathOutputJam"] = "scanMediaPathOutputJam";
    PrinterProcessingStateDetail["ScanMediaPathPickRollerFailure"] = "scanMediaPathPickRollerFailure";
    PrinterProcessingStateDetail["ScanMediaPathPickRollerLifeOver"] = "scanMediaPathPickRollerLifeOver";
    PrinterProcessingStateDetail["ScanMediaPathPickRollerLifeWarn"] = "scanMediaPathPickRollerLifeWarn";
    PrinterProcessingStateDetail["ScanMediaPathPickRollerMissing"] = "scanMediaPathPickRollerMissing";
    PrinterProcessingStateDetail["ScanMediaPathTrayAlmostFull"] = "scanMediaPathTrayAlmostFull";
    PrinterProcessingStateDetail["ScanMediaPathTrayFull"] = "scanMediaPathTrayFull";
    PrinterProcessingStateDetail["ScanMediaPathTrayMissing"] = "scanMediaPathTrayMissing";
    PrinterProcessingStateDetail["ScannerLightFailure"] = "scannerLightFailure";
    PrinterProcessingStateDetail["ScannerLightLifeAlmostOver"] = "scannerLightLifeAlmostOver";
    PrinterProcessingStateDetail["ScannerLightLifeOver"] = "scannerLightLifeOver";
    PrinterProcessingStateDetail["ScannerLightMissing"] = "scannerLightMissing";
    PrinterProcessingStateDetail["ScannerSensorFailure"] = "scannerSensorFailure";
    PrinterProcessingStateDetail["ScannerSensorLifeAlmostOver"] = "scannerSensorLifeAlmostOver";
    PrinterProcessingStateDetail["ScannerSensorLifeOver"] = "scannerSensorLifeOver";
    PrinterProcessingStateDetail["ScannerSensorMissing"] = "scannerSensorMissing";
    PrinterProcessingStateDetail["SeparationCutterAdded"] = "separationCutterAdded";
    PrinterProcessingStateDetail["SeparationCutterAlmostEmpty"] = "separationCutterAlmostEmpty";
    PrinterProcessingStateDetail["SeparationCutterAlmostFull"] = "separationCutterAlmostFull";
    PrinterProcessingStateDetail["SeparationCutterAtLimit"] = "separationCutterAtLimit";
    PrinterProcessingStateDetail["SeparationCutterClosed"] = "separationCutterClosed";
    PrinterProcessingStateDetail["SeparationCutterConfigurationChange"] = "separationCutterConfigurationChange";
    PrinterProcessingStateDetail["SeparationCutterCoverClosed"] = "separationCutterCoverClosed";
    PrinterProcessingStateDetail["SeparationCutterCoverOpen"] = "separationCutterCoverOpen";
    PrinterProcessingStateDetail["SeparationCutterEmpty"] = "separationCutterEmpty";
    PrinterProcessingStateDetail["SeparationCutterFull"] = "separationCutterFull";
    PrinterProcessingStateDetail["SeparationCutterInterlockClosed"] = "separationCutterInterlockClosed";
    PrinterProcessingStateDetail["SeparationCutterInterlockOpen"] = "separationCutterInterlockOpen";
    PrinterProcessingStateDetail["SeparationCutterJam"] = "separationCutterJam";
    PrinterProcessingStateDetail["SeparationCutterLifeAlmostOver"] = "separationCutterLifeAlmostOver";
    PrinterProcessingStateDetail["SeparationCutterLifeOver"] = "separationCutterLifeOver";
    PrinterProcessingStateDetail["SeparationCutterMemoryExhausted"] = "separationCutterMemoryExhausted";
    PrinterProcessingStateDetail["SeparationCutterMissing"] = "separationCutterMissing";
    PrinterProcessingStateDetail["SeparationCutterMotorFailure"] = "separationCutterMotorFailure";
    PrinterProcessingStateDetail["SeparationCutterNearLimit"] = "separationCutterNearLimit";
    PrinterProcessingStateDetail["SeparationCutterOffline"] = "separationCutterOffline";
    PrinterProcessingStateDetail["SeparationCutterOpened"] = "separationCutterOpened";
    PrinterProcessingStateDetail["SeparationCutterOverTemperature"] = "separationCutterOverTemperature";
    PrinterProcessingStateDetail["SeparationCutterPowerSaver"] = "separationCutterPowerSaver";
    PrinterProcessingStateDetail["SeparationCutterRecoverableFailure"] = "separationCutterRecoverableFailure";
    PrinterProcessingStateDetail["SeparationCutterRecoverableStorage"] = "separationCutterRecoverableStorage";
    PrinterProcessingStateDetail["SeparationCutterRemoved"] = "separationCutterRemoved";
    PrinterProcessingStateDetail["SeparationCutterResourceAdded"] = "separationCutterResourceAdded";
    PrinterProcessingStateDetail["SeparationCutterResourceRemoved"] = "separationCutterResourceRemoved";
    PrinterProcessingStateDetail["SeparationCutterThermistorFailure"] = "separationCutterThermistorFailure";
    PrinterProcessingStateDetail["SeparationCutterTimingFailure"] = "separationCutterTimingFailure";
    PrinterProcessingStateDetail["SeparationCutterTurnedOff"] = "separationCutterTurnedOff";
    PrinterProcessingStateDetail["SeparationCutterTurnedOn"] = "separationCutterTurnedOn";
    PrinterProcessingStateDetail["SeparationCutterUnderTemperature"] = "separationCutterUnderTemperature";
    PrinterProcessingStateDetail["SeparationCutterUnrecoverableFailure"] = "separationCutterUnrecoverableFailure";
    PrinterProcessingStateDetail["SeparationCutterUnrecoverableStorageError"] = "separationCutterUnrecoverableStorageError";
    PrinterProcessingStateDetail["SeparationCutterWarmingUp"] = "separationCutterWarmingUp";
    PrinterProcessingStateDetail["SheetRotatorAdded"] = "sheetRotatorAdded";
    PrinterProcessingStateDetail["SheetRotatorAlmostEmpty"] = "sheetRotatorAlmostEmpty";
    PrinterProcessingStateDetail["SheetRotatorAlmostFull"] = "sheetRotatorAlmostFull";
    PrinterProcessingStateDetail["SheetRotatorAtLimit"] = "sheetRotatorAtLimit";
    PrinterProcessingStateDetail["SheetRotatorClosed"] = "sheetRotatorClosed";
    PrinterProcessingStateDetail["SheetRotatorConfigurationChange"] = "sheetRotatorConfigurationChange";
    PrinterProcessingStateDetail["SheetRotatorCoverClosed"] = "sheetRotatorCoverClosed";
    PrinterProcessingStateDetail["SheetRotatorCoverOpen"] = "sheetRotatorCoverOpen";
    PrinterProcessingStateDetail["SheetRotatorEmpty"] = "sheetRotatorEmpty";
    PrinterProcessingStateDetail["SheetRotatorFull"] = "sheetRotatorFull";
    PrinterProcessingStateDetail["SheetRotatorInterlockClosed"] = "sheetRotatorInterlockClosed";
    PrinterProcessingStateDetail["SheetRotatorInterlockOpen"] = "sheetRotatorInterlockOpen";
    PrinterProcessingStateDetail["SheetRotatorJam"] = "sheetRotatorJam";
    PrinterProcessingStateDetail["SheetRotatorLifeAlmostOver"] = "sheetRotatorLifeAlmostOver";
    PrinterProcessingStateDetail["SheetRotatorLifeOver"] = "sheetRotatorLifeOver";
    PrinterProcessingStateDetail["SheetRotatorMemoryExhausted"] = "sheetRotatorMemoryExhausted";
    PrinterProcessingStateDetail["SheetRotatorMissing"] = "sheetRotatorMissing";
    PrinterProcessingStateDetail["SheetRotatorMotorFailure"] = "sheetRotatorMotorFailure";
    PrinterProcessingStateDetail["SheetRotatorNearLimit"] = "sheetRotatorNearLimit";
    PrinterProcessingStateDetail["SheetRotatorOffline"] = "sheetRotatorOffline";
    PrinterProcessingStateDetail["SheetRotatorOpened"] = "sheetRotatorOpened";
    PrinterProcessingStateDetail["SheetRotatorOverTemperature"] = "sheetRotatorOverTemperature";
    PrinterProcessingStateDetail["SheetRotatorPowerSaver"] = "sheetRotatorPowerSaver";
    PrinterProcessingStateDetail["SheetRotatorRecoverableFailure"] = "sheetRotatorRecoverableFailure";
    PrinterProcessingStateDetail["SheetRotatorRecoverableStorage"] = "sheetRotatorRecoverableStorage";
    PrinterProcessingStateDetail["SheetRotatorRemoved"] = "sheetRotatorRemoved";
    PrinterProcessingStateDetail["SheetRotatorResourceAdded"] = "sheetRotatorResourceAdded";
    PrinterProcessingStateDetail["SheetRotatorResourceRemoved"] = "sheetRotatorResourceRemoved";
    PrinterProcessingStateDetail["SheetRotatorThermistorFailure"] = "sheetRotatorThermistorFailure";
    PrinterProcessingStateDetail["SheetRotatorTimingFailure"] = "sheetRotatorTimingFailure";
    PrinterProcessingStateDetail["SheetRotatorTurnedOff"] = "sheetRotatorTurnedOff";
    PrinterProcessingStateDetail["SheetRotatorTurnedOn"] = "sheetRotatorTurnedOn";
    PrinterProcessingStateDetail["SheetRotatorUnderTemperature"] = "sheetRotatorUnderTemperature";
    PrinterProcessingStateDetail["SheetRotatorUnrecoverableFailure"] = "sheetRotatorUnrecoverableFailure";
    PrinterProcessingStateDetail["SheetRotatorUnrecoverableStorageError"] = "sheetRotatorUnrecoverableStorageError";
    PrinterProcessingStateDetail["SheetRotatorWarmingUp"] = "sheetRotatorWarmingUp";
    PrinterProcessingStateDetail["SlitterAdded"] = "slitterAdded";
    PrinterProcessingStateDetail["SlitterAlmostEmpty"] = "slitterAlmostEmpty";
    PrinterProcessingStateDetail["SlitterAlmostFull"] = "slitterAlmostFull";
    PrinterProcessingStateDetail["SlitterAtLimit"] = "slitterAtLimit";
    PrinterProcessingStateDetail["SlitterClosed"] = "slitterClosed";
    PrinterProcessingStateDetail["SlitterConfigurationChange"] = "slitterConfigurationChange";
    PrinterProcessingStateDetail["SlitterCoverClosed"] = "slitterCoverClosed";
    PrinterProcessingStateDetail["SlitterCoverOpen"] = "slitterCoverOpen";
    PrinterProcessingStateDetail["SlitterEmpty"] = "slitterEmpty";
    PrinterProcessingStateDetail["SlitterFull"] = "slitterFull";
    PrinterProcessingStateDetail["SlitterInterlockClosed"] = "slitterInterlockClosed";
    PrinterProcessingStateDetail["SlitterInterlockOpen"] = "slitterInterlockOpen";
    PrinterProcessingStateDetail["SlitterJam"] = "slitterJam";
    PrinterProcessingStateDetail["SlitterLifeAlmostOver"] = "slitterLifeAlmostOver";
    PrinterProcessingStateDetail["SlitterLifeOver"] = "slitterLifeOver";
    PrinterProcessingStateDetail["SlitterMemoryExhausted"] = "slitterMemoryExhausted";
    PrinterProcessingStateDetail["SlitterMissing"] = "slitterMissing";
    PrinterProcessingStateDetail["SlitterMotorFailure"] = "slitterMotorFailure";
    PrinterProcessingStateDetail["SlitterNearLimit"] = "slitterNearLimit";
    PrinterProcessingStateDetail["SlitterOffline"] = "slitterOffline";
    PrinterProcessingStateDetail["SlitterOpened"] = "slitterOpened";
    PrinterProcessingStateDetail["SlitterOverTemperature"] = "slitterOverTemperature";
    PrinterProcessingStateDetail["SlitterPowerSaver"] = "slitterPowerSaver";
    PrinterProcessingStateDetail["SlitterRecoverableFailure"] = "slitterRecoverableFailure";
    PrinterProcessingStateDetail["SlitterRecoverableStorage"] = "slitterRecoverableStorage";
    PrinterProcessingStateDetail["SlitterRemoved"] = "slitterRemoved";
    PrinterProcessingStateDetail["SlitterResourceAdded"] = "slitterResourceAdded";
    PrinterProcessingStateDetail["SlitterResourceRemoved"] = "slitterResourceRemoved";
    PrinterProcessingStateDetail["SlitterThermistorFailure"] = "slitterThermistorFailure";
    PrinterProcessingStateDetail["SlitterTimingFailure"] = "slitterTimingFailure";
    PrinterProcessingStateDetail["SlitterTurnedOff"] = "slitterTurnedOff";
    PrinterProcessingStateDetail["SlitterTurnedOn"] = "slitterTurnedOn";
    PrinterProcessingStateDetail["SlitterUnderTemperature"] = "slitterUnderTemperature";
    PrinterProcessingStateDetail["SlitterUnrecoverableFailure"] = "slitterUnrecoverableFailure";
    PrinterProcessingStateDetail["SlitterUnrecoverableStorageError"] = "slitterUnrecoverableStorageError";
    PrinterProcessingStateDetail["SlitterWarmingUp"] = "slitterWarmingUp";
    PrinterProcessingStateDetail["StackerAdded"] = "stackerAdded";
    PrinterProcessingStateDetail["StackerAlmostEmpty"] = "stackerAlmostEmpty";
    PrinterProcessingStateDetail["StackerAlmostFull"] = "stackerAlmostFull";
    PrinterProcessingStateDetail["StackerAtLimit"] = "stackerAtLimit";
    PrinterProcessingStateDetail["StackerClosed"] = "stackerClosed";
    PrinterProcessingStateDetail["StackerConfigurationChange"] = "stackerConfigurationChange";
    PrinterProcessingStateDetail["StackerCoverClosed"] = "stackerCoverClosed";
    PrinterProcessingStateDetail["StackerCoverOpen"] = "stackerCoverOpen";
    PrinterProcessingStateDetail["StackerEmpty"] = "stackerEmpty";
    PrinterProcessingStateDetail["StackerFull"] = "stackerFull";
    PrinterProcessingStateDetail["StackerInterlockClosed"] = "stackerInterlockClosed";
    PrinterProcessingStateDetail["StackerInterlockOpen"] = "stackerInterlockOpen";
    PrinterProcessingStateDetail["StackerJam"] = "stackerJam";
    PrinterProcessingStateDetail["StackerLifeAlmostOver"] = "stackerLifeAlmostOver";
    PrinterProcessingStateDetail["StackerLifeOver"] = "stackerLifeOver";
    PrinterProcessingStateDetail["StackerMemoryExhausted"] = "stackerMemoryExhausted";
    PrinterProcessingStateDetail["StackerMissing"] = "stackerMissing";
    PrinterProcessingStateDetail["StackerMotorFailure"] = "stackerMotorFailure";
    PrinterProcessingStateDetail["StackerNearLimit"] = "stackerNearLimit";
    PrinterProcessingStateDetail["StackerOffline"] = "stackerOffline";
    PrinterProcessingStateDetail["StackerOpened"] = "stackerOpened";
    PrinterProcessingStateDetail["StackerOverTemperature"] = "stackerOverTemperature";
    PrinterProcessingStateDetail["StackerPowerSaver"] = "stackerPowerSaver";
    PrinterProcessingStateDetail["StackerRecoverableFailure"] = "stackerRecoverableFailure";
    PrinterProcessingStateDetail["StackerRecoverableStorage"] = "stackerRecoverableStorage";
    PrinterProcessingStateDetail["StackerRemoved"] = "stackerRemoved";
    PrinterProcessingStateDetail["StackerResourceAdded"] = "stackerResourceAdded";
    PrinterProcessingStateDetail["StackerResourceRemoved"] = "stackerResourceRemoved";
    PrinterProcessingStateDetail["StackerThermistorFailure"] = "stackerThermistorFailure";
    PrinterProcessingStateDetail["StackerTimingFailure"] = "stackerTimingFailure";
    PrinterProcessingStateDetail["StackerTurnedOff"] = "stackerTurnedOff";
    PrinterProcessingStateDetail["StackerTurnedOn"] = "stackerTurnedOn";
    PrinterProcessingStateDetail["StackerUnderTemperature"] = "stackerUnderTemperature";
    PrinterProcessingStateDetail["StackerUnrecoverableFailure"] = "stackerUnrecoverableFailure";
    PrinterProcessingStateDetail["StackerUnrecoverableStorageError"] = "stackerUnrecoverableStorageError";
    PrinterProcessingStateDetail["StackerWarmingUp"] = "stackerWarmingUp";
    PrinterProcessingStateDetail["Standby"] = "standby";
    PrinterProcessingStateDetail["StaplerAdded"] = "staplerAdded";
    PrinterProcessingStateDetail["StaplerAlmostEmpty"] = "staplerAlmostEmpty";
    PrinterProcessingStateDetail["StaplerAlmostFull"] = "staplerAlmostFull";
    PrinterProcessingStateDetail["StaplerAtLimit"] = "staplerAtLimit";
    PrinterProcessingStateDetail["StaplerClosed"] = "staplerClosed";
    PrinterProcessingStateDetail["StaplerConfigurationChange"] = "staplerConfigurationChange";
    PrinterProcessingStateDetail["StaplerCoverClosed"] = "staplerCoverClosed";
    PrinterProcessingStateDetail["StaplerCoverOpen"] = "staplerCoverOpen";
    PrinterProcessingStateDetail["StaplerEmpty"] = "staplerEmpty";
    PrinterProcessingStateDetail["StaplerFull"] = "staplerFull";
    PrinterProcessingStateDetail["StaplerInterlockClosed"] = "staplerInterlockClosed";
    PrinterProcessingStateDetail["StaplerInterlockOpen"] = "staplerInterlockOpen";
    PrinterProcessingStateDetail["StaplerJam"] = "staplerJam";
    PrinterProcessingStateDetail["StaplerLifeAlmostOver"] = "staplerLifeAlmostOver";
    PrinterProcessingStateDetail["StaplerLifeOver"] = "staplerLifeOver";
    PrinterProcessingStateDetail["StaplerMemoryExhausted"] = "staplerMemoryExhausted";
    PrinterProcessingStateDetail["StaplerMissing"] = "staplerMissing";
    PrinterProcessingStateDetail["StaplerMotorFailure"] = "staplerMotorFailure";
    PrinterProcessingStateDetail["StaplerNearLimit"] = "staplerNearLimit";
    PrinterProcessingStateDetail["StaplerOffline"] = "staplerOffline";
    PrinterProcessingStateDetail["StaplerOpened"] = "staplerOpened";
    PrinterProcessingStateDetail["StaplerOverTemperature"] = "staplerOverTemperature";
    PrinterProcessingStateDetail["StaplerPowerSaver"] = "staplerPowerSaver";
    PrinterProcessingStateDetail["StaplerRecoverableFailure"] = "staplerRecoverableFailure";
    PrinterProcessingStateDetail["StaplerRecoverableStorage"] = "staplerRecoverableStorage";
    PrinterProcessingStateDetail["StaplerRemoved"] = "staplerRemoved";
    PrinterProcessingStateDetail["StaplerResourceAdded"] = "staplerResourceAdded";
    PrinterProcessingStateDetail["StaplerResourceRemoved"] = "staplerResourceRemoved";
    PrinterProcessingStateDetail["StaplerThermistorFailure"] = "staplerThermistorFailure";
    PrinterProcessingStateDetail["StaplerTimingFailure"] = "staplerTimingFailure";
    PrinterProcessingStateDetail["StaplerTurnedOff"] = "staplerTurnedOff";
    PrinterProcessingStateDetail["StaplerTurnedOn"] = "staplerTurnedOn";
    PrinterProcessingStateDetail["StaplerUnderTemperature"] = "staplerUnderTemperature";
    PrinterProcessingStateDetail["StaplerUnrecoverableFailure"] = "staplerUnrecoverableFailure";
    PrinterProcessingStateDetail["StaplerUnrecoverableStorageError"] = "staplerUnrecoverableStorageError";
    PrinterProcessingStateDetail["StaplerWarmingUp"] = "staplerWarmingUp";
    PrinterProcessingStateDetail["StitcherAdded"] = "stitcherAdded";
    PrinterProcessingStateDetail["StitcherAlmostEmpty"] = "stitcherAlmostEmpty";
    PrinterProcessingStateDetail["StitcherAlmostFull"] = "stitcherAlmostFull";
    PrinterProcessingStateDetail["StitcherAtLimit"] = "stitcherAtLimit";
    PrinterProcessingStateDetail["StitcherClosed"] = "stitcherClosed";
    PrinterProcessingStateDetail["StitcherConfigurationChange"] = "stitcherConfigurationChange";
    PrinterProcessingStateDetail["StitcherCoverClosed"] = "stitcherCoverClosed";
    PrinterProcessingStateDetail["StitcherCoverOpen"] = "stitcherCoverOpen";
    PrinterProcessingStateDetail["StitcherEmpty"] = "stitcherEmpty";
    PrinterProcessingStateDetail["StitcherFull"] = "stitcherFull";
    PrinterProcessingStateDetail["StitcherInterlockClosed"] = "stitcherInterlockClosed";
    PrinterProcessingStateDetail["StitcherInterlockOpen"] = "stitcherInterlockOpen";
    PrinterProcessingStateDetail["StitcherJam"] = "stitcherJam";
    PrinterProcessingStateDetail["StitcherLifeAlmostOver"] = "stitcherLifeAlmostOver";
    PrinterProcessingStateDetail["StitcherLifeOver"] = "stitcherLifeOver";
    PrinterProcessingStateDetail["StitcherMemoryExhausted"] = "stitcherMemoryExhausted";
    PrinterProcessingStateDetail["StitcherMissing"] = "stitcherMissing";
    PrinterProcessingStateDetail["StitcherMotorFailure"] = "stitcherMotorFailure";
    PrinterProcessingStateDetail["StitcherNearLimit"] = "stitcherNearLimit";
    PrinterProcessingStateDetail["StitcherOffline"] = "stitcherOffline";
    PrinterProcessingStateDetail["StitcherOpened"] = "stitcherOpened";
    PrinterProcessingStateDetail["StitcherOverTemperature"] = "stitcherOverTemperature";
    PrinterProcessingStateDetail["StitcherPowerSaver"] = "stitcherPowerSaver";
    PrinterProcessingStateDetail["StitcherRecoverableFailure"] = "stitcherRecoverableFailure";
    PrinterProcessingStateDetail["StitcherRecoverableStorage"] = "stitcherRecoverableStorage";
    PrinterProcessingStateDetail["StitcherRemoved"] = "stitcherRemoved";
    PrinterProcessingStateDetail["StitcherResourceAdded"] = "stitcherResourceAdded";
    PrinterProcessingStateDetail["StitcherResourceRemoved"] = "stitcherResourceRemoved";
    PrinterProcessingStateDetail["StitcherThermistorFailure"] = "stitcherThermistorFailure";
    PrinterProcessingStateDetail["StitcherTimingFailure"] = "stitcherTimingFailure";
    PrinterProcessingStateDetail["StitcherTurnedOff"] = "stitcherTurnedOff";
    PrinterProcessingStateDetail["StitcherTurnedOn"] = "stitcherTurnedOn";
    PrinterProcessingStateDetail["StitcherUnderTemperature"] = "stitcherUnderTemperature";
    PrinterProcessingStateDetail["StitcherUnrecoverableFailure"] = "stitcherUnrecoverableFailure";
    PrinterProcessingStateDetail["StitcherUnrecoverableStorageError"] = "stitcherUnrecoverableStorageError";
    PrinterProcessingStateDetail["StitcherWarmingUp"] = "stitcherWarmingUp";
    PrinterProcessingStateDetail["SubunitAdded"] = "subunitAdded";
    PrinterProcessingStateDetail["SubunitAlmostEmpty"] = "subunitAlmostEmpty";
    PrinterProcessingStateDetail["SubunitAlmostFull"] = "subunitAlmostFull";
    PrinterProcessingStateDetail["SubunitAtLimit"] = "subunitAtLimit";
    PrinterProcessingStateDetail["SubunitClosed"] = "subunitClosed";
    PrinterProcessingStateDetail["SubunitCoolingDown"] = "subunitCoolingDown";
    PrinterProcessingStateDetail["SubunitEmpty"] = "subunitEmpty";
    PrinterProcessingStateDetail["SubunitFull"] = "subunitFull";
    PrinterProcessingStateDetail["SubunitLifeAlmostOver"] = "subunitLifeAlmostOver";
    PrinterProcessingStateDetail["SubunitLifeOver"] = "subunitLifeOver";
    PrinterProcessingStateDetail["SubunitMemoryExhausted"] = "subunitMemoryExhausted";
    PrinterProcessingStateDetail["SubunitMissing"] = "subunitMissing";
    PrinterProcessingStateDetail["SubunitMotorFailure"] = "subunitMotorFailure";
    PrinterProcessingStateDetail["SubunitNearLimit"] = "subunitNearLimit";
    PrinterProcessingStateDetail["SubunitOffline"] = "subunitOffline";
    PrinterProcessingStateDetail["SubunitOpened"] = "subunitOpened";
    PrinterProcessingStateDetail["SubunitOverTemperature"] = "subunitOverTemperature";
    PrinterProcessingStateDetail["SubunitPowerSaver"] = "subunitPowerSaver";
    PrinterProcessingStateDetail["SubunitRecoverableFailure"] = "subunitRecoverableFailure";
    PrinterProcessingStateDetail["SubunitRecoverableStorage"] = "subunitRecoverableStorage";
    PrinterProcessingStateDetail["SubunitRemoved"] = "subunitRemoved";
    PrinterProcessingStateDetail["SubunitResourceAdded"] = "subunitResourceAdded";
    PrinterProcessingStateDetail["SubunitResourceRemoved"] = "subunitResourceRemoved";
    PrinterProcessingStateDetail["SubunitThermistorFailure"] = "subunitThermistorFailure";
    PrinterProcessingStateDetail["SubunitTimingFailure"] = "subunitTimingFailure";
    PrinterProcessingStateDetail["SubunitTurnedOff"] = "subunitTurnedOff";
    PrinterProcessingStateDetail["SubunitTurnedOn"] = "subunitTurnedOn";
    PrinterProcessingStateDetail["SubunitUnderTemperature"] = "subunitUnderTemperature";
    PrinterProcessingStateDetail["SubunitUnrecoverableFailure"] = "subunitUnrecoverableFailure";
    PrinterProcessingStateDetail["SubunitUnrecoverableStorage"] = "subunitUnrecoverableStorage";
    PrinterProcessingStateDetail["SubunitWarmingUp"] = "subunitWarmingUp";
    PrinterProcessingStateDetail["Suspend"] = "suspend";
    PrinterProcessingStateDetail["Testing"] = "testing";
    PrinterProcessingStateDetail["TrimmerAdded"] = "trimmerAdded";
    PrinterProcessingStateDetail["TrimmerAlmostEmpty"] = "trimmerAlmostEmpty";
    PrinterProcessingStateDetail["TrimmerAlmostFull"] = "trimmerAlmostFull";
    PrinterProcessingStateDetail["TrimmerAtLimit"] = "trimmerAtLimit";
    PrinterProcessingStateDetail["TrimmerClosed"] = "trimmerClosed";
    PrinterProcessingStateDetail["TrimmerConfigurationChange"] = "trimmerConfigurationChange";
    PrinterProcessingStateDetail["TrimmerCoverClosed"] = "trimmerCoverClosed";
    PrinterProcessingStateDetail["TrimmerCoverOpen"] = "trimmerCoverOpen";
    PrinterProcessingStateDetail["TrimmerEmpty"] = "trimmerEmpty";
    PrinterProcessingStateDetail["TrimmerFull"] = "trimmerFull";
    PrinterProcessingStateDetail["TrimmerInterlockClosed"] = "trimmerInterlockClosed";
    PrinterProcessingStateDetail["TrimmerInterlockOpen"] = "trimmerInterlockOpen";
    PrinterProcessingStateDetail["TrimmerJam"] = "trimmerJam";
    PrinterProcessingStateDetail["TrimmerLifeAlmostOver"] = "trimmerLifeAlmostOver";
    PrinterProcessingStateDetail["TrimmerLifeOver"] = "trimmerLifeOver";
    PrinterProcessingStateDetail["TrimmerMemoryExhausted"] = "trimmerMemoryExhausted";
    PrinterProcessingStateDetail["TrimmerMissing"] = "trimmerMissing";
    PrinterProcessingStateDetail["TrimmerMotorFailure"] = "trimmerMotorFailure";
    PrinterProcessingStateDetail["TrimmerNearLimit"] = "trimmerNearLimit";
    PrinterProcessingStateDetail["TrimmerOffline"] = "trimmerOffline";
    PrinterProcessingStateDetail["TrimmerOpened"] = "trimmerOpened";
    PrinterProcessingStateDetail["TrimmerOverTemperature"] = "trimmerOverTemperature";
    PrinterProcessingStateDetail["TrimmerPowerSaver"] = "trimmerPowerSaver";
    PrinterProcessingStateDetail["TrimmerRecoverableFailure"] = "trimmerRecoverableFailure";
    PrinterProcessingStateDetail["TrimmerRecoverableStorage"] = "trimmerRecoverableStorage";
    PrinterProcessingStateDetail["TrimmerRemoved"] = "trimmerRemoved";
    PrinterProcessingStateDetail["TrimmerResourceAdded"] = "trimmerResourceAdded";
    PrinterProcessingStateDetail["TrimmerResourceRemoved"] = "trimmerResourceRemoved";
    PrinterProcessingStateDetail["TrimmerThermistorFailure"] = "trimmerThermistorFailure";
    PrinterProcessingStateDetail["TrimmerTimingFailure"] = "trimmerTimingFailure";
    PrinterProcessingStateDetail["TrimmerTurnedOff"] = "trimmerTurnedOff";
    PrinterProcessingStateDetail["TrimmerTurnedOn"] = "trimmerTurnedOn";
    PrinterProcessingStateDetail["TrimmerUnderTemperature"] = "trimmerUnderTemperature";
    PrinterProcessingStateDetail["TrimmerUnrecoverableFailure"] = "trimmerUnrecoverableFailure";
    PrinterProcessingStateDetail["TrimmerUnrecoverableStorageError"] = "trimmerUnrecoverableStorageError";
    PrinterProcessingStateDetail["TrimmerWarmingUp"] = "trimmerWarmingUp";
    PrinterProcessingStateDetail["Unknown"] = "unknown";
    PrinterProcessingStateDetail["WrapperAdded"] = "wrapperAdded";
    PrinterProcessingStateDetail["WrapperAlmostEmpty"] = "wrapperAlmostEmpty";
    PrinterProcessingStateDetail["WrapperAlmostFull"] = "wrapperAlmostFull";
    PrinterProcessingStateDetail["WrapperAtLimit"] = "wrapperAtLimit";
    PrinterProcessingStateDetail["WrapperClosed"] = "wrapperClosed";
    PrinterProcessingStateDetail["WrapperConfigurationChange"] = "wrapperConfigurationChange";
    PrinterProcessingStateDetail["WrapperCoverClosed"] = "wrapperCoverClosed";
    PrinterProcessingStateDetail["WrapperCoverOpen"] = "wrapperCoverOpen";
    PrinterProcessingStateDetail["WrapperEmpty"] = "wrapperEmpty";
    PrinterProcessingStateDetail["WrapperFull"] = "wrapperFull";
    PrinterProcessingStateDetail["WrapperInterlockClosed"] = "wrapperInterlockClosed";
    PrinterProcessingStateDetail["WrapperInterlockOpen"] = "wrapperInterlockOpen";
    PrinterProcessingStateDetail["WrapperJam"] = "wrapperJam";
    PrinterProcessingStateDetail["WrapperLifeAlmostOver"] = "wrapperLifeAlmostOver";
    PrinterProcessingStateDetail["WrapperLifeOver"] = "wrapperLifeOver";
    PrinterProcessingStateDetail["WrapperMemoryExhausted"] = "wrapperMemoryExhausted";
    PrinterProcessingStateDetail["WrapperMissing"] = "wrapperMissing";
    PrinterProcessingStateDetail["WrapperMotorFailure"] = "wrapperMotorFailure";
    PrinterProcessingStateDetail["WrapperNearLimit"] = "wrapperNearLimit";
    PrinterProcessingStateDetail["WrapperOffline"] = "wrapperOffline";
    PrinterProcessingStateDetail["WrapperOpened"] = "wrapperOpened";
    PrinterProcessingStateDetail["WrapperOverTemperature"] = "wrapperOverTemperature";
    PrinterProcessingStateDetail["WrapperPowerSaver"] = "wrapperPowerSaver";
    PrinterProcessingStateDetail["WrapperRecoverableFailure"] = "wrapperRecoverableFailure";
    PrinterProcessingStateDetail["WrapperRecoverableStorage"] = "wrapperRecoverableStorage";
    PrinterProcessingStateDetail["WrapperRemoved"] = "wrapperRemoved";
    PrinterProcessingStateDetail["WrapperResourceAdded"] = "wrapperResourceAdded";
    PrinterProcessingStateDetail["WrapperResourceRemoved"] = "wrapperResourceRemoved";
    PrinterProcessingStateDetail["WrapperThermistorFailure"] = "wrapperThermistorFailure";
    PrinterProcessingStateDetail["WrapperTimingFailure"] = "wrapperTimingFailure";
    PrinterProcessingStateDetail["WrapperTurnedOff"] = "wrapperTurnedOff";
    PrinterProcessingStateDetail["WrapperTurnedOn"] = "wrapperTurnedOn";
    PrinterProcessingStateDetail["WrapperUnderTemperature"] = "wrapperUnderTemperature";
    PrinterProcessingStateDetail["WrapperUnrecoverableFailure"] = "wrapperUnrecoverableFailure";
    PrinterProcessingStateDetail["WrapperUnrecoverableStorageError"] = "wrapperUnrecoverableStorageError";
    PrinterProcessingStateDetail["WrapperWarmingUp"] = "wrapperWarmingUp";
})(PrinterProcessingStateDetail || (PrinterProcessingStateDetail = {}));

var PrinterProcessingStateReason;
(function (PrinterProcessingStateReason) {
    PrinterProcessingStateReason["Paused"] = "paused";
    PrinterProcessingStateReason["MediaJam"] = "mediaJam";
    PrinterProcessingStateReason["MediaNeeded"] = "mediaNeeded";
    PrinterProcessingStateReason["MediaLow"] = "mediaLow";
    PrinterProcessingStateReason["MediaEmpty"] = "mediaEmpty";
    PrinterProcessingStateReason["CoverOpen"] = "coverOpen";
    PrinterProcessingStateReason["InterlockOpen"] = "interlockOpen";
    PrinterProcessingStateReason["OutputTrayMissing"] = "outputTrayMissing";
    PrinterProcessingStateReason["OutputAreaFull"] = "outputAreaFull";
    PrinterProcessingStateReason["MarkerSupplyLow"] = "markerSupplyLow";
    PrinterProcessingStateReason["MarkerSupplyEmpty"] = "markerSupplyEmpty";
    PrinterProcessingStateReason["InputTrayMissing"] = "inputTrayMissing";
    PrinterProcessingStateReason["OutputAreaAlmostFull"] = "outputAreaAlmostFull";
    PrinterProcessingStateReason["MarkerWasteAlmostFull"] = "markerWasteAlmostFull";
    PrinterProcessingStateReason["MarkerWasteFull"] = "markerWasteFull";
    PrinterProcessingStateReason["FuserOverTemp"] = "fuserOverTemp";
    PrinterProcessingStateReason["FuserUnderTemp"] = "fuserUnderTemp";
    PrinterProcessingStateReason["Other"] = "other";
    PrinterProcessingStateReason["None"] = "none";
    PrinterProcessingStateReason["MovingToPaused"] = "movingToPaused";
    PrinterProcessingStateReason["Shutdown"] = "shutdown";
    PrinterProcessingStateReason["ConnectingToDevice"] = "connectingToDevice";
    PrinterProcessingStateReason["TimedOut"] = "timedOut";
    PrinterProcessingStateReason["Stopping"] = "stopping";
    PrinterProcessingStateReason["StoppedPartially"] = "stoppedPartially";
    PrinterProcessingStateReason["TonerLow"] = "tonerLow";
    PrinterProcessingStateReason["TonerEmpty"] = "tonerEmpty";
    PrinterProcessingStateReason["SpoolAreaFull"] = "spoolAreaFull";
    PrinterProcessingStateReason["DoorOpen"] = "doorOpen";
    PrinterProcessingStateReason["OpticalPhotoConductorNearEndOfLife"] = "opticalPhotoConductorNearEndOfLife";
    PrinterProcessingStateReason["OpticalPhotoConductorLifeOver"] = "opticalPhotoConductorLifeOver";
    PrinterProcessingStateReason["DeveloperLow"] = "developerLow";
    PrinterProcessingStateReason["DeveloperEmpty"] = "developerEmpty";
    PrinterProcessingStateReason["InterpreterResourceUnavailable"] = "interpreterResourceUnavailable";
    PrinterProcessingStateReason["UnknownFutureValue"] = "unknownFutureValue";
})(PrinterProcessingStateReason || (PrinterProcessingStateReason = {}));

function deserializeIntoPrinterStatus(printerStatus = {}) {
    return {
        "description": n => { printerStatus.description = n.getStringValue(); },
        "details": n => { printerStatus.details = n.getEnumValues(PrinterProcessingStateDetail); },
        "processingState": n => { printerStatus.processingState = n.getEnumValue(PrinterProcessingState); },
        "processingStateDescription": n => { printerStatus.processingStateDescription = n.getStringValue(); },
        "processingStateReasons": n => { printerStatus.processingStateReasons = n.getEnumValues(PrinterProcessingStateReason); },
        "state": n => { printerStatus.state = n.getEnumValue(PrinterProcessingState); },
    };
}

function deserializeIntoPrintMargin(printMargin = {}) {
    return {
        "bottom": n => { printMargin.bottom = n.getNumberValue(); },
        "left": n => { printMargin.left = n.getNumberValue(); },
        "right": n => { printMargin.right = n.getNumberValue(); },
        "top": n => { printMargin.top = n.getNumberValue(); },
    };
}

function deserializeIntoPrinterDocumentConfiguration(printerDocumentConfiguration = {}) {
    return {
        "collate": n => { printerDocumentConfiguration.collate = n.getBooleanValue(); },
        "colorMode": n => { printerDocumentConfiguration.colorMode = n.getEnumValue(PrintColorMode); },
        "copies": n => { printerDocumentConfiguration.copies = n.getNumberValue(); },
        "dpi": n => { printerDocumentConfiguration.dpi = n.getNumberValue(); },
        "duplexMode": n => { printerDocumentConfiguration.duplexMode = n.getEnumValue(PrintDuplexMode); },
        "feedDirection": n => { printerDocumentConfiguration.feedDirection = n.getEnumValue(PrinterFeedDirection); },
        "feedOrientation": n => { printerDocumentConfiguration.feedOrientation = n.getEnumValue(PrinterFeedOrientation); },
        "finishings": n => { printerDocumentConfiguration.finishings = n.getEnumValues(PrintFinishing); },
        "fitPdfToPage": n => { printerDocumentConfiguration.fitPdfToPage = n.getBooleanValue(); },
        "inputBin": n => { printerDocumentConfiguration.inputBin = n.getStringValue(); },
        "margin": n => { printerDocumentConfiguration.margin = n.getObject(deserializeIntoPrintMargin); },
        "mediaSize": n => { printerDocumentConfiguration.mediaSize = n.getStringValue(); },
        "mediaType": n => { printerDocumentConfiguration.mediaType = n.getStringValue(); },
        "multipageLayout": n => { printerDocumentConfiguration.multipageLayout = n.getEnumValue(PrintMultipageLayout); },
        "orientation": n => { printerDocumentConfiguration.orientation = n.getEnumValue(PrintOrientation); },
        "outputBin": n => { printerDocumentConfiguration.outputBin = n.getStringValue(); },
        "pageRanges": n => { printerDocumentConfiguration.pageRanges = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIntegerRange); },
        "pagesPerSheet": n => { printerDocumentConfiguration.pagesPerSheet = n.getNumberValue(); },
        "quality": n => { printerDocumentConfiguration.quality = n.getEnumValue(PrintQuality); },
        "scaling": n => { printerDocumentConfiguration.scaling = n.getEnumValue(PrintScaling); },
    };
}

function deserializeIntoPrintDocument(printDocument = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printDocument)), { "configuration": n => { printDocument.configuration = n.getObject(deserializeIntoPrinterDocumentConfiguration); }, "contentType": n => { printDocument.contentType = n.getStringValue(); }, "displayName": n => { printDocument.displayName = n.getStringValue(); }, "downloadedDateTime": n => { printDocument.downloadedDateTime = n.getDateValue(); }, "size": n => { printDocument.size = n.getNumberValue(); }, "uploadedDateTime": n => { printDocument.uploadedDateTime = n.getDateValue(); } });
}

function deserializeIntoPrintJobConfiguration(printJobConfiguration = {}) {
    return {
        "collate": n => { printJobConfiguration.collate = n.getBooleanValue(); },
        "colorMode": n => { printJobConfiguration.colorMode = n.getEnumValue(PrintColorMode); },
        "copies": n => { printJobConfiguration.copies = n.getNumberValue(); },
        "dpi": n => { printJobConfiguration.dpi = n.getNumberValue(); },
        "duplexMode": n => { printJobConfiguration.duplexMode = n.getEnumValue(PrintDuplexMode); },
        "feedOrientation": n => { printJobConfiguration.feedOrientation = n.getEnumValue(PrinterFeedOrientation); },
        "finishings": n => { printJobConfiguration.finishings = n.getEnumValues(PrintFinishing); },
        "fitPdfToPage": n => { printJobConfiguration.fitPdfToPage = n.getBooleanValue(); },
        "inputBin": n => { printJobConfiguration.inputBin = n.getStringValue(); },
        "margin": n => { printJobConfiguration.margin = n.getObject(deserializeIntoPrintMargin); },
        "mediaSize": n => { printJobConfiguration.mediaSize = n.getStringValue(); },
        "mediaType": n => { printJobConfiguration.mediaType = n.getStringValue(); },
        "multipageLayout": n => { printJobConfiguration.multipageLayout = n.getEnumValue(PrintMultipageLayout); },
        "orientation": n => { printJobConfiguration.orientation = n.getEnumValue(PrintOrientation); },
        "outputBin": n => { printJobConfiguration.outputBin = n.getStringValue(); },
        "pageRanges": n => { printJobConfiguration.pageRanges = n.getCollectionOfObjectValuesFromMethod(deserializeIntoIntegerRange); },
        "pagesPerSheet": n => { printJobConfiguration.pagesPerSheet = n.getNumberValue(); },
        "quality": n => { printJobConfiguration.quality = n.getEnumValue(PrintQuality); },
        "scaling": n => { printJobConfiguration.scaling = n.getEnumValue(PrintScaling); },
    };
}

var PrintJobProcessingState;
(function (PrintJobProcessingState) {
    PrintJobProcessingState["Unknown"] = "unknown";
    PrintJobProcessingState["Pending"] = "pending";
    PrintJobProcessingState["Processing"] = "processing";
    PrintJobProcessingState["Paused"] = "paused";
    PrintJobProcessingState["Stopped"] = "stopped";
    PrintJobProcessingState["Completed"] = "completed";
    PrintJobProcessingState["Canceled"] = "canceled";
    PrintJobProcessingState["Aborted"] = "aborted";
})(PrintJobProcessingState || (PrintJobProcessingState = {}));

var PrintJobStateDetail;
(function (PrintJobStateDetail) {
    PrintJobStateDetail["UploadPending"] = "uploadPending";
    PrintJobStateDetail["Transforming"] = "transforming";
    PrintJobStateDetail["CompletedSuccessfully"] = "completedSuccessfully";
    PrintJobStateDetail["CompletedWithWarnings"] = "completedWithWarnings";
    PrintJobStateDetail["CompletedWithErrors"] = "completedWithErrors";
    PrintJobStateDetail["ReleaseWait"] = "releaseWait";
    PrintJobStateDetail["Interpreting"] = "interpreting";
    PrintJobStateDetail["UnknownFutureValue"] = "unknownFutureValue";
})(PrintJobStateDetail || (PrintJobStateDetail = {}));

function deserializeIntoPrintJobStatus(printJobStatus = {}) {
    return {
        "acquiredByPrinter": n => { printJobStatus.acquiredByPrinter = n.getBooleanValue(); },
        "description": n => { printJobStatus.description = n.getStringValue(); },
        "details": n => { printJobStatus.details = n.getEnumValues(PrintJobStateDetail); },
        "isAcquiredByPrinter": n => { printJobStatus.isAcquiredByPrinter = n.getBooleanValue(); },
        "processingState": n => { printJobStatus.processingState = n.getEnumValue(PrintJobProcessingState); },
        "processingStateDescription": n => { printJobStatus.processingStateDescription = n.getStringValue(); },
        "state": n => { printJobStatus.state = n.getEnumValue(PrintJobProcessingState); },
    };
}

function deserializeIntoAppIdentity(appIdentity = {}) {
    return {
        "appId": n => { appIdentity.appId = n.getStringValue(); },
        "displayName": n => { appIdentity.displayName = n.getStringValue(); },
        "servicePrincipalId": n => { appIdentity.servicePrincipalId = n.getStringValue(); },
        "servicePrincipalName": n => { appIdentity.servicePrincipalName = n.getStringValue(); },
    };
}

function deserializeIntoPrintTaskDefinition(printTaskDefinition = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printTaskDefinition)), { "createdBy": n => { printTaskDefinition.createdBy = n.getObject(deserializeIntoAppIdentity); }, "displayName": n => { printTaskDefinition.displayName = n.getStringValue(); }, "tasks": n => { printTaskDefinition.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintTask); } });
}

var PrintTaskProcessingState;
(function (PrintTaskProcessingState) {
    PrintTaskProcessingState["Pending"] = "pending";
    PrintTaskProcessingState["Processing"] = "processing";
    PrintTaskProcessingState["Completed"] = "completed";
    PrintTaskProcessingState["Aborted"] = "aborted";
    PrintTaskProcessingState["UnknownFutureValue"] = "unknownFutureValue";
})(PrintTaskProcessingState || (PrintTaskProcessingState = {}));

function deserializeIntoPrintTaskStatus(printTaskStatus = {}) {
    return {
        "description": n => { printTaskStatus.description = n.getStringValue(); },
        "state": n => { printTaskStatus.state = n.getEnumValue(PrintTaskProcessingState); },
    };
}

var PrintEvent;
(function (PrintEvent) {
    PrintEvent["JobStarted"] = "jobStarted";
    PrintEvent["UnknownFutureValue"] = "unknownFutureValue";
})(PrintEvent || (PrintEvent = {}));

function deserializeIntoPrintTaskTrigger(printTaskTrigger = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printTaskTrigger)), { "definition": n => { printTaskTrigger.definition = n.getObject(deserializeIntoPrintTaskDefinition); }, "event": n => { printTaskTrigger.event = n.getEnumValue(PrintEvent); } });
}

function deserializeIntoPrintTask(printTask = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printTask)), { "definition": n => { printTask.definition = n.getObject(deserializeIntoPrintTaskDefinition); }, "parentUrl": n => { printTask.parentUrl = n.getStringValue(); }, "status": n => { printTask.status = n.getObject(deserializeIntoPrintTaskStatus); }, "trigger": n => { printTask.trigger = n.getObject(deserializeIntoPrintTaskTrigger); } });
}

function deserializeIntoPrintJob(printJob = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printJob)), { "acknowledgedDateTime": n => { printJob.acknowledgedDateTime = n.getDateValue(); }, "completedDateTime": n => { printJob.completedDateTime = n.getDateValue(); }, "configuration": n => { printJob.configuration = n.getObject(deserializeIntoPrintJobConfiguration); }, "createdBy": n => { printJob.createdBy = n.getObject(deserializeIntoUserIdentity); }, "createdDateTime": n => { printJob.createdDateTime = n.getDateValue(); }, "displayName": n => { printJob.displayName = n.getStringValue(); }, "documents": n => { printJob.documents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintDocument); }, "errorCode": n => { printJob.errorCode = n.getNumberValue(); }, "isFetchable": n => { printJob.isFetchable = n.getBooleanValue(); }, "redirectedFrom": n => { printJob.redirectedFrom = n.getStringValue(); }, "redirectedTo": n => { printJob.redirectedTo = n.getStringValue(); }, "status": n => { printJob.status = n.getObject(deserializeIntoPrintJobStatus); }, "tasks": n => { printJob.tasks = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintTask); } });
}

function deserializeIntoPrinterBase(printerBase = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(printerBase)), { "capabilities": n => { printerBase.capabilities = n.getObject(deserializeIntoPrinterCapabilities); }, "defaults": n => { printerBase.defaults = n.getObject(deserializeIntoPrinterDefaults); }, "displayName": n => { printerBase.displayName = n.getStringValue(); }, "isAcceptingJobs": n => { printerBase.isAcceptingJobs = n.getBooleanValue(); }, "jobs": n => { printerBase.jobs = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintJob); }, "location": n => { printerBase.location = n.getObject(deserializeIntoPrinterLocation); }, "manufacturer": n => { printerBase.manufacturer = n.getStringValue(); }, "model": n => { printerBase.model = n.getStringValue(); }, "name": n => { printerBase.name = n.getStringValue(); }, "status": n => { printerBase.status = n.getObject(deserializeIntoPrinterStatus); } });
}

function deserializeIntoPrinter(printer = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPrinterBase(printer)), { "acceptingJobs": n => { printer.acceptingJobs = n.getBooleanValue(); }, "connectors": n => { printer.connectors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintConnector); }, "hasPhysicalDevice": n => { printer.hasPhysicalDevice = n.getBooleanValue(); }, "isShared": n => { printer.isShared = n.getBooleanValue(); }, "lastSeenDateTime": n => { printer.lastSeenDateTime = n.getDateValue(); }, "registeredDateTime": n => { printer.registeredDateTime = n.getDateValue(); }, "share": n => { printer.share = n.getObject(deserializeIntoPrinterShare); }, "shares": n => { printer.shares = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrinterShare); }, "taskTriggers": n => { printer.taskTriggers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrintTaskTrigger); } });
}

function deserializeIntoPrinterShareViewpoint(printerShareViewpoint = {}) {
    return {
        "lastUsedDateTime": n => { printerShareViewpoint.lastUsedDateTime = n.getDateValue(); },
    };
}

function deserializeIntoPrinterShare(printerShare = {}) {
    return Object.assign(Object.assign({}, deserializeIntoPrinterBase(printerShare)), { "allowAllUsers": n => { printerShare.allowAllUsers = n.getBooleanValue(); }, "allowedGroups": n => { printerShare.allowedGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoGroup); }, "allowedUsers": n => { printerShare.allowedUsers = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUser); }, "createdDateTime": n => { printerShare.createdDateTime = n.getDateValue(); }, "printer": n => { printerShare.printer = n.getObject(deserializeIntoPrinter); }, "viewPoint": n => { printerShare.viewPoint = n.getObject(deserializeIntoPrinterShareViewpoint); } });
}

function deserializeIntoUserPrint(userPrint = {}) {
    return {
        "recentPrinterShares": n => { userPrint.recentPrinterShares = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPrinterShare); },
    };
}

function deserializeIntoContactMergeSuggestions(contactMergeSuggestions = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(contactMergeSuggestions)), { "isEnabled": n => { contactMergeSuggestions.isEnabled = n.getBooleanValue(); } });
}

function deserializeIntoRegionalFormatOverrides(regionalFormatOverrides = {}) {
    return {
        "calendar": n => { regionalFormatOverrides.calendar = n.getStringValue(); },
        "firstDayOfWeek": n => { regionalFormatOverrides.firstDayOfWeek = n.getStringValue(); },
        "longDateFormat": n => { regionalFormatOverrides.longDateFormat = n.getStringValue(); },
        "longTimeFormat": n => { regionalFormatOverrides.longTimeFormat = n.getStringValue(); },
        "shortDateFormat": n => { regionalFormatOverrides.shortDateFormat = n.getStringValue(); },
        "shortTimeFormat": n => { regionalFormatOverrides.shortTimeFormat = n.getStringValue(); },
        "timeZone": n => { regionalFormatOverrides.timeZone = n.getStringValue(); },
    };
}

var TranslationBehavior;
(function (TranslationBehavior) {
    TranslationBehavior["Ask"] = "Ask";
    TranslationBehavior["Yes"] = "Yes";
    TranslationBehavior["No"] = "No";
})(TranslationBehavior || (TranslationBehavior = {}));

function deserializeIntoTranslationLanguageOverride(translationLanguageOverride = {}) {
    return {
        "languageTag": n => { translationLanguageOverride.languageTag = n.getStringValue(); },
        "translationBehavior": n => { translationLanguageOverride.translationBehavior = n.getEnumValue(TranslationBehavior); },
    };
}

function deserializeIntoTranslationPreferences(translationPreferences = {}) {
    return {
        "languageOverrides": n => { translationPreferences.languageOverrides = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTranslationLanguageOverride); },
        "translationBehavior": n => { translationPreferences.translationBehavior = n.getEnumValue(TranslationBehavior); },
        "untranslatedLanguages": n => { translationPreferences.untranslatedLanguages = n.getCollectionOfPrimitiveValues(); },
    };
}

function deserializeIntoRegionalAndLanguageSettings(regionalAndLanguageSettings = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(regionalAndLanguageSettings)), { "authoringLanguages": n => { regionalAndLanguageSettings.authoringLanguages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLocaleInfo); }, "defaultDisplayLanguage": n => { regionalAndLanguageSettings.defaultDisplayLanguage = n.getObject(deserializeIntoLocaleInfo); }, "defaultRegionalFormat": n => { regionalAndLanguageSettings.defaultRegionalFormat = n.getObject(deserializeIntoLocaleInfo); }, "defaultSpeechInputLanguage": n => { regionalAndLanguageSettings.defaultSpeechInputLanguage = n.getObject(deserializeIntoLocaleInfo); }, "defaultTranslationLanguage": n => { regionalAndLanguageSettings.defaultTranslationLanguage = n.getObject(deserializeIntoLocaleInfo); }, "regionalFormatOverrides": n => { regionalAndLanguageSettings.regionalFormatOverrides = n.getObject(deserializeIntoRegionalFormatOverrides); }, "translationPreferences": n => { regionalAndLanguageSettings.translationPreferences = n.getObject(deserializeIntoTranslationPreferences); } });
}

function deserializeIntoTimeRange(timeRange = {}) {
    return {
        "endTime": n => { timeRange.endTime = n.getTimeOnlyValue(); },
        "startTime": n => { timeRange.startTime = n.getTimeOnlyValue(); },
    };
}

function deserializeIntoShiftAvailability(shiftAvailability = {}) {
    return {
        "recurrence": n => { shiftAvailability.recurrence = n.getObject(deserializeIntoPatternedRecurrence); },
        "timeSlots": n => { shiftAvailability.timeSlots = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTimeRange); },
        "timeZone": n => { shiftAvailability.timeZone = n.getStringValue(); },
    };
}

function deserializeIntoShiftPreferences(shiftPreferences = {}) {
    return Object.assign(Object.assign({}, deserializeIntoChangeTrackedEntity(shiftPreferences)), { "availability": n => { shiftPreferences.availability = n.getCollectionOfObjectValuesFromMethod(deserializeIntoShiftAvailability); } });
}

function deserializeIntoUserInsightsSettings(userInsightsSettings = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userInsightsSettings)), { "isEnabled": n => { userInsightsSettings.isEnabled = n.getBooleanValue(); } });
}

function deserializeIntoUserSettings(userSettings = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userSettings)), { "contactMergeSuggestions": n => { userSettings.contactMergeSuggestions = n.getObject(deserializeIntoContactMergeSuggestions); }, "contributionToContentDiscoveryAsOrganizationDisabled": n => { userSettings.contributionToContentDiscoveryAsOrganizationDisabled = n.getBooleanValue(); }, "contributionToContentDiscoveryDisabled": n => { userSettings.contributionToContentDiscoveryDisabled = n.getBooleanValue(); }, "itemInsights": n => { userSettings.itemInsights = n.getObject(deserializeIntoUserInsightsSettings); }, "regionalAndLanguageSettings": n => { userSettings.regionalAndLanguageSettings = n.getObject(deserializeIntoRegionalAndLanguageSettings); }, "shiftPreferences": n => { userSettings.shiftPreferences = n.getObject(deserializeIntoShiftPreferences); } });
}

function deserializeIntoAssociatedTeamInfo(associatedTeamInfo = {}) {
    return Object.assign({}, deserializeIntoTeamInfo(associatedTeamInfo));
}

function deserializeIntoUserScopeTeamsAppInstallation(userScopeTeamsAppInstallation = {}) {
    return Object.assign(Object.assign({}, deserializeIntoTeamsAppInstallation(userScopeTeamsAppInstallation)), { "chat": n => { userScopeTeamsAppInstallation.chat = n.getObject(deserializeIntoChat); } });
}

function deserializeIntoUserTeamwork(userTeamwork = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(userTeamwork)), { "associatedTeams": n => { userTeamwork.associatedTeams = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssociatedTeamInfo); }, "installedApps": n => { userTeamwork.installedApps = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUserScopeTeamsAppInstallation); } });
}

function deserializeIntoWindowsInformationProtectionDeviceRegistration(windowsInformationProtectionDeviceRegistration = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(windowsInformationProtectionDeviceRegistration)), { "deviceMacAddress": n => { windowsInformationProtectionDeviceRegistration.deviceMacAddress = n.getStringValue(); }, "deviceName": n => { windowsInformationProtectionDeviceRegistration.deviceName = n.getStringValue(); }, "deviceRegistrationId": n => { windowsInformationProtectionDeviceRegistration.deviceRegistrationId = n.getStringValue(); }, "deviceType": n => { windowsInformationProtectionDeviceRegistration.deviceType = n.getStringValue(); }, "lastCheckInDateTime": n => { windowsInformationProtectionDeviceRegistration.lastCheckInDateTime = n.getDateValue(); }, "userId": n => { windowsInformationProtectionDeviceRegistration.userId = n.getStringValue(); } });
}

function deserializeIntoInformationProtectionPolicySetting(informationProtectionPolicySetting = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(informationProtectionPolicySetting)), { "defaultLabelId": n => { informationProtectionPolicySetting.defaultLabelId = n.getStringValue(); }, "isDowngradeJustificationRequired": n => { informationProtectionPolicySetting.isDowngradeJustificationRequired = n.getBooleanValue(); }, "isMandatory": n => { informationProtectionPolicySetting.isMandatory = n.getBooleanValue(); }, "moreInfoUrl": n => { informationProtectionPolicySetting.moreInfoUrl = n.getStringValue(); } });
}

function deserializeIntoSensitivityLabel(sensitivityLabel = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(sensitivityLabel)), { "color": n => { sensitivityLabel.color = n.getStringValue(); }, "contentFormats": n => { sensitivityLabel.contentFormats = n.getCollectionOfPrimitiveValues(); }, "description": n => { sensitivityLabel.description = n.getStringValue(); }, "hasProtection": n => { sensitivityLabel.hasProtection = n.getBooleanValue(); }, "isActive": n => { sensitivityLabel.isActive = n.getBooleanValue(); }, "isAppliable": n => { sensitivityLabel.isAppliable = n.getBooleanValue(); }, "name": n => { sensitivityLabel.name = n.getStringValue(); }, "parent": n => { sensitivityLabel.parent = n.getObject(deserializeIntoSensitivityLabel); }, "sensitivity": n => { sensitivityLabel.sensitivity = n.getNumberValue(); }, "tooltip": n => { sensitivityLabel.tooltip = n.getStringValue(); } });
}

function deserializeIntoInformationProtection(informationProtection = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(informationProtection)), { "labelPolicySettings": n => { informationProtection.labelPolicySettings = n.getObject(deserializeIntoInformationProtectionPolicySetting); }, "sensitivityLabels": n => { informationProtection.sensitivityLabels = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSensitivityLabel); } });
}

function deserializeIntoSecurity(security = {}) {
    return Object.assign(Object.assign({}, deserializeIntoEntity(security)), { "informationProtection": n => { security.informationProtection = n.getObject(deserializeIntoInformationProtection); } });
}

function deserializeIntoUser(user = {}) {
    return Object.assign(Object.assign({}, deserializeIntoDirectoryObject(user)), { "aboutMe": n => { user.aboutMe = n.getStringValue(); }, "accountEnabled": n => { user.accountEnabled = n.getBooleanValue(); }, "activities": n => { user.activities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUserActivity); }, "ageGroup": n => { user.ageGroup = n.getStringValue(); }, "agreementAcceptances": n => { user.agreementAcceptances = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAgreementAcceptance); }, "analytics": n => { user.analytics = n.getObject(deserializeIntoUserAnalytics); }, "appConsentRequestsForApproval": n => { user.appConsentRequestsForApproval = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppConsentRequest); }, "appRoleAssignedResources": n => { user.appRoleAssignedResources = n.getCollectionOfObjectValuesFromMethod(deserializeIntoServicePrincipal); }, "appRoleAssignments": n => { user.appRoleAssignments = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAppRoleAssignment); }, "approvals": n => { user.approvals = n.getCollectionOfObjectValuesFromMethod(deserializeIntoApproval); }, "assignedLicenses": n => { user.assignedLicenses = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssignedLicense); }, "assignedPlans": n => { user.assignedPlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAssignedPlan); }, "authentication": n => { user.authentication = n.getObject(deserializeIntoAuthentication); }, "authorizationInfo": n => { user.authorizationInfo = n.getObject(deserializeIntoAuthorizationInfo); }, "birthday": n => { user.birthday = n.getDateValue(); }, "businessPhones": n => { user.businessPhones = n.getCollectionOfPrimitiveValues(); }, "calendar": n => { user.calendar = n.getObject(deserializeIntoCalendar); }, "calendarGroups": n => { user.calendarGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCalendarGroup); }, "calendars": n => { user.calendars = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCalendar); }, "calendarView": n => { user.calendarView = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "chats": n => { user.chats = n.getCollectionOfObjectValuesFromMethod(deserializeIntoChat); }, "city": n => { user.city = n.getStringValue(); }, "cloudPCs": n => { user.cloudPCs = n.getCollectionOfObjectValuesFromMethod(deserializeIntoCloudPC); }, "companyName": n => { user.companyName = n.getStringValue(); }, "consentProvidedForMinor": n => { user.consentProvidedForMinor = n.getStringValue(); }, "contactFolders": n => { user.contactFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContactFolder); }, "contacts": n => { user.contacts = n.getCollectionOfObjectValuesFromMethod(deserializeIntoContact); }, "country": n => { user.country = n.getStringValue(); }, "createdDateTime": n => { user.createdDateTime = n.getDateValue(); }, "createdObjects": n => { user.createdObjects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "creationType": n => { user.creationType = n.getStringValue(); }, "customSecurityAttributes": n => { user.customSecurityAttributes = n.getObject(deserializeIntoCustomSecurityAttributeValue); }, "department": n => { user.department = n.getStringValue(); }, "deviceEnrollmentConfigurations": n => { user.deviceEnrollmentConfigurations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceEnrollmentConfiguration); }, "deviceEnrollmentLimit": n => { user.deviceEnrollmentLimit = n.getNumberValue(); }, "deviceKeys": n => { user.deviceKeys = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceKey); }, "deviceManagementTroubleshootingEvents": n => { user.deviceManagementTroubleshootingEvents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDeviceManagementTroubleshootingEvent); }, "devices": n => { user.devices = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDevice); }, "directReports": n => { user.directReports = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "displayName": n => { user.displayName = n.getStringValue(); }, "drive": n => { user.drive = n.getObject(deserializeIntoDrive); }, "drives": n => { user.drives = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDrive); }, "employeeHireDate": n => { user.employeeHireDate = n.getDateValue(); }, "employeeId": n => { user.employeeId = n.getStringValue(); }, "employeeLeaveDateTime": n => { user.employeeLeaveDateTime = n.getDateValue(); }, "employeeOrgData": n => { user.employeeOrgData = n.getObject(deserializeIntoEmployeeOrgData); }, "employeeType": n => { user.employeeType = n.getStringValue(); }, "events": n => { user.events = n.getCollectionOfObjectValuesFromMethod(deserializeIntoEvent); }, "extensions": n => { user.extensions = n.getCollectionOfObjectValuesFromMethod(deserializeIntoExtension); }, "externalUserState": n => { user.externalUserState = n.getStringValue(); }, "externalUserStateChangeDateTime": n => { user.externalUserStateChangeDateTime = n.getStringValue(); }, "faxNumber": n => { user.faxNumber = n.getStringValue(); }, "followedSites": n => { user.followedSites = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSite); }, "givenName": n => { user.givenName = n.getStringValue(); }, "hireDate": n => { user.hireDate = n.getDateValue(); }, "identities": n => { user.identities = n.getCollectionOfObjectValuesFromMethod(deserializeIntoObjectIdentity); }, "imAddresses": n => { user.imAddresses = n.getCollectionOfPrimitiveValues(); }, "inferenceClassification": n => { user.inferenceClassification = n.getObject(deserializeIntoInferenceClassification); }, "infoCatalogs": n => { user.infoCatalogs = n.getCollectionOfPrimitiveValues(); }, "informationProtection": n => { user.informationProtection = n.getObject(deserializeIntoInformationProtection$1); }, "insights": n => { user.insights = n.getObject(deserializeIntoItemInsights); }, "interests": n => { user.interests = n.getCollectionOfPrimitiveValues(); }, "isManagementRestricted": n => { user.isManagementRestricted = n.getBooleanValue(); }, "isResourceAccount": n => { user.isResourceAccount = n.getBooleanValue(); }, "jobTitle": n => { user.jobTitle = n.getStringValue(); }, "joinedGroups": n => { user.joinedGroups = n.getCollectionOfObjectValuesFromMethod(deserializeIntoGroup); }, "joinedTeams": n => { user.joinedTeams = n.getCollectionOfObjectValuesFromMethod(deserializeIntoTeam); }, "lastPasswordChangeDateTime": n => { user.lastPasswordChangeDateTime = n.getDateValue(); }, "legalAgeGroupClassification": n => { user.legalAgeGroupClassification = n.getStringValue(); }, "licenseAssignmentStates": n => { user.licenseAssignmentStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLicenseAssignmentState); }, "licenseDetails": n => { user.licenseDetails = n.getCollectionOfObjectValuesFromMethod(deserializeIntoLicenseDetails); }, "mail": n => { user.mail = n.getStringValue(); }, "mailboxSettings": n => { user.mailboxSettings = n.getObject(deserializeIntoMailboxSettings); }, "mailFolders": n => { user.mailFolders = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMailFolder); }, "mailNickname": n => { user.mailNickname = n.getStringValue(); }, "managedAppRegistrations": n => { user.managedAppRegistrations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedAppRegistration); }, "managedDevices": n => { user.managedDevices = n.getCollectionOfObjectValuesFromMethod(deserializeIntoManagedDevice); }, "manager": n => { user.manager = n.getObject(deserializeIntoDirectoryObject); }, "memberOf": n => { user.memberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "messages": n => { user.messages = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMessage); }, "mobileAppIntentAndStates": n => { user.mobileAppIntentAndStates = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMobileAppIntentAndState); }, "mobileAppTroubleshootingEvents": n => { user.mobileAppTroubleshootingEvents = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMobileAppTroubleshootingEvent); }, "mobilePhone": n => { user.mobilePhone = n.getStringValue(); }, "mySite": n => { user.mySite = n.getStringValue(); }, "notifications": n => { user.notifications = n.getCollectionOfObjectValuesFromMethod(deserializeIntoNotification); }, "oauth2PermissionGrants": n => { user.oauth2PermissionGrants = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOAuth2PermissionGrant); }, "officeLocation": n => { user.officeLocation = n.getStringValue(); }, "onenote": n => { user.onenote = n.getObject(deserializeIntoOnenote); }, "onlineMeetings": n => { user.onlineMeetings = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnlineMeeting); }, "onPremisesDistinguishedName": n => { user.onPremisesDistinguishedName = n.getStringValue(); }, "onPremisesDomainName": n => { user.onPremisesDomainName = n.getStringValue(); }, "onPremisesExtensionAttributes": n => { user.onPremisesExtensionAttributes = n.getObject(deserializeIntoOnPremisesExtensionAttributes); }, "onPremisesImmutableId": n => { user.onPremisesImmutableId = n.getStringValue(); }, "onPremisesLastSyncDateTime": n => { user.onPremisesLastSyncDateTime = n.getDateValue(); }, "onPremisesProvisioningErrors": n => { user.onPremisesProvisioningErrors = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOnPremisesProvisioningError); }, "onPremisesSamAccountName": n => { user.onPremisesSamAccountName = n.getStringValue(); }, "onPremisesSecurityIdentifier": n => { user.onPremisesSecurityIdentifier = n.getStringValue(); }, "onPremisesSyncEnabled": n => { user.onPremisesSyncEnabled = n.getBooleanValue(); }, "onPremisesUserPrincipalName": n => { user.onPremisesUserPrincipalName = n.getStringValue(); }, "otherMails": n => { user.otherMails = n.getCollectionOfPrimitiveValues(); }, "outlook": n => { user.outlook = n.getObject(deserializeIntoOutlookUser); }, "ownedDevices": n => { user.ownedDevices = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "ownedObjects": n => { user.ownedObjects = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "passwordPolicies": n => { user.passwordPolicies = n.getStringValue(); }, "passwordProfile": n => { user.passwordProfile = n.getObject(deserializeIntoPasswordProfile); }, "pastProjects": n => { user.pastProjects = n.getCollectionOfPrimitiveValues(); }, "pendingAccessReviewInstances": n => { user.pendingAccessReviewInstances = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAccessReviewInstance); }, "people": n => { user.people = n.getCollectionOfObjectValuesFromMethod(deserializeIntoPerson); }, "photo": n => { user.photo = n.getObject(deserializeIntoProfilePhoto); }, "photos": n => { user.photos = n.getCollectionOfObjectValuesFromMethod(deserializeIntoProfilePhoto); }, "planner": n => { user.planner = n.getObject(deserializeIntoPlannerUser); }, "postalCode": n => { user.postalCode = n.getStringValue(); }, "preferredDataLocation": n => { user.preferredDataLocation = n.getStringValue(); }, "preferredLanguage": n => { user.preferredLanguage = n.getStringValue(); }, "preferredName": n => { user.preferredName = n.getStringValue(); }, "presence": n => { user.presence = n.getObject(deserializeIntoPresence); }, "print": n => { user.print = n.getObject(deserializeIntoUserPrint); }, "profile": n => { user.profile = n.getObject(deserializeIntoProfile); }, "provisionedPlans": n => { user.provisionedPlans = n.getCollectionOfObjectValuesFromMethod(deserializeIntoProvisionedPlan); }, "proxyAddresses": n => { user.proxyAddresses = n.getCollectionOfPrimitiveValues(); }, "refreshTokensValidFromDateTime": n => { user.refreshTokensValidFromDateTime = n.getDateValue(); }, "registeredDevices": n => { user.registeredDevices = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "responsibilities": n => { user.responsibilities = n.getCollectionOfPrimitiveValues(); }, "schools": n => { user.schools = n.getCollectionOfPrimitiveValues(); }, "scopedRoleMemberOf": n => { user.scopedRoleMemberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoScopedRoleMembership); }, "security": n => { user.security = n.getObject(deserializeIntoSecurity); }, "securityIdentifier": n => { user.securityIdentifier = n.getStringValue(); }, "settings": n => { user.settings = n.getObject(deserializeIntoUserSettings); }, "showInAddressList": n => { user.showInAddressList = n.getBooleanValue(); }, "signInActivity": n => { user.signInActivity = n.getObject(deserializeIntoSignInActivity); }, "signInSessionsValidFromDateTime": n => { user.signInSessionsValidFromDateTime = n.getDateValue(); }, "skills": n => { user.skills = n.getCollectionOfPrimitiveValues(); }, "state": n => { user.state = n.getStringValue(); }, "streetAddress": n => { user.streetAddress = n.getStringValue(); }, "surname": n => { user.surname = n.getStringValue(); }, "teamwork": n => { user.teamwork = n.getObject(deserializeIntoUserTeamwork); }, "todo": n => { user.todo = n.getObject(deserializeIntoTodo); }, "transitiveMemberOf": n => { user.transitiveMemberOf = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "transitiveReports": n => { user.transitiveReports = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); }, "usageLocation": n => { user.usageLocation = n.getStringValue(); }, "usageRights": n => { user.usageRights = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUsageRight); }, "userPrincipalName": n => { user.userPrincipalName = n.getStringValue(); }, "userType": n => { user.userType = n.getStringValue(); }, "windowsInformationProtectionDeviceRegistrations": n => { user.windowsInformationProtectionDeviceRegistrations = n.getCollectionOfObjectValuesFromMethod(deserializeIntoWindowsInformationProtectionDeviceRegistration); } });
}

function serializeEntity(writer, entity = {}) {
    writer.writeStringValue("id", entity.id);
}

function serializeInformationProtectionPolicySetting(writer, informationProtectionPolicySetting = {}) {
    serializeEntity(writer, informationProtectionPolicySetting);
    writer.writeStringValue("defaultLabelId", informationProtectionPolicySetting.defaultLabelId);
    writer.writeBooleanValue("isDowngradeJustificationRequired", informationProtectionPolicySetting.isDowngradeJustificationRequired);
    writer.writeBooleanValue("isMandatory", informationProtectionPolicySetting.isMandatory);
    writer.writeStringValue("moreInfoUrl", informationProtectionPolicySetting.moreInfoUrl);
}

function serializeSensitivityLabel$1(writer, sensitivityLabel = {}) {
    serializeEntity(writer, sensitivityLabel);
    writer.writeStringValue("color", sensitivityLabel.color);
    writer.writeCollectionOfPrimitiveValues("contentFormats", sensitivityLabel.contentFormats);
    writer.writeStringValue("description", sensitivityLabel.description);
    writer.writeBooleanValue("hasProtection", sensitivityLabel.hasProtection);
    writer.writeBooleanValue("isActive", sensitivityLabel.isActive);
    writer.writeBooleanValue("isAppliable", sensitivityLabel.isAppliable);
    writer.writeStringValue("name", sensitivityLabel.name);
    writer.writeObjectValueFromMethod("parent", sensitivityLabel.parent, serializeSensitivityLabel$1);
    writer.writeNumberValue("sensitivity", sensitivityLabel.sensitivity);
    writer.writeStringValue("tooltip", sensitivityLabel.tooltip);
}

function serializeInformationProtection$1(writer, informationProtection = {}) {
    serializeEntity(writer, informationProtection);
    writer.writeObjectValueFromMethod("labelPolicySettings", informationProtection.labelPolicySettings, serializeInformationProtectionPolicySetting);
    writer.writeCollectionOfObjectValuesFromMethod("sensitivityLabels", informationProtection.sensitivityLabels, serializeSensitivityLabel$1);
}

function serializeSecurity(writer, security = {}) {
    serializeEntity(writer, security);
    writer.writeObjectValueFromMethod("informationProtection", security.informationProtection, serializeInformationProtection$1);
}

function serializeGenericError(writer, genericError = {}) {
    writer.writeStringValue("code", genericError.code);
    writer.writeStringValue("message", genericError.message);
}

function serializeAccessReviewError(writer, accessReviewError = {}) {
    serializeGenericError(writer, accessReviewError);
}

function serializeAccessReviewInstanceDecisionItemResource(writer, accessReviewInstanceDecisionItemResource = {}) {
    writer.writeStringValue("displayName", accessReviewInstanceDecisionItemResource.displayName);
    writer.writeStringValue("id", accessReviewInstanceDecisionItemResource.id);
    writer.writeStringValue("type", accessReviewInstanceDecisionItemResource.type);
}

function serializeAccessReviewInstanceDecisionItemTarget(writer, accessReviewInstanceDecisionItemTarget = {}) {
}

function serializeDecisionItemPrincipalResourceMembership(writer, decisionItemPrincipalResourceMembership = {}) {
    writer.writeEnumValue("membershipType", decisionItemPrincipalResourceMembership.membershipType);
}

function serializeGovernanceInsight(writer, governanceInsight = {}) {
    serializeEntity(writer, governanceInsight);
    writer.writeDateValue("insightCreatedDateTime", governanceInsight.insightCreatedDateTime);
}

function serializeIdentity(writer, identity = {}) {
    writer.writeStringValue("displayName", identity.displayName);
    writer.writeStringValue("id", identity.id);
}

function serializeUserIdentity(writer, userIdentity = {}) {
    serializeIdentity(writer, userIdentity);
    writer.writeStringValue("ipAddress", userIdentity.ipAddress);
    writer.writeStringValue("userPrincipalName", userIdentity.userPrincipalName);
}

function serializeAccessReviewInstanceDecisionItem(writer, accessReviewInstanceDecisionItem = {}) {
    serializeEntity(writer, accessReviewInstanceDecisionItem);
    writer.writeStringValue("accessReviewId", accessReviewInstanceDecisionItem.accessReviewId);
    writer.writeObjectValueFromMethod("appliedBy", accessReviewInstanceDecisionItem.appliedBy, serializeUserIdentity);
    writer.writeDateValue("appliedDateTime", accessReviewInstanceDecisionItem.appliedDateTime);
    writer.writeStringValue("applyResult", accessReviewInstanceDecisionItem.applyResult);
    writer.writeStringValue("decision", accessReviewInstanceDecisionItem.decision);
    writer.writeCollectionOfObjectValuesFromMethod("insights", accessReviewInstanceDecisionItem.insights, serializeGovernanceInsight);
    writer.writeObjectValueFromMethod("instance", accessReviewInstanceDecisionItem.instance, serializeAccessReviewInstance);
    writer.writeStringValue("justification", accessReviewInstanceDecisionItem.justification);
    writer.writeObjectValueFromMethod("principal", accessReviewInstanceDecisionItem.principal, serializeIdentity);
    writer.writeStringValue("principalLink", accessReviewInstanceDecisionItem.principalLink);
    writer.writeObjectValueFromMethod("principalResourceMembership", accessReviewInstanceDecisionItem.principalResourceMembership, serializeDecisionItemPrincipalResourceMembership);
    writer.writeStringValue("recommendation", accessReviewInstanceDecisionItem.recommendation);
    writer.writeObjectValueFromMethod("resource", accessReviewInstanceDecisionItem.resource, serializeAccessReviewInstanceDecisionItemResource);
    writer.writeStringValue("resourceLink", accessReviewInstanceDecisionItem.resourceLink);
    writer.writeObjectValueFromMethod("reviewedBy", accessReviewInstanceDecisionItem.reviewedBy, serializeUserIdentity);
    writer.writeDateValue("reviewedDateTime", accessReviewInstanceDecisionItem.reviewedDateTime);
    writer.writeObjectValueFromMethod("target", accessReviewInstanceDecisionItem.target, serializeAccessReviewInstanceDecisionItemTarget);
}

function serializeAccessReviewReviewer(writer, accessReviewReviewer = {}) {
    serializeEntity(writer, accessReviewReviewer);
    writer.writeDateValue("createdDateTime", accessReviewReviewer.createdDateTime);
    writer.writeStringValue("displayName", accessReviewReviewer.displayName);
    writer.writeStringValue("userPrincipalName", accessReviewReviewer.userPrincipalName);
}

function serializeAccessReviewScope(writer, accessReviewScope = {}) {
}

function serializeAccessReviewReviewerScope(writer, accessReviewReviewerScope = {}) {
    writer.writeStringValue("query", accessReviewReviewerScope.query);
    writer.writeStringValue("queryRoot", accessReviewReviewerScope.queryRoot);
    writer.writeStringValue("queryType", accessReviewReviewerScope.queryType);
}

function serializeAccessReviewNotificationRecipientScope(writer, accessReviewNotificationRecipientScope = {}) {
}

function serializeAccessReviewNotificationRecipientItem(writer, accessReviewNotificationRecipientItem = {}) {
    writer.writeObjectValueFromMethod("notificationRecipientScope", accessReviewNotificationRecipientItem.notificationRecipientScope, serializeAccessReviewNotificationRecipientScope);
    writer.writeStringValue("notificationTemplateType", accessReviewNotificationRecipientItem.notificationTemplateType);
}

function serializeAccessReviewApplyAction(writer, accessReviewApplyAction = {}) {
}

function serializeAccessReviewRecommendationInsightSetting(writer, accessReviewRecommendationInsightSetting = {}) {
}

function serializeRecurrencePattern(writer, recurrencePattern = {}) {
    writer.writeNumberValue("dayOfMonth", recurrencePattern.dayOfMonth);
    // writer.writeEnumValue<DayOfWeek>("daysOfWeek", recurrencePattern.daysOfWeek);
    writer.writeEnumValue("firstDayOfWeek", recurrencePattern.firstDayOfWeek);
    writer.writeEnumValue("index", recurrencePattern.index);
    writer.writeNumberValue("interval", recurrencePattern.interval);
    writer.writeNumberValue("month", recurrencePattern.month);
    writer.writeEnumValue("type", recurrencePattern.type);
}

function serializeRecurrenceRange(writer, recurrenceRange = {}) {
    writer.writeDateOnlyValue("endDate", recurrenceRange.endDate);
    writer.writeNumberValue("numberOfOccurrences", recurrenceRange.numberOfOccurrences);
    writer.writeStringValue("recurrenceTimeZone", recurrenceRange.recurrenceTimeZone);
    writer.writeDateOnlyValue("startDate", recurrenceRange.startDate);
    writer.writeEnumValue("type", recurrenceRange.type);
}

function serializePatternedRecurrence(writer, patternedRecurrence = {}) {
    writer.writeObjectValueFromMethod("pattern", patternedRecurrence.pattern, serializeRecurrencePattern);
    writer.writeObjectValueFromMethod("range", patternedRecurrence.range, serializeRecurrenceRange);
}

function serializeAccessReviewScheduleSettings(writer, accessReviewScheduleSettings = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("applyActions", accessReviewScheduleSettings.applyActions, serializeAccessReviewApplyAction);
    writer.writeBooleanValue("autoApplyDecisionsEnabled", accessReviewScheduleSettings.autoApplyDecisionsEnabled);
    writer.writeBooleanValue("decisionHistoriesForReviewersEnabled", accessReviewScheduleSettings.decisionHistoriesForReviewersEnabled);
    writer.writeStringValue("defaultDecision", accessReviewScheduleSettings.defaultDecision);
    writer.writeBooleanValue("defaultDecisionEnabled", accessReviewScheduleSettings.defaultDecisionEnabled);
    writer.writeNumberValue("instanceDurationInDays", accessReviewScheduleSettings.instanceDurationInDays);
    writer.writeBooleanValue("justificationRequiredOnApproval", accessReviewScheduleSettings.justificationRequiredOnApproval);
    writer.writeBooleanValue("mailNotificationsEnabled", accessReviewScheduleSettings.mailNotificationsEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("recommendationInsightSettings", accessReviewScheduleSettings.recommendationInsightSettings, serializeAccessReviewRecommendationInsightSetting);
    writer.writeDurationValue("recommendationLookBackDuration", accessReviewScheduleSettings.recommendationLookBackDuration);
    writer.writeBooleanValue("recommendationsEnabled", accessReviewScheduleSettings.recommendationsEnabled);
    writer.writeObjectValueFromMethod("recurrence", accessReviewScheduleSettings.recurrence, serializePatternedRecurrence);
    writer.writeBooleanValue("reminderNotificationsEnabled", accessReviewScheduleSettings.reminderNotificationsEnabled);
}

function serializeAccessReviewStageSettings(writer, accessReviewStageSettings = {}) {
    writer.writeCollectionOfPrimitiveValues("decisionsThatWillMoveToNextStage", accessReviewStageSettings.decisionsThatWillMoveToNextStage);
    writer.writeCollectionOfPrimitiveValues("dependsOn", accessReviewStageSettings.dependsOn);
    writer.writeNumberValue("durationInDays", accessReviewStageSettings.durationInDays);
    writer.writeCollectionOfObjectValuesFromMethod("fallbackReviewers", accessReviewStageSettings.fallbackReviewers, serializeAccessReviewReviewerScope);
    writer.writeCollectionOfObjectValuesFromMethod("recommendationInsightSettings", accessReviewStageSettings.recommendationInsightSettings, serializeAccessReviewRecommendationInsightSetting);
    writer.writeDurationValue("recommendationLookBackDuration", accessReviewStageSettings.recommendationLookBackDuration);
    writer.writeBooleanValue("recommendationsEnabled", accessReviewStageSettings.recommendationsEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("reviewers", accessReviewStageSettings.reviewers, serializeAccessReviewReviewerScope);
    writer.writeStringValue("stageId", accessReviewStageSettings.stageId);
}

function serializeAccessReviewScheduleDefinition(writer, accessReviewScheduleDefinition = {}) {
    serializeEntity(writer, accessReviewScheduleDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("additionalNotificationRecipients", accessReviewScheduleDefinition.additionalNotificationRecipients, serializeAccessReviewNotificationRecipientItem);
    writer.writeCollectionOfObjectValuesFromMethod("backupReviewers", accessReviewScheduleDefinition.backupReviewers, serializeAccessReviewReviewerScope);
    writer.writeObjectValueFromMethod("createdBy", accessReviewScheduleDefinition.createdBy, serializeUserIdentity);
    writer.writeDateValue("createdDateTime", accessReviewScheduleDefinition.createdDateTime);
    writer.writeStringValue("descriptionForAdmins", accessReviewScheduleDefinition.descriptionForAdmins);
    writer.writeStringValue("descriptionForReviewers", accessReviewScheduleDefinition.descriptionForReviewers);
    writer.writeStringValue("displayName", accessReviewScheduleDefinition.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("fallbackReviewers", accessReviewScheduleDefinition.fallbackReviewers, serializeAccessReviewReviewerScope);
    writer.writeObjectValueFromMethod("instanceEnumerationScope", accessReviewScheduleDefinition.instanceEnumerationScope, serializeAccessReviewScope);
    writer.writeCollectionOfObjectValuesFromMethod("instances", accessReviewScheduleDefinition.instances, serializeAccessReviewInstance);
    writer.writeDateValue("lastModifiedDateTime", accessReviewScheduleDefinition.lastModifiedDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("reviewers", accessReviewScheduleDefinition.reviewers, serializeAccessReviewReviewerScope);
    writer.writeObjectValueFromMethod("scope", accessReviewScheduleDefinition.scope, serializeAccessReviewScope);
    writer.writeObjectValueFromMethod("settings", accessReviewScheduleDefinition.settings, serializeAccessReviewScheduleSettings);
    writer.writeCollectionOfObjectValuesFromMethod("stageSettings", accessReviewScheduleDefinition.stageSettings, serializeAccessReviewStageSettings);
    writer.writeStringValue("status", accessReviewScheduleDefinition.status);
}

function serializeAccessReviewStage(writer, accessReviewStage = {}) {
    serializeEntity(writer, accessReviewStage);
    writer.writeCollectionOfObjectValuesFromMethod("decisions", accessReviewStage.decisions, serializeAccessReviewInstanceDecisionItem);
    writer.writeDateValue("endDateTime", accessReviewStage.endDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("fallbackReviewers", accessReviewStage.fallbackReviewers, serializeAccessReviewReviewerScope);
    writer.writeCollectionOfObjectValuesFromMethod("reviewers", accessReviewStage.reviewers, serializeAccessReviewReviewerScope);
    writer.writeDateValue("startDateTime", accessReviewStage.startDateTime);
    writer.writeStringValue("status", accessReviewStage.status);
}

function serializeAccessReviewInstance(writer, accessReviewInstance = {}) {
    serializeEntity(writer, accessReviewInstance);
    writer.writeCollectionOfObjectValuesFromMethod("contactedReviewers", accessReviewInstance.contactedReviewers, serializeAccessReviewReviewer);
    writer.writeCollectionOfObjectValuesFromMethod("decisions", accessReviewInstance.decisions, serializeAccessReviewInstanceDecisionItem);
    writer.writeObjectValueFromMethod("definition", accessReviewInstance.definition, serializeAccessReviewScheduleDefinition);
    writer.writeDateValue("endDateTime", accessReviewInstance.endDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("errors", accessReviewInstance.errors, serializeAccessReviewError);
    writer.writeCollectionOfObjectValuesFromMethod("fallbackReviewers", accessReviewInstance.fallbackReviewers, serializeAccessReviewReviewerScope);
    writer.writeCollectionOfObjectValuesFromMethod("reviewers", accessReviewInstance.reviewers, serializeAccessReviewReviewerScope);
    writer.writeObjectValueFromMethod("scope", accessReviewInstance.scope, serializeAccessReviewScope);
    writer.writeCollectionOfObjectValuesFromMethod("stages", accessReviewInstance.stages, serializeAccessReviewStage);
    writer.writeDateValue("startDateTime", accessReviewInstance.startDateTime);
    writer.writeStringValue("status", accessReviewInstance.status);
}

function serializeAgreementAcceptance(writer, agreementAcceptance = {}) {
    serializeEntity(writer, agreementAcceptance);
    writer.writeStringValue("agreementFileId", agreementAcceptance.agreementFileId);
    writer.writeStringValue("agreementId", agreementAcceptance.agreementId);
    writer.writeStringValue("deviceDisplayName", agreementAcceptance.deviceDisplayName);
    writer.writeStringValue("deviceId", agreementAcceptance.deviceId);
    writer.writeStringValue("deviceOSType", agreementAcceptance.deviceOSType);
    writer.writeStringValue("deviceOSVersion", agreementAcceptance.deviceOSVersion);
    writer.writeDateValue("expirationDateTime", agreementAcceptance.expirationDateTime);
    writer.writeDateValue("recordedDateTime", agreementAcceptance.recordedDateTime);
    writer.writeEnumValue("state", agreementAcceptance.state);
    writer.writeStringValue("userDisplayName", agreementAcceptance.userDisplayName);
    writer.writeStringValue("userEmail", agreementAcceptance.userEmail);
    writer.writeStringValue("userId", agreementAcceptance.userId);
    writer.writeStringValue("userPrincipalName", agreementAcceptance.userPrincipalName);
}

function serializeAppConsentRequestScope(writer, appConsentRequestScope = {}) {
    writer.writeStringValue("displayName", appConsentRequestScope.displayName);
}

function serializeApprovalStep(writer, approvalStep = {}) {
    serializeEntity(writer, approvalStep);
    writer.writeBooleanValue("assignedToMe", approvalStep.assignedToMe);
    writer.writeStringValue("displayName", approvalStep.displayName);
    writer.writeStringValue("justification", approvalStep.justification);
    writer.writeObjectValueFromMethod("reviewedBy", approvalStep.reviewedBy, serializeIdentity);
    writer.writeDateValue("reviewedDateTime", approvalStep.reviewedDateTime);
    writer.writeStringValue("reviewResult", approvalStep.reviewResult);
    writer.writeStringValue("status", approvalStep.status);
}

function serializeApproval(writer, approval = {}) {
    serializeEntity(writer, approval);
    writer.writeCollectionOfObjectValuesFromMethod("steps", approval.steps, serializeApprovalStep);
}

function serializeIdentitySet(writer, identitySet = {}) {
    writer.writeObjectValueFromMethod("application", identitySet.application, serializeIdentity);
    writer.writeObjectValueFromMethod("device", identitySet.device, serializeIdentity);
    writer.writeObjectValueFromMethod("user", identitySet.user, serializeIdentity);
}

function serializeRequest(writer, request = {}) {
    serializeEntity(writer, request);
    writer.writeStringValue("approvalId", request.approvalId);
    writer.writeDateValue("completedDateTime", request.completedDateTime);
    writer.writeObjectValueFromMethod("createdBy", request.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", request.createdDateTime);
    writer.writeStringValue("customData", request.customData);
    writer.writeStringValue("status", request.status);
}

function serializeUserConsentRequest(writer, userConsentRequest = {}) {
    serializeRequest(writer, userConsentRequest);
    writer.writeObjectValueFromMethod("approval", userConsentRequest.approval, serializeApproval);
    writer.writeStringValue("reason", userConsentRequest.reason);
}

function serializeAppConsentRequest(writer, appConsentRequest = {}) {
    serializeEntity(writer, appConsentRequest);
    writer.writeStringValue("appDisplayName", appConsentRequest.appDisplayName);
    writer.writeStringValue("appId", appConsentRequest.appId);
    writer.writeStringValue("consentType", appConsentRequest.consentType);
    writer.writeCollectionOfObjectValuesFromMethod("pendingScopes", appConsentRequest.pendingScopes, serializeAppConsentRequestScope);
    writer.writeCollectionOfObjectValuesFromMethod("userConsentRequests", appConsentRequest.userConsentRequests, serializeUserConsentRequest);
}

function serializeAppRoleAssignment(writer, appRoleAssignment = {}) {
    serializeEntity(writer, appRoleAssignment);
    writer.writeStringValue("appRoleId", appRoleAssignment.appRoleId);
    writer.writeDateValue("creationTimestamp", appRoleAssignment.creationTimestamp);
    writer.writeStringValue("principalDisplayName", appRoleAssignment.principalDisplayName);
    writer.writeStringValue("principalId", appRoleAssignment.principalId);
    writer.writeStringValue("principalType", appRoleAssignment.principalType);
    writer.writeStringValue("resourceDisplayName", appRoleAssignment.resourceDisplayName);
    writer.writeStringValue("resourceId", appRoleAssignment.resourceId);
}

function serializeAssignedLicense(writer, assignedLicense = {}) {
    writer.writeCollectionOfPrimitiveValues("disabledPlans", assignedLicense.disabledPlans);
    writer.writeStringValue("skuId", assignedLicense.skuId);
}

function serializeAssignedPlan(writer, assignedPlan = {}) {
    writer.writeDateValue("assignedDateTime", assignedPlan.assignedDateTime);
    writer.writeStringValue("capabilityStatus", assignedPlan.capabilityStatus);
    writer.writeStringValue("service", assignedPlan.service);
    writer.writeStringValue("servicePlanId", assignedPlan.servicePlanId);
}

function serializeAuthenticationMethod(writer, authenticationMethod = {}) {
    serializeEntity(writer, authenticationMethod);
}

function serializeEmailAuthenticationMethod(writer, emailAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, emailAuthenticationMethod);
    writer.writeStringValue("emailAddress", emailAuthenticationMethod.emailAddress);
}

function serializeFido2AuthenticationMethod(writer, fido2AuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, fido2AuthenticationMethod);
    writer.writeStringValue("aaGuid", fido2AuthenticationMethod.aaGuid);
    writer.writeCollectionOfPrimitiveValues("attestationCertificates", fido2AuthenticationMethod.attestationCertificates);
    writer.writeEnumValue("attestationLevel", fido2AuthenticationMethod.attestationLevel);
    writer.writeDateValue("createdDateTime", fido2AuthenticationMethod.createdDateTime);
    writer.writeDateValue("creationDateTime", fido2AuthenticationMethod.creationDateTime);
    writer.writeStringValue("displayName", fido2AuthenticationMethod.displayName);
    writer.writeStringValue("model", fido2AuthenticationMethod.model);
}

function serializeLongRunningOperation(writer, longRunningOperation = {}) {
    serializeEntity(writer, longRunningOperation);
    writer.writeDateValue("createdDateTime", longRunningOperation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", longRunningOperation.lastActionDateTime);
    writer.writeStringValue("resourceLocation", longRunningOperation.resourceLocation);
    writer.writeEnumValue("status", longRunningOperation.status);
    writer.writeStringValue("statusDetail", longRunningOperation.statusDetail);
}

function serializeAlternativeSecurityId(writer, alternativeSecurityId = {}) {
    writer.writeStringValue("identityProvider", alternativeSecurityId.identityProvider);
    writer.writeStringValue("key", alternativeSecurityId.key);
    writer.writeNumberValue("type", alternativeSecurityId.type);
}

function serializePayloadRequest(writer, payloadRequest = {}) {
}

function serializePayloadResponse(writer, payloadResponse = {}) {
    serializeEntity(writer, payloadResponse);
}

function serializeCommand(writer, command = {}) {
    serializeEntity(writer, command);
    writer.writeStringValue("appServiceName", command.appServiceName);
    writer.writeStringValue("error", command.error_escaped);
    writer.writeStringValue("packageFamilyName", command.packageFamilyName);
    writer.writeObjectValueFromMethod("payload", command.payload, serializePayloadRequest);
    writer.writeStringValue("permissionTicket", command.permissionTicket);
    writer.writeStringValue("postBackUri", command.postBackUri);
    writer.writeObjectValueFromMethod("responsepayload", command.responsepayload, serializePayloadResponse);
    writer.writeStringValue("status", command.status);
    writer.writeStringValue("type", command.type);
}

function serializeDirectoryObject(writer, directoryObject = {}) {
    serializeEntity(writer, directoryObject);
    writer.writeDateValue("deletedDateTime", directoryObject.deletedDateTime);
}

function serializeExtension(writer, extension = {}) {
    serializeEntity(writer, extension);
}

function serializeOnPremisesExtensionAttributes(writer, onPremisesExtensionAttributes = {}) {
    writer.writeStringValue("extensionAttribute1", onPremisesExtensionAttributes.extensionAttribute1);
    writer.writeStringValue("extensionAttribute10", onPremisesExtensionAttributes.extensionAttribute10);
    writer.writeStringValue("extensionAttribute11", onPremisesExtensionAttributes.extensionAttribute11);
    writer.writeStringValue("extensionAttribute12", onPremisesExtensionAttributes.extensionAttribute12);
    writer.writeStringValue("extensionAttribute13", onPremisesExtensionAttributes.extensionAttribute13);
    writer.writeStringValue("extensionAttribute14", onPremisesExtensionAttributes.extensionAttribute14);
    writer.writeStringValue("extensionAttribute15", onPremisesExtensionAttributes.extensionAttribute15);
    writer.writeStringValue("extensionAttribute2", onPremisesExtensionAttributes.extensionAttribute2);
    writer.writeStringValue("extensionAttribute3", onPremisesExtensionAttributes.extensionAttribute3);
    writer.writeStringValue("extensionAttribute4", onPremisesExtensionAttributes.extensionAttribute4);
    writer.writeStringValue("extensionAttribute5", onPremisesExtensionAttributes.extensionAttribute5);
    writer.writeStringValue("extensionAttribute6", onPremisesExtensionAttributes.extensionAttribute6);
    writer.writeStringValue("extensionAttribute7", onPremisesExtensionAttributes.extensionAttribute7);
    writer.writeStringValue("extensionAttribute8", onPremisesExtensionAttributes.extensionAttribute8);
    writer.writeStringValue("extensionAttribute9", onPremisesExtensionAttributes.extensionAttribute9);
}

function serializeUsageRight(writer, usageRight = {}) {
    serializeEntity(writer, usageRight);
    writer.writeStringValue("catalogId", usageRight.catalogId);
    writer.writeStringValue("serviceIdentifier", usageRight.serviceIdentifier);
    writer.writeEnumValue("state", usageRight.state);
}

function serializeDevice(writer, device = {}) {
    serializeDirectoryObject(writer, device);
    writer.writeBooleanValue("accountEnabled", device.accountEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("alternativeSecurityIds", device.alternativeSecurityIds, serializeAlternativeSecurityId);
    writer.writeDateValue("approximateLastSignInDateTime", device.approximateLastSignInDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("commands", device.commands, serializeCommand);
    writer.writeDateValue("complianceExpirationDateTime", device.complianceExpirationDateTime);
    writer.writeStringValue("deviceCategory", device.deviceCategory);
    writer.writeStringValue("deviceId", device.deviceId);
    writer.writeStringValue("deviceMetadata", device.deviceMetadata);
    writer.writeStringValue("deviceOwnership", device.deviceOwnership);
    writer.writeNumberValue("deviceVersion", device.deviceVersion);
    writer.writeStringValue("displayName", device.displayName);
    writer.writeStringValue("domainName", device.domainName);
    writer.writeStringValue("enrollmentProfileName", device.enrollmentProfileName);
    writer.writeStringValue("enrollmentType", device.enrollmentType);
    writer.writeObjectValueFromMethod("extensionAttributes", device.extensionAttributes, serializeOnPremisesExtensionAttributes);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", device.extensions, serializeExtension);
    writer.writeCollectionOfPrimitiveValues("hostnames", device.hostnames);
    writer.writeBooleanValue("isCompliant", device.isCompliant);
    writer.writeBooleanValue("isManaged", device.isManaged);
    writer.writeBooleanValue("isManagementRestricted", device.isManagementRestricted);
    writer.writeBooleanValue("isRooted", device.isRooted);
    writer.writeStringValue("kind", device.kind);
    writer.writeStringValue("managementType", device.managementType);
    writer.writeStringValue("manufacturer", device.manufacturer);
    writer.writeStringValue("mdmAppId", device.mdmAppId);
    writer.writeCollectionOfObjectValuesFromMethod("memberOf", device.memberOf, serializeDirectoryObject);
    writer.writeStringValue("model", device.model);
    writer.writeStringValue("name", device.name);
    writer.writeDateValue("onPremisesLastSyncDateTime", device.onPremisesLastSyncDateTime);
    writer.writeBooleanValue("onPremisesSyncEnabled", device.onPremisesSyncEnabled);
    writer.writeStringValue("operatingSystem", device.operatingSystem);
    writer.writeStringValue("operatingSystemVersion", device.operatingSystemVersion);
    writer.writeCollectionOfPrimitiveValues("physicalIds", device.physicalIds);
    writer.writeStringValue("platform", device.platform);
    writer.writeStringValue("profileType", device.profileType);
    writer.writeCollectionOfObjectValuesFromMethod("registeredOwners", device.registeredOwners, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("registeredUsers", device.registeredUsers, serializeDirectoryObject);
    writer.writeDateValue("registrationDateTime", device.registrationDateTime);
    writer.writeStringValue("status", device.status);
    writer.writeCollectionOfPrimitiveValues("systemLabels", device.systemLabels);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveMemberOf", device.transitiveMemberOf, serializeDirectoryObject);
    writer.writeStringValue("trustType", device.trustType);
    writer.writeCollectionOfObjectValuesFromMethod("usageRights", device.usageRights, serializeUsageRight);
}

function serializeMicrosoftAuthenticatorAuthenticationMethod(writer, microsoftAuthenticatorAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, microsoftAuthenticatorAuthenticationMethod);
    writer.writeDateValue("createdDateTime", microsoftAuthenticatorAuthenticationMethod.createdDateTime);
    writer.writeObjectValueFromMethod("device", microsoftAuthenticatorAuthenticationMethod.device, serializeDevice);
    writer.writeStringValue("deviceTag", microsoftAuthenticatorAuthenticationMethod.deviceTag);
    writer.writeStringValue("displayName", microsoftAuthenticatorAuthenticationMethod.displayName);
    writer.writeStringValue("phoneAppVersion", microsoftAuthenticatorAuthenticationMethod.phoneAppVersion);
}

function serializePasswordAuthenticationMethod(writer, passwordAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, passwordAuthenticationMethod);
    writer.writeDateValue("createdDateTime", passwordAuthenticationMethod.createdDateTime);
    writer.writeDateValue("creationDateTime", passwordAuthenticationMethod.creationDateTime);
    writer.writeStringValue("password", passwordAuthenticationMethod.password);
}

function serializePasswordlessMicrosoftAuthenticatorAuthenticationMethod(writer, passwordlessMicrosoftAuthenticatorAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, passwordlessMicrosoftAuthenticatorAuthenticationMethod);
    writer.writeDateValue("createdDateTime", passwordlessMicrosoftAuthenticatorAuthenticationMethod.createdDateTime);
    writer.writeDateValue("creationDateTime", passwordlessMicrosoftAuthenticatorAuthenticationMethod.creationDateTime);
    writer.writeObjectValueFromMethod("device", passwordlessMicrosoftAuthenticatorAuthenticationMethod.device, serializeDevice);
    writer.writeStringValue("displayName", passwordlessMicrosoftAuthenticatorAuthenticationMethod.displayName);
}

function serializePhoneAuthenticationMethod(writer, phoneAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, phoneAuthenticationMethod);
    writer.writeStringValue("phoneNumber", phoneAuthenticationMethod.phoneNumber);
    writer.writeEnumValue("phoneType", phoneAuthenticationMethod.phoneType);
    writer.writeEnumValue("smsSignInState", phoneAuthenticationMethod.smsSignInState);
}

function serializeSoftwareOathAuthenticationMethod(writer, softwareOathAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, softwareOathAuthenticationMethod);
    writer.writeStringValue("secretKey", softwareOathAuthenticationMethod.secretKey);
}

function serializeTemporaryAccessPassAuthenticationMethod(writer, temporaryAccessPassAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, temporaryAccessPassAuthenticationMethod);
    writer.writeDateValue("createdDateTime", temporaryAccessPassAuthenticationMethod.createdDateTime);
    writer.writeBooleanValue("isUsable", temporaryAccessPassAuthenticationMethod.isUsable);
    writer.writeBooleanValue("isUsableOnce", temporaryAccessPassAuthenticationMethod.isUsableOnce);
    writer.writeNumberValue("lifetimeInMinutes", temporaryAccessPassAuthenticationMethod.lifetimeInMinutes);
    writer.writeStringValue("methodUsabilityReason", temporaryAccessPassAuthenticationMethod.methodUsabilityReason);
    writer.writeDateValue("startDateTime", temporaryAccessPassAuthenticationMethod.startDateTime);
    writer.writeStringValue("temporaryAccessPass", temporaryAccessPassAuthenticationMethod.temporaryAccessPass);
}

function serializeWindowsHelloForBusinessAuthenticationMethod(writer, windowsHelloForBusinessAuthenticationMethod = {}) {
    serializeAuthenticationMethod(writer, windowsHelloForBusinessAuthenticationMethod);
    writer.writeDateValue("createdDateTime", windowsHelloForBusinessAuthenticationMethod.createdDateTime);
    writer.writeObjectValueFromMethod("device", windowsHelloForBusinessAuthenticationMethod.device, serializeDevice);
    writer.writeStringValue("displayName", windowsHelloForBusinessAuthenticationMethod.displayName);
    writer.writeEnumValue("keyStrength", windowsHelloForBusinessAuthenticationMethod.keyStrength);
}

function serializeAuthentication(writer, authentication = {}) {
    serializeEntity(writer, authentication);
    writer.writeCollectionOfObjectValuesFromMethod("emailMethods", authentication.emailMethods, serializeEmailAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("fido2Methods", authentication.fido2Methods, serializeFido2AuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("methods", authentication.methods, serializeAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("microsoftAuthenticatorMethods", authentication.microsoftAuthenticatorMethods, serializeMicrosoftAuthenticatorAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("operations", authentication.operations, serializeLongRunningOperation);
    writer.writeCollectionOfObjectValuesFromMethod("passwordlessMicrosoftAuthenticatorMethods", authentication.passwordlessMicrosoftAuthenticatorMethods, serializePasswordlessMicrosoftAuthenticatorAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("passwordMethods", authentication.passwordMethods, serializePasswordAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("phoneMethods", authentication.phoneMethods, serializePhoneAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("softwareOathMethods", authentication.softwareOathMethods, serializeSoftwareOathAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("temporaryAccessPassMethods", authentication.temporaryAccessPassMethods, serializeTemporaryAccessPassAuthenticationMethod);
    writer.writeCollectionOfObjectValuesFromMethod("windowsHelloForBusinessMethods", authentication.windowsHelloForBusinessMethods, serializeWindowsHelloForBusinessAuthenticationMethod);
}

function serializeAuthorizationInfo(writer, authorizationInfo = {}) {
    writer.writeCollectionOfPrimitiveValues("certificateUserIds", authorizationInfo.certificateUserIds);
}

function serializeEmailAddress(writer, emailAddress = {}) {
    writer.writeStringValue("address", emailAddress.address);
    writer.writeStringValue("name", emailAddress.name);
}

function serializeCalendarPermission(writer, calendarPermission = {}) {
    serializeEntity(writer, calendarPermission);
    //writer.writeEnumValue<CalendarRoleType>("allowedRoles", calendarPermission.allowedRoles);
    writer.writeObjectValueFromMethod("emailAddress", calendarPermission.emailAddress, serializeEmailAddress);
    writer.writeBooleanValue("isInsideOrganization", calendarPermission.isInsideOrganization);
    writer.writeBooleanValue("isRemovable", calendarPermission.isRemovable);
    writer.writeEnumValue("role", calendarPermission.role);
}

function serializeAttachment(writer, attachment = {}) {
    serializeEntity(writer, attachment);
    writer.writeStringValue("contentType", attachment.contentType);
    writer.writeBooleanValue("isInline", attachment.isInline);
    writer.writeDateValue("lastModifiedDateTime", attachment.lastModifiedDateTime);
    writer.writeStringValue("name", attachment.name);
    writer.writeNumberValue("size", attachment.size);
}

function serializeRecipient(writer, recipient = {}) {
    writer.writeObjectValueFromMethod("emailAddress", recipient.emailAddress, serializeEmailAddress);
}

function serializeAttendeeBase(writer, attendeeBase = {}) {
    serializeRecipient(writer, attendeeBase);
    writer.writeEnumValue("type", attendeeBase.type);
}

function serializeResponseStatus(writer, responseStatus = {}) {
    writer.writeEnumValue("response", responseStatus.response);
    writer.writeDateValue("time", responseStatus.time);
}

function serializeDateTimeTimeZone(writer, dateTimeTimeZone = {}) {
    writer.writeStringValue("dateTime", dateTimeTimeZone.dateTime);
    writer.writeStringValue("timeZone", dateTimeTimeZone.timeZone);
}

function serializeTimeSlot(writer, timeSlot = {}) {
    writer.writeObjectValueFromMethod("end", timeSlot.end, serializeDateTimeTimeZone);
    writer.writeObjectValueFromMethod("start", timeSlot.start, serializeDateTimeTimeZone);
}

function serializeAttendee(writer, attendee = {}) {
    serializeAttendeeBase(writer, attendee);
    writer.writeObjectValueFromMethod("proposedNewTime", attendee.proposedNewTime, serializeTimeSlot);
    writer.writeObjectValueFromMethod("status", attendee.status, serializeResponseStatus);
}

function serializeItemBody(writer, itemBody = {}) {
    writer.writeStringValue("content", itemBody.content);
    writer.writeEnumValue("contentType", itemBody.contentType);
}

function serializeOutlookGeoCoordinates(writer, outlookGeoCoordinates = {}) {
    writer.writeNumberValue("accuracy", outlookGeoCoordinates.accuracy);
    writer.writeNumberValue("altitude", outlookGeoCoordinates.altitude);
    writer.writeNumberValue("altitudeAccuracy", outlookGeoCoordinates.altitudeAccuracy);
    writer.writeNumberValue("latitude", outlookGeoCoordinates.latitude);
    writer.writeNumberValue("longitude", outlookGeoCoordinates.longitude);
}

function serializePhysicalAddress(writer, physicalAddress = {}) {
    writer.writeStringValue("city", physicalAddress.city);
    writer.writeStringValue("countryOrRegion", physicalAddress.countryOrRegion);
    writer.writeStringValue("postalCode", physicalAddress.postalCode);
    writer.writeStringValue("postOfficeBox", physicalAddress.postOfficeBox);
    writer.writeStringValue("state", physicalAddress.state);
    writer.writeStringValue("street", physicalAddress.street);
    writer.writeEnumValue("type", physicalAddress.type);
}

function serializeLocation(writer, location = {}) {
    writer.writeObjectValueFromMethod("address", location.address, serializePhysicalAddress);
    writer.writeObjectValueFromMethod("coordinates", location.coordinates, serializeOutlookGeoCoordinates);
    writer.writeStringValue("displayName", location.displayName);
    writer.writeStringValue("locationEmailAddress", location.locationEmailAddress);
    writer.writeEnumValue("locationType", location.locationType);
    writer.writeStringValue("locationUri", location.locationUri);
    writer.writeStringValue("uniqueId", location.uniqueId);
    writer.writeEnumValue("uniqueIdType", location.uniqueIdType);
}

function serializeMultiValueLegacyExtendedProperty(writer, multiValueLegacyExtendedProperty = {}) {
    serializeEntity(writer, multiValueLegacyExtendedProperty);
    writer.writeCollectionOfPrimitiveValues("value", multiValueLegacyExtendedProperty.value);
}

function serializePhone(writer, phone = {}) {
    writer.writeStringValue("number", phone.number);
    writer.writeEnumValue("type", phone.type);
}

function serializeOnlineMeetingInfo(writer, onlineMeetingInfo = {}) {
    writer.writeStringValue("conferenceId", onlineMeetingInfo.conferenceId);
    writer.writeStringValue("joinUrl", onlineMeetingInfo.joinUrl);
    writer.writeCollectionOfObjectValuesFromMethod("phones", onlineMeetingInfo.phones, serializePhone);
    writer.writeStringValue("quickDial", onlineMeetingInfo.quickDial);
    writer.writeCollectionOfPrimitiveValues("tollFreeNumbers", onlineMeetingInfo.tollFreeNumbers);
    writer.writeStringValue("tollNumber", onlineMeetingInfo.tollNumber);
}

function serializeOutlookItem(writer, outlookItem = {}) {
    serializeEntity(writer, outlookItem);
    writer.writeCollectionOfPrimitiveValues("categories", outlookItem.categories);
    writer.writeStringValue("changeKey", outlookItem.changeKey);
    writer.writeDateValue("createdDateTime", outlookItem.createdDateTime);
    writer.writeDateValue("lastModifiedDateTime", outlookItem.lastModifiedDateTime);
}

function serializeSingleValueLegacyExtendedProperty(writer, singleValueLegacyExtendedProperty = {}) {
    serializeEntity(writer, singleValueLegacyExtendedProperty);
    writer.writeStringValue("value", singleValueLegacyExtendedProperty.value);
}

function serializeEvent(writer, event = {}) {
    serializeOutlookItem(writer, event);
    writer.writeBooleanValue("allowNewTimeProposals", event.allowNewTimeProposals);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", event.attachments, serializeAttachment);
    writer.writeCollectionOfObjectValuesFromMethod("attendees", event.attendees, serializeAttendee);
    writer.writeObjectValueFromMethod("body", event.body, serializeItemBody);
    writer.writeStringValue("bodyPreview", event.bodyPreview);
    writer.writeObjectValueFromMethod("calendar", event.calendar, serializeCalendar);
    writer.writeCollectionOfPrimitiveValues("cancelledOccurrences", event.cancelledOccurrences);
    writer.writeObjectValueFromMethod("end", event.end, serializeDateTimeTimeZone);
    writer.writeCollectionOfObjectValuesFromMethod("exceptionOccurrences", event.exceptionOccurrences, serializeEvent);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", event.extensions, serializeExtension);
    writer.writeBooleanValue("hasAttachments", event.hasAttachments);
    writer.writeBooleanValue("hideAttendees", event.hideAttendees);
    writer.writeEnumValue("importance", event.importance);
    writer.writeCollectionOfObjectValuesFromMethod("instances", event.instances, serializeEvent);
    writer.writeBooleanValue("isAllDay", event.isAllDay);
    writer.writeBooleanValue("isCancelled", event.isCancelled);
    writer.writeBooleanValue("isDraft", event.isDraft);
    writer.writeBooleanValue("isOnlineMeeting", event.isOnlineMeeting);
    writer.writeBooleanValue("isOrganizer", event.isOrganizer);
    writer.writeBooleanValue("isReminderOn", event.isReminderOn);
    writer.writeObjectValueFromMethod("location", event.location, serializeLocation);
    writer.writeCollectionOfObjectValuesFromMethod("locations", event.locations, serializeLocation);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", event.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("occurrenceId", event.occurrenceId);
    writer.writeObjectValueFromMethod("onlineMeeting", event.onlineMeeting, serializeOnlineMeetingInfo);
    writer.writeEnumValue("onlineMeetingProvider", event.onlineMeetingProvider);
    writer.writeStringValue("onlineMeetingUrl", event.onlineMeetingUrl);
    writer.writeObjectValueFromMethod("organizer", event.organizer, serializeRecipient);
    writer.writeStringValue("originalEndTimeZone", event.originalEndTimeZone);
    writer.writeDateValue("originalStart", event.originalStart);
    writer.writeStringValue("originalStartTimeZone", event.originalStartTimeZone);
    writer.writeObjectValueFromMethod("recurrence", event.recurrence, serializePatternedRecurrence);
    writer.writeNumberValue("reminderMinutesBeforeStart", event.reminderMinutesBeforeStart);
    writer.writeBooleanValue("responseRequested", event.responseRequested);
    writer.writeObjectValueFromMethod("responseStatus", event.responseStatus, serializeResponseStatus);
    writer.writeEnumValue("sensitivity", event.sensitivity);
    writer.writeStringValue("seriesMasterId", event.seriesMasterId);
    writer.writeEnumValue("showAs", event.showAs);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", event.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeObjectValueFromMethod("start", event.start, serializeDateTimeTimeZone);
    writer.writeStringValue("subject", event.subject);
    writer.writeStringValue("transactionId", event.transactionId);
    writer.writeEnumValue("type", event.type);
    writer.writeStringValue("uid", event.uid);
    writer.writeStringValue("webLink", event.webLink);
}

function serializeCalendar(writer, calendar = {}) {
    serializeEntity(writer, calendar);
    //writer.writeEnumValue<OnlineMeetingProviderType>("allowedOnlineMeetingProviders", calendar.allowedOnlineMeetingProviders);
    writer.writeStringValue("calendarGroupId", calendar.calendarGroupId);
    writer.writeCollectionOfObjectValuesFromMethod("calendarPermissions", calendar.calendarPermissions, serializeCalendarPermission);
    writer.writeCollectionOfObjectValuesFromMethod("calendarView", calendar.calendarView, serializeEvent);
    writer.writeBooleanValue("canEdit", calendar.canEdit);
    writer.writeBooleanValue("canShare", calendar.canShare);
    writer.writeBooleanValue("canViewPrivateItems", calendar.canViewPrivateItems);
    writer.writeStringValue("changeKey", calendar.changeKey);
    writer.writeEnumValue("color", calendar.color);
    writer.writeEnumValue("defaultOnlineMeetingProvider", calendar.defaultOnlineMeetingProvider);
    writer.writeCollectionOfObjectValuesFromMethod("events", calendar.events, serializeEvent);
    writer.writeStringValue("hexColor", calendar.hexColor);
    writer.writeBooleanValue("isDefaultCalendar", calendar.isDefaultCalendar);
    writer.writeBooleanValue("isRemovable", calendar.isRemovable);
    writer.writeBooleanValue("isShared", calendar.isShared);
    writer.writeBooleanValue("isSharedWithMe", calendar.isSharedWithMe);
    writer.writeBooleanValue("isTallyingResponses", calendar.isTallyingResponses);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", calendar.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("name", calendar.name);
    writer.writeObjectValueFromMethod("owner", calendar.owner, serializeEmailAddress);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", calendar.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
}

function serializeCalendarGroup(writer, calendarGroup = {}) {
    serializeEntity(writer, calendarGroup);
    writer.writeCollectionOfObjectValuesFromMethod("calendars", calendarGroup.calendars, serializeCalendar);
    writer.writeStringValue("changeKey", calendarGroup.changeKey);
    writer.writeStringValue("classId", calendarGroup.classId);
    writer.writeStringValue("name", calendarGroup.name);
}

function serializeChannelIdentity(writer, channelIdentity = {}) {
    writer.writeStringValue("channelId", channelIdentity.channelId);
    writer.writeStringValue("teamId", channelIdentity.teamId);
}

function serializeChatMessageAttachment(writer, chatMessageAttachment = {}) {
    writer.writeStringValue("content", chatMessageAttachment.content);
    writer.writeStringValue("contentType", chatMessageAttachment.contentType);
    writer.writeStringValue("contentUrl", chatMessageAttachment.contentUrl);
    writer.writeStringValue("id", chatMessageAttachment.id);
    writer.writeStringValue("name", chatMessageAttachment.name);
    writer.writeStringValue("teamsAppId", chatMessageAttachment.teamsAppId);
    writer.writeStringValue("thumbnailUrl", chatMessageAttachment.thumbnailUrl);
}

function serializeChatMessageFromIdentitySet(writer, chatMessageFromIdentitySet = {}) {
    serializeIdentitySet(writer, chatMessageFromIdentitySet);
}

function serializeChatMessageReactionIdentitySet(writer, chatMessageReactionIdentitySet = {}) {
    serializeIdentitySet(writer, chatMessageReactionIdentitySet);
}

function serializeChatMessageReaction(writer, chatMessageReaction = {}) {
    writer.writeDateValue("createdDateTime", chatMessageReaction.createdDateTime);
    writer.writeStringValue("reactionType", chatMessageReaction.reactionType);
    writer.writeObjectValueFromMethod("user", chatMessageReaction.user, serializeChatMessageReactionIdentitySet);
}

function serializeChatMessageHistoryItem(writer, chatMessageHistoryItem = {}) {
    writer.writeEnumValue("actions", chatMessageHistoryItem.actions);
    writer.writeDateValue("modifiedDateTime", chatMessageHistoryItem.modifiedDateTime);
    writer.writeObjectValueFromMethod("reaction", chatMessageHistoryItem.reaction, serializeChatMessageReaction);
}

function serializeTeamworkHostedContent(writer, teamworkHostedContent = {}) {
    serializeEntity(writer, teamworkHostedContent);
    writer.writeStringValue("contentBytes", teamworkHostedContent.contentBytes);
    writer.writeStringValue("contentType", teamworkHostedContent.contentType);
}

function serializeChatMessageHostedContent(writer, chatMessageHostedContent = {}) {
    serializeTeamworkHostedContent(writer, chatMessageHostedContent);
}

function serializeTeamworkConversationIdentity(writer, teamworkConversationIdentity = {}) {
    serializeIdentity(writer, teamworkConversationIdentity);
    writer.writeEnumValue("conversationIdentityType", teamworkConversationIdentity.conversationIdentityType);
}

function serializeTeamworkTagIdentity(writer, teamworkTagIdentity = {}) {
    serializeIdentity(writer, teamworkTagIdentity);
}

function serializeChatMessageMentionedIdentitySet(writer, chatMessageMentionedIdentitySet = {}) {
    serializeIdentitySet(writer, chatMessageMentionedIdentitySet);
    writer.writeObjectValueFromMethod("conversation", chatMessageMentionedIdentitySet.conversation, serializeTeamworkConversationIdentity);
    writer.writeObjectValueFromMethod("tag", chatMessageMentionedIdentitySet.tag, serializeTeamworkTagIdentity);
}

function serializeChatMessageMention(writer, chatMessageMention = {}) {
    writer.writeNumberValue("id", chatMessageMention.id);
    writer.writeObjectValueFromMethod("mentioned", chatMessageMention.mentioned, serializeChatMessageMentionedIdentitySet);
    writer.writeStringValue("mentionText", chatMessageMention.mentionText);
}

function serializeChatMessagePolicyViolationPolicyTip(writer, chatMessagePolicyViolationPolicyTip = {}) {
    writer.writeStringValue("complianceUrl", chatMessagePolicyViolationPolicyTip.complianceUrl);
    writer.writeStringValue("generalText", chatMessagePolicyViolationPolicyTip.generalText);
    writer.writeCollectionOfPrimitiveValues("matchedConditionDescriptions", chatMessagePolicyViolationPolicyTip.matchedConditionDescriptions);
}

function serializeChatMessagePolicyViolation(writer, chatMessagePolicyViolation = {}) {
    writer.writeEnumValue("dlpAction", chatMessagePolicyViolation.dlpAction);
    writer.writeStringValue("justificationText", chatMessagePolicyViolation.justificationText);
    writer.writeObjectValueFromMethod("policyTip", chatMessagePolicyViolation.policyTip, serializeChatMessagePolicyViolationPolicyTip);
    writer.writeEnumValue("userAction", chatMessagePolicyViolation.userAction);
    writer.writeEnumValue("verdictDetails", chatMessagePolicyViolation.verdictDetails);
}

function serializeEventMessageDetail(writer, eventMessageDetail = {}) {
}

function serializeChatMessage(writer, chatMessage = {}) {
    serializeEntity(writer, chatMessage);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", chatMessage.attachments, serializeChatMessageAttachment);
    writer.writeObjectValueFromMethod("body", chatMessage.body, serializeItemBody);
    writer.writeObjectValueFromMethod("channelIdentity", chatMessage.channelIdentity, serializeChannelIdentity);
    writer.writeStringValue("chatId", chatMessage.chatId);
    writer.writeDateValue("createdDateTime", chatMessage.createdDateTime);
    writer.writeDateValue("deletedDateTime", chatMessage.deletedDateTime);
    writer.writeStringValue("etag", chatMessage.etag);
    writer.writeObjectValueFromMethod("eventDetail", chatMessage.eventDetail, serializeEventMessageDetail);
    writer.writeObjectValueFromMethod("from", chatMessage.from, serializeChatMessageFromIdentitySet);
    writer.writeCollectionOfObjectValuesFromMethod("hostedContents", chatMessage.hostedContents, serializeChatMessageHostedContent);
    writer.writeEnumValue("importance", chatMessage.importance);
    writer.writeDateValue("lastEditedDateTime", chatMessage.lastEditedDateTime);
    writer.writeDateValue("lastModifiedDateTime", chatMessage.lastModifiedDateTime);
    writer.writeStringValue("locale", chatMessage.locale);
    writer.writeCollectionOfObjectValuesFromMethod("mentions", chatMessage.mentions, serializeChatMessageMention);
    writer.writeCollectionOfObjectValuesFromMethod("messageHistory", chatMessage.messageHistory, serializeChatMessageHistoryItem);
    writer.writeEnumValue("messageType", chatMessage.messageType);
    writer.writeObjectValueFromMethod("onBehalfOf", chatMessage.onBehalfOf, serializeChatMessageFromIdentitySet);
    writer.writeObjectValueFromMethod("policyViolation", chatMessage.policyViolation, serializeChatMessagePolicyViolation);
    writer.writeCollectionOfObjectValuesFromMethod("reactions", chatMessage.reactions, serializeChatMessageReaction);
    writer.writeCollectionOfObjectValuesFromMethod("replies", chatMessage.replies, serializeChatMessage);
    writer.writeStringValue("replyToId", chatMessage.replyToId);
    writer.writeStringValue("subject", chatMessage.subject);
    writer.writeStringValue("summary", chatMessage.summary);
    writer.writeStringValue("webUrl", chatMessage.webUrl);
}

function serializeChatMessageInfo(writer, chatMessageInfo = {}) {
    serializeEntity(writer, chatMessageInfo);
    writer.writeObjectValueFromMethod("body", chatMessageInfo.body, serializeItemBody);
    writer.writeDateValue("createdDateTime", chatMessageInfo.createdDateTime);
    writer.writeObjectValueFromMethod("eventDetail", chatMessageInfo.eventDetail, serializeEventMessageDetail);
    writer.writeObjectValueFromMethod("from", chatMessageInfo.from, serializeChatMessageFromIdentitySet);
    writer.writeBooleanValue("isDeleted", chatMessageInfo.isDeleted);
    writer.writeEnumValue("messageType", chatMessageInfo.messageType);
}

function serializeChatViewpoint(writer, chatViewpoint = {}) {
    writer.writeBooleanValue("isHidden", chatViewpoint.isHidden);
    writer.writeDateValue("lastMessageReadDateTime", chatViewpoint.lastMessageReadDateTime);
}

function serializeConversationMember(writer, conversationMember = {}) {
    serializeEntity(writer, conversationMember);
    writer.writeStringValue("displayName", conversationMember.displayName);
    writer.writeCollectionOfPrimitiveValues("roles", conversationMember.roles);
    writer.writeDateValue("visibleHistoryStartDateTime", conversationMember.visibleHistoryStartDateTime);
}

function serializePinnedChatMessageInfo(writer, pinnedChatMessageInfo = {}) {
    serializeEntity(writer, pinnedChatMessageInfo);
    writer.writeObjectValueFromMethod("message", pinnedChatMessageInfo.message, serializeChatMessage);
}

function serializeResourceSpecificPermissionGrant(writer, resourceSpecificPermissionGrant = {}) {
    serializeDirectoryObject(writer, resourceSpecificPermissionGrant);
    writer.writeStringValue("clientAppId", resourceSpecificPermissionGrant.clientAppId);
    writer.writeStringValue("clientId", resourceSpecificPermissionGrant.clientId);
    writer.writeStringValue("permission", resourceSpecificPermissionGrant.permission);
    writer.writeStringValue("permissionType", resourceSpecificPermissionGrant.permissionType);
    writer.writeStringValue("resourceAppId", resourceSpecificPermissionGrant.resourceAppId);
}

function serializeTeamsAppIcon(writer, teamsAppIcon = {}) {
    serializeEntity(writer, teamsAppIcon);
    writer.writeObjectValueFromMethod("hostedContent", teamsAppIcon.hostedContent, serializeTeamworkHostedContent);
    writer.writeStringValue("webUrl", teamsAppIcon.webUrl);
}

function serializeTeamworkBot(writer, teamworkBot = {}) {
    serializeEntity(writer, teamworkBot);
}

function serializeTeamsAppDefinition(writer, teamsAppDefinition = {}) {
    serializeEntity(writer, teamsAppDefinition);
    writer.writeEnumValue("allowedInstallationScopes", teamsAppDefinition.allowedInstallationScopes);
    writer.writeStringValue("azureADAppId", teamsAppDefinition.azureADAppId);
    writer.writeObjectValueFromMethod("bot", teamsAppDefinition.bot, serializeTeamworkBot);
    writer.writeObjectValueFromMethod("colorIcon", teamsAppDefinition.colorIcon, serializeTeamsAppIcon);
    writer.writeObjectValueFromMethod("createdBy", teamsAppDefinition.createdBy, serializeIdentitySet);
    writer.writeStringValue("description", teamsAppDefinition.description);
    writer.writeStringValue("displayName", teamsAppDefinition.displayName);
    writer.writeDateValue("lastModifiedDateTime", teamsAppDefinition.lastModifiedDateTime);
    writer.writeObjectValueFromMethod("outlineIcon", teamsAppDefinition.outlineIcon, serializeTeamsAppIcon);
    writer.writeEnumValue("publishingState", teamsAppDefinition.publishingState);
    writer.writeStringValue("shortdescription", teamsAppDefinition.shortdescription);
    writer.writeStringValue("teamsAppId", teamsAppDefinition.teamsAppId);
    writer.writeStringValue("version", teamsAppDefinition.version);
}

function serializeTeamsApp(writer, teamsApp = {}) {
    serializeEntity(writer, teamsApp);
    writer.writeCollectionOfObjectValuesFromMethod("appDefinitions", teamsApp.appDefinitions, serializeTeamsAppDefinition);
    writer.writeStringValue("displayName", teamsApp.displayName);
    writer.writeEnumValue("distributionMethod", teamsApp.distributionMethod);
    writer.writeStringValue("externalId", teamsApp.externalId);
}

function serializeTeamsAppInstallation(writer, teamsAppInstallation = {}) {
    serializeEntity(writer, teamsAppInstallation);
    writer.writeObjectValueFromMethod("teamsApp", teamsAppInstallation.teamsApp, serializeTeamsApp);
    writer.writeObjectValueFromMethod("teamsAppDefinition", teamsAppInstallation.teamsAppDefinition, serializeTeamsAppDefinition);
}

function serializeOperationError(writer, operationError = {}) {
    writer.writeStringValue("code", operationError.code);
    writer.writeStringValue("message", operationError.message);
}

function serializeTeamsAsyncOperation(writer, teamsAsyncOperation = {}) {
    serializeEntity(writer, teamsAsyncOperation);
    writer.writeNumberValue("attemptsCount", teamsAsyncOperation.attemptsCount);
    writer.writeDateValue("createdDateTime", teamsAsyncOperation.createdDateTime);
    writer.writeObjectValueFromMethod("error_escaped", teamsAsyncOperation.error_escaped, serializeOperationError);
    writer.writeDateValue("lastActionDateTime", teamsAsyncOperation.lastActionDateTime);
    writer.writeEnumValue("operationType", teamsAsyncOperation.operationType);
    writer.writeEnumValue("status", teamsAsyncOperation.status);
    writer.writeStringValue("targetResourceId", teamsAsyncOperation.targetResourceId);
    writer.writeStringValue("targetResourceLocation", teamsAsyncOperation.targetResourceLocation);
}

function serializeTeamsTabConfiguration(writer, teamsTabConfiguration = {}) {
    writer.writeStringValue("contentUrl", teamsTabConfiguration.contentUrl);
    writer.writeStringValue("entityId", teamsTabConfiguration.entityId);
    writer.writeStringValue("removeUrl", teamsTabConfiguration.removeUrl);
    writer.writeStringValue("websiteUrl", teamsTabConfiguration.websiteUrl);
}

function serializeTeamsTab(writer, teamsTab = {}) {
    serializeEntity(writer, teamsTab);
    writer.writeObjectValueFromMethod("configuration", teamsTab.configuration, serializeTeamsTabConfiguration);
    writer.writeStringValue("displayName", teamsTab.displayName);
    writer.writeStringValue("messageId", teamsTab.messageId);
    writer.writeStringValue("sortOrderIndex", teamsTab.sortOrderIndex);
    writer.writeObjectValueFromMethod("teamsApp", teamsTab.teamsApp, serializeTeamsApp);
    writer.writeStringValue("teamsAppId", teamsTab.teamsAppId);
    writer.writeStringValue("webUrl", teamsTab.webUrl);
}

function serializeTeamworkUserIdentity(writer, teamworkUserIdentity = {}) {
    serializeIdentity(writer, teamworkUserIdentity);
    writer.writeEnumValue("userIdentityType", teamworkUserIdentity.userIdentityType);
}

function serializeTeamworkOnlineMeetingInfo(writer, teamworkOnlineMeetingInfo = {}) {
    writer.writeStringValue("calendarEventId", teamworkOnlineMeetingInfo.calendarEventId);
    writer.writeStringValue("joinWebUrl", teamworkOnlineMeetingInfo.joinWebUrl);
    writer.writeObjectValueFromMethod("organizer", teamworkOnlineMeetingInfo.organizer, serializeTeamworkUserIdentity);
}

function serializeChat(writer, chat = {}) {
    serializeEntity(writer, chat);
    writer.writeEnumValue("chatType", chat.chatType);
    writer.writeDateValue("createdDateTime", chat.createdDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("installedApps", chat.installedApps, serializeTeamsAppInstallation);
    writer.writeObjectValueFromMethod("lastMessagePreview", chat.lastMessagePreview, serializeChatMessageInfo);
    writer.writeDateValue("lastUpdatedDateTime", chat.lastUpdatedDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("members", chat.members, serializeConversationMember);
    writer.writeCollectionOfObjectValuesFromMethod("messages", chat.messages, serializeChatMessage);
    writer.writeObjectValueFromMethod("onlineMeetingInfo", chat.onlineMeetingInfo, serializeTeamworkOnlineMeetingInfo);
    writer.writeCollectionOfObjectValuesFromMethod("operations", chat.operations, serializeTeamsAsyncOperation);
    writer.writeCollectionOfObjectValuesFromMethod("permissionGrants", chat.permissionGrants, serializeResourceSpecificPermissionGrant);
    writer.writeCollectionOfObjectValuesFromMethod("pinnedMessages", chat.pinnedMessages, serializePinnedChatMessageInfo);
    writer.writeCollectionOfObjectValuesFromMethod("tabs", chat.tabs, serializeTeamsTab);
    writer.writeStringValue("tenantId", chat.tenantId);
    writer.writeStringValue("topic", chat.topic);
    writer.writeObjectValueFromMethod("viewpoint", chat.viewpoint, serializeChatViewpoint);
    writer.writeStringValue("webUrl", chat.webUrl);
}

function serializeCloudPcHealthCheckItem(writer, cloudPcHealthCheckItem = {}) {
    writer.writeStringValue("additionalDetails", cloudPcHealthCheckItem.additionalDetails);
    writer.writeStringValue("displayName", cloudPcHealthCheckItem.displayName);
    writer.writeDateValue("lastHealthCheckDateTime", cloudPcHealthCheckItem.lastHealthCheckDateTime);
    writer.writeEnumValue("result", cloudPcHealthCheckItem.result);
}

function serializeCloudPcConnectivityResult(writer, cloudPcConnectivityResult = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("failedHealthCheckItems", cloudPcConnectivityResult.failedHealthCheckItems, serializeCloudPcHealthCheckItem);
    writer.writeEnumValue("status", cloudPcConnectivityResult.status);
    writer.writeDateValue("updatedDateTime", cloudPcConnectivityResult.updatedDateTime);
}

function serializeCloudPcLoginResult(writer, cloudPcLoginResult = {}) {
    writer.writeDateValue("time", cloudPcLoginResult.time);
}

function serializeCloudPcPartnerAgentInstallResult(writer, cloudPcPartnerAgentInstallResult = {}) {
    writer.writeEnumValue("installStatus", cloudPcPartnerAgentInstallResult.installStatus);
    writer.writeBooleanValue("isThirdPartyPartner", cloudPcPartnerAgentInstallResult.isThirdPartyPartner);
    writer.writeEnumValue("partnerAgentName", cloudPcPartnerAgentInstallResult.partnerAgentName);
    writer.writeBooleanValue("retriable", cloudPcPartnerAgentInstallResult.retriable);
}

function serializeKeyValuePair(writer, keyValuePair = {}) {
    writer.writeStringValue("name", keyValuePair.name);
    writer.writeStringValue("value", keyValuePair.value);
}

function serializeCloudPcStatusDetails(writer, cloudPcStatusDetails = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("additionalInformation", cloudPcStatusDetails.additionalInformation, serializeKeyValuePair);
    writer.writeStringValue("code", cloudPcStatusDetails.code);
    writer.writeStringValue("message", cloudPcStatusDetails.message);
}

function serializeCloudPcRemoteActionResult(writer, cloudPcRemoteActionResult = {}) {
    writer.writeStringValue("actionName", cloudPcRemoteActionResult.actionName);
    writer.writeEnumValue("actionState", cloudPcRemoteActionResult.actionState);
    writer.writeStringValue("cloudPcId", cloudPcRemoteActionResult.cloudPcId);
    writer.writeDateValue("lastUpdatedDateTime", cloudPcRemoteActionResult.lastUpdatedDateTime);
    writer.writeStringValue("managedDeviceId", cloudPcRemoteActionResult.managedDeviceId);
    writer.writeDateValue("startDateTime", cloudPcRemoteActionResult.startDateTime);
    writer.writeObjectValueFromMethod("statusDetails", cloudPcRemoteActionResult.statusDetails, serializeCloudPcStatusDetails);
}

function serializeCloudPC(writer, cloudPC = {}) {
    serializeEntity(writer, cloudPC);
    writer.writeStringValue("aadDeviceId", cloudPC.aadDeviceId);
    writer.writeObjectValueFromMethod("connectivityResult", cloudPC.connectivityResult, serializeCloudPcConnectivityResult);
    writer.writeEnumValue("diskEncryptionState", cloudPC.diskEncryptionState);
    writer.writeStringValue("displayName", cloudPC.displayName);
    writer.writeDateValue("gracePeriodEndDateTime", cloudPC.gracePeriodEndDateTime);
    writer.writeStringValue("imageDisplayName", cloudPC.imageDisplayName);
    writer.writeObjectValueFromMethod("lastLoginResult", cloudPC.lastLoginResult, serializeCloudPcLoginResult);
    writer.writeDateValue("lastModifiedDateTime", cloudPC.lastModifiedDateTime);
    writer.writeObjectValueFromMethod("lastRemoteActionResult", cloudPC.lastRemoteActionResult, serializeCloudPcRemoteActionResult);
    writer.writeStringValue("managedDeviceId", cloudPC.managedDeviceId);
    writer.writeStringValue("managedDeviceName", cloudPC.managedDeviceName);
    writer.writeStringValue("onPremisesConnectionName", cloudPC.onPremisesConnectionName);
    writer.writeEnumValue("osVersion", cloudPC.osVersion);
    writer.writeCollectionOfObjectValuesFromMethod("partnerAgentInstallResults", cloudPC.partnerAgentInstallResults, serializeCloudPcPartnerAgentInstallResult);
    writer.writeStringValue("provisioningPolicyId", cloudPC.provisioningPolicyId);
    writer.writeStringValue("provisioningPolicyName", cloudPC.provisioningPolicyName);
    writer.writeEnumValue("provisioningType", cloudPC.provisioningType);
    writer.writeStringValue("servicePlanId", cloudPC.servicePlanId);
    writer.writeStringValue("servicePlanName", cloudPC.servicePlanName);
    writer.writeEnumValue("servicePlanType", cloudPC.servicePlanType);
    writer.writeEnumValue("status", cloudPC.status);
    writer.writeObjectValueFromMethod("statusDetails", cloudPC.statusDetails, serializeCloudPcStatusDetails);
    writer.writeEnumValue("userAccountType", cloudPC.userAccountType);
    writer.writeStringValue("userPrincipalName", cloudPC.userPrincipalName);
}

function serializeFollowupFlag(writer, followupFlag = {}) {
    writer.writeObjectValueFromMethod("completedDateTime", followupFlag.completedDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValueFromMethod("dueDateTime", followupFlag.dueDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue("flagStatus", followupFlag.flagStatus);
    writer.writeObjectValueFromMethod("startDateTime", followupFlag.startDateTime, serializeDateTimeTimeZone);
}

function serializeProfilePhoto(writer, profilePhoto = {}) {
    serializeEntity(writer, profilePhoto);
    writer.writeNumberValue("height", profilePhoto.height);
    writer.writeNumberValue("width", profilePhoto.width);
}

function serializeTypedEmailAddress(writer, typedEmailAddress = {}) {
    serializeEmailAddress(writer, typedEmailAddress);
    writer.writeStringValue("otherLabel", typedEmailAddress.otherLabel);
    writer.writeEnumValue("type", typedEmailAddress.type);
}

function serializeWebsite(writer, website = {}) {
    writer.writeStringValue("address", website.address);
    writer.writeStringValue("displayName", website.displayName);
    writer.writeEnumValue("type", website.type);
}

function serializeContact(writer, contact = {}) {
    serializeOutlookItem(writer, contact);
    writer.writeStringValue("assistantName", contact.assistantName);
    writer.writeDateValue("birthday", contact.birthday);
    writer.writeCollectionOfPrimitiveValues("children", contact.children);
    writer.writeStringValue("companyName", contact.companyName);
    writer.writeStringValue("department", contact.department);
    writer.writeStringValue("displayName", contact.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("emailAddresses", contact.emailAddresses, serializeTypedEmailAddress);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", contact.extensions, serializeExtension);
    writer.writeStringValue("fileAs", contact.fileAs);
    writer.writeObjectValueFromMethod("flag", contact.flag, serializeFollowupFlag);
    writer.writeStringValue("gender", contact.gender);
    writer.writeStringValue("generation", contact.generation);
    writer.writeStringValue("givenName", contact.givenName);
    writer.writeCollectionOfPrimitiveValues("imAddresses", contact.imAddresses);
    writer.writeStringValue("initials", contact.initials);
    writer.writeBooleanValue("isFavorite", contact.isFavorite);
    writer.writeStringValue("jobTitle", contact.jobTitle);
    writer.writeStringValue("manager", contact.manager);
    writer.writeStringValue("middleName", contact.middleName);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", contact.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("nickName", contact.nickName);
    writer.writeStringValue("officeLocation", contact.officeLocation);
    writer.writeStringValue("parentFolderId", contact.parentFolderId);
    writer.writeStringValue("personalNotes", contact.personalNotes);
    writer.writeCollectionOfObjectValuesFromMethod("phones", contact.phones, serializePhone);
    writer.writeObjectValueFromMethod("photo", contact.photo, serializeProfilePhoto);
    writer.writeCollectionOfObjectValuesFromMethod("postalAddresses", contact.postalAddresses, serializePhysicalAddress);
    writer.writeStringValue("profession", contact.profession);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", contact.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeStringValue("spouseName", contact.spouseName);
    writer.writeStringValue("surname", contact.surname);
    writer.writeStringValue("title", contact.title);
    writer.writeCollectionOfObjectValuesFromMethod("websites", contact.websites, serializeWebsite);
    writer.writeDateOnlyValue("weddingAnniversary", contact.weddingAnniversary);
    writer.writeStringValue("yomiCompanyName", contact.yomiCompanyName);
    writer.writeStringValue("yomiGivenName", contact.yomiGivenName);
    writer.writeStringValue("yomiSurname", contact.yomiSurname);
}

function serializeContactFolder(writer, contactFolder = {}) {
    serializeEntity(writer, contactFolder);
    writer.writeCollectionOfObjectValuesFromMethod("childFolders", contactFolder.childFolders, serializeContactFolder);
    writer.writeCollectionOfObjectValuesFromMethod("contacts", contactFolder.contacts, serializeContact);
    writer.writeStringValue("displayName", contactFolder.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", contactFolder.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", contactFolder.parentFolderId);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", contactFolder.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeStringValue("wellKnownName", contactFolder.wellKnownName);
}

function serializeCustomSecurityAttributeValue(writer, customSecurityAttributeValue = {}) {
}

function serializeDeviceAndAppManagementAssignmentTarget(writer, deviceAndAppManagementAssignmentTarget = {}) {
    writer.writeStringValue("deviceAndAppManagementAssignmentFilterId", deviceAndAppManagementAssignmentTarget.deviceAndAppManagementAssignmentFilterId);
    writer.writeEnumValue("deviceAndAppManagementAssignmentFilterType", deviceAndAppManagementAssignmentTarget.deviceAndAppManagementAssignmentFilterType);
}

function serializeEnrollmentConfigurationAssignment(writer, enrollmentConfigurationAssignment = {}) {
    serializeEntity(writer, enrollmentConfigurationAssignment);
    writer.writeEnumValue("source", enrollmentConfigurationAssignment.source);
    writer.writeStringValue("sourceId", enrollmentConfigurationAssignment.sourceId);
    writer.writeObjectValueFromMethod("target", enrollmentConfigurationAssignment.target, serializeDeviceAndAppManagementAssignmentTarget);
}

function serializeDeviceEnrollmentConfiguration(writer, deviceEnrollmentConfiguration = {}) {
    serializeEntity(writer, deviceEnrollmentConfiguration);
    writer.writeCollectionOfObjectValuesFromMethod("assignments", deviceEnrollmentConfiguration.assignments, serializeEnrollmentConfigurationAssignment);
    writer.writeDateValue("createdDateTime", deviceEnrollmentConfiguration.createdDateTime);
    writer.writeStringValue("description", deviceEnrollmentConfiguration.description);
    writer.writeEnumValue("deviceEnrollmentConfigurationType", deviceEnrollmentConfiguration.deviceEnrollmentConfigurationType);
    writer.writeStringValue("displayName", deviceEnrollmentConfiguration.displayName);
    writer.writeDateValue("lastModifiedDateTime", deviceEnrollmentConfiguration.lastModifiedDateTime);
    writer.writeNumberValue("priority", deviceEnrollmentConfiguration.priority);
    writer.writeCollectionOfPrimitiveValues("roleScopeTagIds", deviceEnrollmentConfiguration.roleScopeTagIds);
    writer.writeNumberValue("version", deviceEnrollmentConfiguration.version);
}

function serializeDeviceKey(writer, deviceKey = {}) {
    writer.writeStringValue("deviceId", deviceKey.deviceId);
    writer.writeStringValue("keyMaterial", deviceKey.keyMaterial);
    writer.writeStringValue("keyType", deviceKey.keyType);
}

function serializeDeviceManagementTroubleshootingErrorResource(writer, deviceManagementTroubleshootingErrorResource = {}) {
    writer.writeStringValue("link", deviceManagementTroubleshootingErrorResource.link);
    writer.writeStringValue("text", deviceManagementTroubleshootingErrorResource.text);
}

function serializeDeviceManagementTroubleshootingErrorDetails(writer, deviceManagementTroubleshootingErrorDetails = {}) {
    writer.writeStringValue("context", deviceManagementTroubleshootingErrorDetails.context);
    writer.writeStringValue("failure", deviceManagementTroubleshootingErrorDetails.failure);
    writer.writeStringValue("failureDetails", deviceManagementTroubleshootingErrorDetails.failureDetails);
    writer.writeStringValue("remediation", deviceManagementTroubleshootingErrorDetails.remediation);
    writer.writeCollectionOfObjectValuesFromMethod("resources", deviceManagementTroubleshootingErrorDetails.resources, serializeDeviceManagementTroubleshootingErrorResource);
}

function serializeDeviceManagementTroubleshootingEvent(writer, deviceManagementTroubleshootingEvent = {}) {
    serializeEntity(writer, deviceManagementTroubleshootingEvent);
    writer.writeCollectionOfObjectValuesFromMethod("additionalInformation", deviceManagementTroubleshootingEvent.additionalInformation, serializeKeyValuePair);
    writer.writeStringValue("correlationId", deviceManagementTroubleshootingEvent.correlationId);
    writer.writeDateValue("eventDateTime", deviceManagementTroubleshootingEvent.eventDateTime);
    writer.writeStringValue("eventName", deviceManagementTroubleshootingEvent.eventName);
    writer.writeObjectValueFromMethod("troubleshootingErrorDetails", deviceManagementTroubleshootingEvent.troubleshootingErrorDetails, serializeDeviceManagementTroubleshootingErrorDetails);
}

function serializeSharepointIds(writer, sharepointIds = {}) {
    writer.writeStringValue("listId", sharepointIds.listId);
    writer.writeStringValue("listItemId", sharepointIds.listItemId);
    writer.writeStringValue("listItemUniqueId", sharepointIds.listItemUniqueId);
    writer.writeStringValue("siteId", sharepointIds.siteId);
    writer.writeStringValue("siteUrl", sharepointIds.siteUrl);
    writer.writeStringValue("tenantId", sharepointIds.tenantId);
    writer.writeStringValue("webId", sharepointIds.webId);
}

function serializeItemReference(writer, itemReference = {}) {
    writer.writeStringValue("driveId", itemReference.driveId);
    writer.writeStringValue("driveType", itemReference.driveType);
    writer.writeStringValue("id", itemReference.id);
    writer.writeStringValue("name", itemReference.name);
    writer.writeStringValue("path", itemReference.path);
    writer.writeStringValue("shareId", itemReference.shareId);
    writer.writeObjectValueFromMethod("sharepointIds", itemReference.sharepointIds, serializeSharepointIds);
    writer.writeStringValue("siteId", itemReference.siteId);
}

function serializeBaseItem(writer, baseItem = {}) {
    serializeEntity(writer, baseItem);
    writer.writeObjectValueFromMethod("createdBy", baseItem.createdBy, serializeIdentitySet);
    writer.writeObjectValueFromMethod("createdByUser", baseItem.createdByUser, serializeUser);
    writer.writeDateValue("createdDateTime", baseItem.createdDateTime);
    writer.writeStringValue("description", baseItem.description);
    writer.writeStringValue("eTag", baseItem.eTag);
    writer.writeObjectValueFromMethod("lastModifiedBy", baseItem.lastModifiedBy, serializeIdentitySet);
    writer.writeObjectValueFromMethod("lastModifiedByUser", baseItem.lastModifiedByUser, serializeUser);
    writer.writeDateValue("lastModifiedDateTime", baseItem.lastModifiedDateTime);
    writer.writeStringValue("name", baseItem.name);
    writer.writeObjectValueFromMethod("parentReference", baseItem.parentReference, serializeItemReference);
    writer.writeStringValue("webUrl", baseItem.webUrl);
}

function serializeAudio(writer, audio = {}) {
    writer.writeStringValue("album", audio.album);
    writer.writeStringValue("albumArtist", audio.albumArtist);
    writer.writeStringValue("artist", audio.artist);
    writer.writeNumberValue("bitrate", audio.bitrate);
    writer.writeStringValue("composers", audio.composers);
    writer.writeStringValue("copyright", audio.copyright);
    writer.writeNumberValue("disc", audio.disc);
    writer.writeNumberValue("discCount", audio.discCount);
    writer.writeNumberValue("duration", audio.duration);
    writer.writeStringValue("genre", audio.genre);
    writer.writeBooleanValue("hasDrm", audio.hasDrm);
    writer.writeBooleanValue("isVariableBitrate", audio.isVariableBitrate);
    writer.writeStringValue("title", audio.title);
    writer.writeNumberValue("track", audio.track);
    writer.writeNumberValue("trackCount", audio.trackCount);
    writer.writeNumberValue("year", audio.year);
}

function serializeAlbum(writer, album = {}) {
    writer.writeStringValue("coverImageItemId", album.coverImageItemId);
}

function serializeBundle(writer, bundle = {}) {
    writer.writeObjectValueFromMethod("album", bundle.album, serializeAlbum);
    writer.writeNumberValue("childCount", bundle.childCount);
}

function serializeDeleted(writer, deleted = {}) {
    writer.writeStringValue("state", deleted.state);
}

function serializeDriveItemSource(writer, driveItemSource = {}) {
    writer.writeEnumValue("application", driveItemSource.application);
    writer.writeStringValue("externalId", driveItemSource.externalId);
}

function serializePublicationFacet(writer, publicationFacet = {}) {
    writer.writeStringValue("level", publicationFacet.level);
    writer.writeStringValue("versionId", publicationFacet.versionId);
}

function serializeBaseItemVersion(writer, baseItemVersion = {}) {
    serializeEntity(writer, baseItemVersion);
    writer.writeObjectValueFromMethod("lastModifiedBy", baseItemVersion.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", baseItemVersion.lastModifiedDateTime);
    writer.writeObjectValueFromMethod("publication", baseItemVersion.publication, serializePublicationFacet);
}

function serializeDriveItemVersion(writer, driveItemVersion = {}) {
    serializeBaseItemVersion(writer, driveItemVersion);
    writer.writeStringValue("content", driveItemVersion.content);
    writer.writeNumberValue("size", driveItemVersion.size);
}

function serializeHashes(writer, hashes = {}) {
    writer.writeStringValue("crc32Hash", hashes.crc32Hash);
    writer.writeStringValue("quickXorHash", hashes.quickXorHash);
    writer.writeStringValue("sha1Hash", hashes.sha1Hash);
    writer.writeStringValue("sha256Hash", hashes.sha256Hash);
}

function serializeFile(writer, file = {}) {
    writer.writeObjectValueFromMethod("hashes", file.hashes, serializeHashes);
    writer.writeStringValue("mimeType", file.mimeType);
    writer.writeBooleanValue("processingMetadata", file.processingMetadata);
}

function serializeFileSystemInfo(writer, fileSystemInfo = {}) {
    writer.writeDateValue("createdDateTime", fileSystemInfo.createdDateTime);
    writer.writeDateValue("lastAccessedDateTime", fileSystemInfo.lastAccessedDateTime);
    writer.writeDateValue("lastModifiedDateTime", fileSystemInfo.lastModifiedDateTime);
}

function serializeFolderView(writer, folderView = {}) {
    writer.writeStringValue("sortBy", folderView.sortBy);
    writer.writeStringValue("sortOrder", folderView.sortOrder);
    writer.writeStringValue("viewType", folderView.viewType);
}

function serializeFolder(writer, folder = {}) {
    writer.writeNumberValue("childCount", folder.childCount);
    writer.writeObjectValueFromMethod("view", folder.view, serializeFolderView);
}

function serializeGeoCoordinates(writer, geoCoordinates = {}) {
    writer.writeNumberValue("altitude", geoCoordinates.altitude);
    writer.writeNumberValue("latitude", geoCoordinates.latitude);
    writer.writeNumberValue("longitude", geoCoordinates.longitude);
}

function serializeImage(writer, image = {}) {
    writer.writeNumberValue("height", image.height);
    writer.writeNumberValue("width", image.width);
}

function serializeCommentAction(writer, commentAction = {}) {
    writer.writeBooleanValue("isReply", commentAction.isReply);
    writer.writeObjectValueFromMethod("parentAuthor", commentAction.parentAuthor, serializeIdentitySet);
    writer.writeCollectionOfObjectValuesFromMethod("participants", commentAction.participants, serializeIdentitySet);
}

function serializeCreateAction(writer, createAction = {}) {
}

function serializeDeleteAction(writer, deleteAction = {}) {
    writer.writeStringValue("name", deleteAction.name);
    writer.writeStringValue("objectType", deleteAction.objectType);
}

function serializeEditAction(writer, editAction = {}) {
}

function serializeMentionAction(writer, mentionAction = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("mentionees", mentionAction.mentionees, serializeIdentitySet);
}

function serializeMoveAction(writer, moveAction = {}) {
    writer.writeStringValue("from", moveAction.from);
    writer.writeStringValue("to", moveAction.to);
}

function serializeRenameAction(writer, renameAction = {}) {
    writer.writeStringValue("newName", renameAction.newName);
    writer.writeStringValue("oldName", renameAction.oldName);
}

function serializeRestoreAction(writer, restoreAction = {}) {
}

function serializeShareAction(writer, shareAction = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("recipients", shareAction.recipients, serializeIdentitySet);
}

function serializeVersionAction(writer, versionAction = {}) {
    writer.writeStringValue("newVersion", versionAction.newVersion);
}

function serializeItemActionSet(writer, itemActionSet = {}) {
    writer.writeObjectValueFromMethod("comment", itemActionSet.comment, serializeCommentAction);
    writer.writeObjectValueFromMethod("create", itemActionSet.create, serializeCreateAction);
    writer.writeObjectValueFromMethod("delete", itemActionSet.delete, serializeDeleteAction);
    writer.writeObjectValueFromMethod("edit", itemActionSet.edit, serializeEditAction);
    writer.writeObjectValueFromMethod("mention", itemActionSet.mention, serializeMentionAction);
    writer.writeObjectValueFromMethod("move", itemActionSet.move, serializeMoveAction);
    writer.writeObjectValueFromMethod("rename", itemActionSet.rename, serializeRenameAction);
    writer.writeObjectValueFromMethod("restore", itemActionSet.restore, serializeRestoreAction);
    writer.writeObjectValueFromMethod("share", itemActionSet.share, serializeShareAction);
    writer.writeObjectValueFromMethod("version", itemActionSet.version, serializeVersionAction);
}

function serializeItemActivityTimeSet(writer, itemActivityTimeSet = {}) {
    writer.writeDateValue("lastRecordedDateTime", itemActivityTimeSet.lastRecordedDateTime);
    writer.writeDateValue("observedDateTime", itemActivityTimeSet.observedDateTime);
    writer.writeDateValue("recordedDateTime", itemActivityTimeSet.recordedDateTime);
}

function serializeContentTypeInfo(writer, contentTypeInfo = {}) {
    writer.writeStringValue("id", contentTypeInfo.id);
    writer.writeStringValue("name", contentTypeInfo.name);
}

function serializeDocumentSetVersionItem(writer, documentSetVersionItem = {}) {
    writer.writeStringValue("itemId", documentSetVersionItem.itemId);
    writer.writeStringValue("title", documentSetVersionItem.title);
    writer.writeStringValue("versionId", documentSetVersionItem.versionId);
}

function serializeFieldValueSet(writer, fieldValueSet = {}) {
    serializeEntity(writer, fieldValueSet);
}

function serializeListItemVersion(writer, listItemVersion = {}) {
    serializeBaseItemVersion(writer, listItemVersion);
    writer.writeObjectValueFromMethod("fields", listItemVersion.fields, serializeFieldValueSet);
}

function serializeDocumentSetVersion(writer, documentSetVersion = {}) {
    serializeListItemVersion(writer, documentSetVersion);
    writer.writeStringValue("comment", documentSetVersion.comment);
    writer.writeObjectValueFromMethod("createdBy", documentSetVersion.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", documentSetVersion.createdDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("items", documentSetVersion.items, serializeDocumentSetVersionItem);
    writer.writeBooleanValue("shouldCaptureMinorVersion", documentSetVersion.shouldCaptureMinorVersion);
}

function serializeIncompleteData(writer, incompleteData = {}) {
    writer.writeDateValue("missingDataBeforeDateTime", incompleteData.missingDataBeforeDateTime);
    writer.writeBooleanValue("wasThrottled", incompleteData.wasThrottled);
}

function serializeItemActionStat(writer, itemActionStat = {}) {
    writer.writeNumberValue("actionCount", itemActionStat.actionCount);
    writer.writeNumberValue("actorCount", itemActionStat.actorCount);
}

function serializeAccessAction(writer, accessAction = {}) {
}

function serializeItemActivity(writer, itemActivity = {}) {
    serializeEntity(writer, itemActivity);
    writer.writeObjectValueFromMethod("access", itemActivity.access, serializeAccessAction);
    writer.writeDateValue("activityDateTime", itemActivity.activityDateTime);
    writer.writeObjectValueFromMethod("actor", itemActivity.actor, serializeIdentitySet);
    writer.writeObjectValueFromMethod("driveItem", itemActivity.driveItem, serializeDriveItem);
}

function serializeItemActivityStat(writer, itemActivityStat = {}) {
    serializeEntity(writer, itemActivityStat);
    writer.writeObjectValueFromMethod("access", itemActivityStat.access, serializeItemActionStat);
    writer.writeCollectionOfObjectValuesFromMethod("activities", itemActivityStat.activities, serializeItemActivity);
    writer.writeObjectValueFromMethod("create", itemActivityStat.create, serializeItemActionStat);
    writer.writeObjectValueFromMethod("delete", itemActivityStat.delete, serializeItemActionStat);
    writer.writeObjectValueFromMethod("edit", itemActivityStat.edit, serializeItemActionStat);
    writer.writeDateValue("endDateTime", itemActivityStat.endDateTime);
    writer.writeObjectValueFromMethod("incompleteData", itemActivityStat.incompleteData, serializeIncompleteData);
    writer.writeBooleanValue("isTrending", itemActivityStat.isTrending);
    writer.writeObjectValueFromMethod("move", itemActivityStat.move, serializeItemActionStat);
    writer.writeDateValue("startDateTime", itemActivityStat.startDateTime);
}

function serializeItemAnalytics(writer, itemAnalytics = {}) {
    serializeEntity(writer, itemAnalytics);
    writer.writeObjectValueFromMethod("allTime", itemAnalytics.allTime, serializeItemActivityStat);
    writer.writeCollectionOfObjectValuesFromMethod("itemActivityStats", itemAnalytics.itemActivityStats, serializeItemActivityStat);
    writer.writeObjectValueFromMethod("lastSevenDays", itemAnalytics.lastSevenDays, serializeItemActivityStat);
}

function serializeListItem(writer, listItem = {}) {
    serializeBaseItem(writer, listItem);
    writer.writeCollectionOfObjectValuesFromMethod("activities", listItem.activities, serializeItemActivityOLD);
    writer.writeObjectValueFromMethod("analytics", listItem.analytics, serializeItemAnalytics);
    writer.writeObjectValueFromMethod("contentType", listItem.contentType, serializeContentTypeInfo);
    writer.writeObjectValueFromMethod("deleted", listItem.deleted, serializeDeleted);
    writer.writeCollectionOfObjectValuesFromMethod("documentSetVersions", listItem.documentSetVersions, serializeDocumentSetVersion);
    writer.writeObjectValueFromMethod("driveItem", listItem.driveItem, serializeDriveItem);
    writer.writeObjectValueFromMethod("fields", listItem.fields, serializeFieldValueSet);
    writer.writeObjectValueFromMethod("sharepointIds", listItem.sharepointIds, serializeSharepointIds);
    writer.writeCollectionOfObjectValuesFromMethod("versions", listItem.versions, serializeListItemVersion);
}

function serializeItemActivityOLD(writer, itemActivityOLD = {}) {
    serializeEntity(writer, itemActivityOLD);
    writer.writeObjectValueFromMethod("action", itemActivityOLD.action, serializeItemActionSet);
    writer.writeObjectValueFromMethod("actor", itemActivityOLD.actor, serializeIdentitySet);
    writer.writeObjectValueFromMethod("driveItem", itemActivityOLD.driveItem, serializeDriveItem);
    writer.writeObjectValueFromMethod("listItem", itemActivityOLD.listItem, serializeListItem);
    writer.writeObjectValueFromMethod("times", itemActivityOLD.times, serializeItemActivityTimeSet);
}

function serializeMalware(writer, malware = {}) {
    writer.writeStringValue("description", malware.description);
}

function serializeMediaSource(writer, mediaSource = {}) {
    writer.writeEnumValue("contentCategory", mediaSource.contentCategory);
}

function serializeMedia(writer, media = {}) {
    writer.writeBooleanValue("isTranscriptionShown", media.isTranscriptionShown);
    writer.writeObjectValueFromMethod("mediaSource", media.mediaSource, serializeMediaSource);
}

function serializePackage(writer, x = {}) {
    writer.writeStringValue("type", x.type);
}

function serializePendingContentUpdate(writer, pendingContentUpdate = {}) {
    writer.writeDateValue("queuedDateTime", pendingContentUpdate.queuedDateTime);
}

function serializePendingOperations(writer, pendingOperations = {}) {
    writer.writeObjectValueFromMethod("pendingContentUpdate", pendingOperations.pendingContentUpdate, serializePendingContentUpdate);
}

function serializeSharePointIdentity(writer, sharePointIdentity = {}) {
    serializeIdentity(writer, sharePointIdentity);
    writer.writeStringValue("loginName", sharePointIdentity.loginName);
}

function serializeSharePointIdentitySet(writer, sharePointIdentitySet = {}) {
    serializeIdentitySet(writer, sharePointIdentitySet);
    writer.writeObjectValueFromMethod("group", sharePointIdentitySet.group, serializeIdentity);
    writer.writeObjectValueFromMethod("siteGroup", sharePointIdentitySet.siteGroup, serializeSharePointIdentity);
    writer.writeObjectValueFromMethod("siteUser", sharePointIdentitySet.siteUser, serializeSharePointIdentity);
}

function serializeSharingInvitation(writer, sharingInvitation = {}) {
    writer.writeStringValue("email", sharingInvitation.email);
    writer.writeObjectValueFromMethod("invitedBy", sharingInvitation.invitedBy, serializeIdentitySet);
    writer.writeStringValue("redeemedBy", sharingInvitation.redeemedBy);
    writer.writeBooleanValue("signInRequired", sharingInvitation.signInRequired);
}

function serializeSharingLink(writer, sharingLink = {}) {
    writer.writeObjectValueFromMethod("application", sharingLink.application, serializeIdentity);
    writer.writeStringValue("configuratorUrl", sharingLink.configuratorUrl);
    writer.writeBooleanValue("preventsDownload", sharingLink.preventsDownload);
    writer.writeStringValue("scope", sharingLink.scope);
    writer.writeStringValue("type", sharingLink.type);
    writer.writeStringValue("webHtml", sharingLink.webHtml);
    writer.writeStringValue("webUrl", sharingLink.webUrl);
}

function serializePermission(writer, permission = {}) {
    serializeEntity(writer, permission);
    writer.writeDateValue("expirationDateTime", permission.expirationDateTime);
    writer.writeObjectValueFromMethod("grantedTo", permission.grantedTo, serializeIdentitySet);
    writer.writeCollectionOfObjectValuesFromMethod("grantedToIdentities", permission.grantedToIdentities, serializeIdentitySet);
    writer.writeCollectionOfObjectValuesFromMethod("grantedToIdentitiesV2", permission.grantedToIdentitiesV2, serializeSharePointIdentitySet);
    writer.writeObjectValueFromMethod("grantedToV2", permission.grantedToV2, serializeSharePointIdentitySet);
    writer.writeBooleanValue("hasPassword", permission.hasPassword);
    writer.writeObjectValueFromMethod("inheritedFrom", permission.inheritedFrom, serializeItemReference);
    writer.writeObjectValueFromMethod("invitation", permission.invitation, serializeSharingInvitation);
    writer.writeObjectValueFromMethod("link", permission.link, serializeSharingLink);
    writer.writeCollectionOfPrimitiveValues("roles", permission.roles);
    writer.writeStringValue("shareId", permission.shareId);
}

function serializePhoto(writer, photo = {}) {
    writer.writeStringValue("cameraMake", photo.cameraMake);
    writer.writeStringValue("cameraModel", photo.cameraModel);
    writer.writeNumberValue("exposureDenominator", photo.exposureDenominator);
    writer.writeNumberValue("exposureNumerator", photo.exposureNumerator);
    writer.writeNumberValue("fNumber", photo.fNumber);
    writer.writeNumberValue("focalLength", photo.focalLength);
    writer.writeNumberValue("iso", photo.iso);
    writer.writeNumberValue("orientation", photo.orientation);
    writer.writeDateValue("takenDateTime", photo.takenDateTime);
}

function serializeShared(writer, shared = {}) {
    writer.writeObjectValueFromMethod("owner", shared.owner, serializeIdentitySet);
    writer.writeStringValue("scope", shared.scope);
    writer.writeObjectValueFromMethod("sharedBy", shared.sharedBy, serializeIdentitySet);
    writer.writeDateValue("sharedDateTime", shared.sharedDateTime);
}

function serializeSpecialFolder(writer, specialFolder = {}) {
    writer.writeStringValue("name", specialFolder.name);
}

function serializeVideo(writer, video = {}) {
    writer.writeNumberValue("audioBitsPerSample", video.audioBitsPerSample);
    writer.writeNumberValue("audioChannels", video.audioChannels);
    writer.writeStringValue("audioFormat", video.audioFormat);
    writer.writeNumberValue("audioSamplesPerSecond", video.audioSamplesPerSecond);
    writer.writeNumberValue("bitrate", video.bitrate);
    writer.writeNumberValue("duration", video.duration);
    writer.writeStringValue("fourCC", video.fourCC);
    writer.writeNumberValue("frameRate", video.frameRate);
    writer.writeNumberValue("height", video.height);
    writer.writeNumberValue("width", video.width);
}

function serializeRemoteItem(writer, remoteItem = {}) {
    writer.writeObjectValueFromMethod("createdBy", remoteItem.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", remoteItem.createdDateTime);
    writer.writeObjectValueFromMethod("file", remoteItem.file, serializeFile);
    writer.writeObjectValueFromMethod("fileSystemInfo", remoteItem.fileSystemInfo, serializeFileSystemInfo);
    writer.writeObjectValueFromMethod("folder", remoteItem.folder, serializeFolder);
    writer.writeStringValue("id", remoteItem.id);
    writer.writeObjectValueFromMethod("image", remoteItem.image, serializeImage);
    writer.writeObjectValueFromMethod("lastModifiedBy", remoteItem.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", remoteItem.lastModifiedDateTime);
    writer.writeStringValue("name", remoteItem.name);
    writer.writeObjectValueFromMethod("package", remoteItem.package, serializePackage);
    writer.writeObjectValueFromMethod("parentReference", remoteItem.parentReference, serializeItemReference);
    writer.writeObjectValueFromMethod("shared", remoteItem.shared, serializeShared);
    writer.writeObjectValueFromMethod("sharepointIds", remoteItem.sharepointIds, serializeSharepointIds);
    writer.writeNumberValue("size", remoteItem.size);
    writer.writeObjectValueFromMethod("specialFolder", remoteItem.specialFolder, serializeSpecialFolder);
    writer.writeObjectValueFromMethod("video", remoteItem.video, serializeVideo);
    writer.writeStringValue("webDavUrl", remoteItem.webDavUrl);
    writer.writeStringValue("webUrl", remoteItem.webUrl);
}

function serializeRoot(writer, root = {}) {
}

function serializeSearchResult(writer, searchResult = {}) {
    writer.writeStringValue("onClickTelemetryUrl", searchResult.onClickTelemetryUrl);
}

function serializeSubscription(writer, subscription = {}) {
    serializeEntity(writer, subscription);
    writer.writeStringValue("applicationId", subscription.applicationId);
    writer.writeStringValue("changeType", subscription.changeType);
    writer.writeStringValue("clientState", subscription.clientState);
    writer.writeStringValue("creatorId", subscription.creatorId);
    writer.writeStringValue("encryptionCertificate", subscription.encryptionCertificate);
    writer.writeStringValue("encryptionCertificateId", subscription.encryptionCertificateId);
    writer.writeDateValue("expirationDateTime", subscription.expirationDateTime);
    writer.writeBooleanValue("includeResourceData", subscription.includeResourceData);
    writer.writeStringValue("latestSupportedTlsVersion", subscription.latestSupportedTlsVersion);
    writer.writeStringValue("lifecycleNotificationUrl", subscription.lifecycleNotificationUrl);
    writer.writeStringValue("notificationContentType", subscription.notificationContentType);
    writer.writeStringValue("notificationQueryOptions", subscription.notificationQueryOptions);
    writer.writeStringValue("notificationUrl", subscription.notificationUrl);
    writer.writeStringValue("notificationUrlAppId", subscription.notificationUrlAppId);
    writer.writeStringValue("resource", subscription.resource);
}

function serializeThumbnail(writer, thumbnail = {}) {
    writer.writeStringValue("content", thumbnail.content);
    writer.writeNumberValue("height", thumbnail.height);
    writer.writeStringValue("sourceItemId", thumbnail.sourceItemId);
    writer.writeStringValue("url", thumbnail.url);
    writer.writeNumberValue("width", thumbnail.width);
}

function serializeThumbnailSet(writer, thumbnailSet = {}) {
    serializeEntity(writer, thumbnailSet);
    writer.writeObjectValueFromMethod("large", thumbnailSet.large, serializeThumbnail);
    writer.writeObjectValueFromMethod("medium", thumbnailSet.medium, serializeThumbnail);
    writer.writeObjectValueFromMethod("small", thumbnailSet.small, serializeThumbnail);
    writer.writeObjectValueFromMethod("source", thumbnailSet.source, serializeThumbnail);
}

function serializeWorkbookApplication(writer, workbookApplication = {}) {
    serializeEntity(writer, workbookApplication);
    writer.writeStringValue("calculationMode", workbookApplication.calculationMode);
}

function serializeWorkbookCommentReply(writer, workbookCommentReply = {}) {
    serializeEntity(writer, workbookCommentReply);
    writer.writeStringValue("content", workbookCommentReply.content);
    writer.writeStringValue("contentType", workbookCommentReply.contentType);
}

function serializeWorkbookComment(writer, workbookComment = {}) {
    serializeEntity(writer, workbookComment);
    writer.writeStringValue("content", workbookComment.content);
    writer.writeStringValue("contentType", workbookComment.contentType);
    writer.writeCollectionOfObjectValuesFromMethod("replies", workbookComment.replies, serializeWorkbookCommentReply);
}

function serializeWorkbookFunctions(writer, workbookFunctions = {}) {
    serializeEntity(writer, workbookFunctions);
}

function serializeJson(writer, json = {}) {
}

function serializeWorkbookChartFill(writer, workbookChartFill = {}) {
    serializeEntity(writer, workbookChartFill);
}

function serializeWorkbookChartFont(writer, workbookChartFont = {}) {
    serializeEntity(writer, workbookChartFont);
    writer.writeBooleanValue("bold", workbookChartFont.bold);
    writer.writeStringValue("color", workbookChartFont.color);
    writer.writeBooleanValue("italic", workbookChartFont.italic);
    writer.writeStringValue("name", workbookChartFont.name);
    writer.writeNumberValue("size", workbookChartFont.size);
    writer.writeStringValue("underline", workbookChartFont.underline);
}

function serializeWorkbookChartAreaFormat(writer, workbookChartAreaFormat = {}) {
    serializeEntity(writer, workbookChartAreaFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartAreaFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValueFromMethod("font", workbookChartAreaFormat.font, serializeWorkbookChartFont);
}

function serializeWorkbookChartLineFormat(writer, workbookChartLineFormat = {}) {
    serializeEntity(writer, workbookChartLineFormat);
    writer.writeStringValue("color", workbookChartLineFormat.color);
}

function serializeWorkbookChartAxisFormat(writer, workbookChartAxisFormat = {}) {
    serializeEntity(writer, workbookChartAxisFormat);
    writer.writeObjectValueFromMethod("font", workbookChartAxisFormat.font, serializeWorkbookChartFont);
    writer.writeObjectValueFromMethod("line", workbookChartAxisFormat.line, serializeWorkbookChartLineFormat);
}

function serializeWorkbookChartAxisTitleFormat(writer, workbookChartAxisTitleFormat = {}) {
    serializeEntity(writer, workbookChartAxisTitleFormat);
    writer.writeObjectValueFromMethod("font", workbookChartAxisTitleFormat.font, serializeWorkbookChartFont);
}

function serializeWorkbookChartAxisTitle(writer, workbookChartAxisTitle = {}) {
    serializeEntity(writer, workbookChartAxisTitle);
    writer.writeObjectValueFromMethod("format", workbookChartAxisTitle.format, serializeWorkbookChartAxisTitleFormat);
    writer.writeStringValue("text", workbookChartAxisTitle.text);
    writer.writeBooleanValue("visible", workbookChartAxisTitle.visible);
}

function serializeWorkbookChartGridlinesFormat(writer, workbookChartGridlinesFormat = {}) {
    serializeEntity(writer, workbookChartGridlinesFormat);
    writer.writeObjectValueFromMethod("line", workbookChartGridlinesFormat.line, serializeWorkbookChartLineFormat);
}

function serializeWorkbookChartGridlines(writer, workbookChartGridlines = {}) {
    serializeEntity(writer, workbookChartGridlines);
    writer.writeObjectValueFromMethod("format", workbookChartGridlines.format, serializeWorkbookChartGridlinesFormat);
    writer.writeBooleanValue("visible", workbookChartGridlines.visible);
}

function serializeWorkbookChartAxis(writer, workbookChartAxis = {}) {
    serializeEntity(writer, workbookChartAxis);
    writer.writeObjectValueFromMethod("format", workbookChartAxis.format, serializeWorkbookChartAxisFormat);
    writer.writeObjectValueFromMethod("majorGridlines", workbookChartAxis.majorGridlines, serializeWorkbookChartGridlines);
    writer.writeObjectValueFromMethod("majorUnit", workbookChartAxis.majorUnit, serializeJson);
    writer.writeObjectValueFromMethod("maximum", workbookChartAxis.maximum, serializeJson);
    writer.writeObjectValueFromMethod("minimum", workbookChartAxis.minimum, serializeJson);
    writer.writeObjectValueFromMethod("minorGridlines", workbookChartAxis.minorGridlines, serializeWorkbookChartGridlines);
    writer.writeObjectValueFromMethod("minorUnit", workbookChartAxis.minorUnit, serializeJson);
    writer.writeObjectValueFromMethod("title", workbookChartAxis.title, serializeWorkbookChartAxisTitle);
}

function serializeWorkbookChartAxes(writer, workbookChartAxes = {}) {
    serializeEntity(writer, workbookChartAxes);
    writer.writeObjectValueFromMethod("categoryAxis", workbookChartAxes.categoryAxis, serializeWorkbookChartAxis);
    writer.writeObjectValueFromMethod("seriesAxis", workbookChartAxes.seriesAxis, serializeWorkbookChartAxis);
    writer.writeObjectValueFromMethod("valueAxis", workbookChartAxes.valueAxis, serializeWorkbookChartAxis);
}

function serializeWorkbookChartDataLabelFormat(writer, workbookChartDataLabelFormat = {}) {
    serializeEntity(writer, workbookChartDataLabelFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartDataLabelFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValueFromMethod("font", workbookChartDataLabelFormat.font, serializeWorkbookChartFont);
}

function serializeWorkbookChartDataLabels(writer, workbookChartDataLabels = {}) {
    serializeEntity(writer, workbookChartDataLabels);
    writer.writeObjectValueFromMethod("format", workbookChartDataLabels.format, serializeWorkbookChartDataLabelFormat);
    writer.writeStringValue("position", workbookChartDataLabels.position);
    writer.writeStringValue("separator", workbookChartDataLabels.separator);
    writer.writeBooleanValue("showBubbleSize", workbookChartDataLabels.showBubbleSize);
    writer.writeBooleanValue("showCategoryName", workbookChartDataLabels.showCategoryName);
    writer.writeBooleanValue("showLegendKey", workbookChartDataLabels.showLegendKey);
    writer.writeBooleanValue("showPercentage", workbookChartDataLabels.showPercentage);
    writer.writeBooleanValue("showSeriesName", workbookChartDataLabels.showSeriesName);
    writer.writeBooleanValue("showValue", workbookChartDataLabels.showValue);
}

function serializeWorkbookChartLegendFormat(writer, workbookChartLegendFormat = {}) {
    serializeEntity(writer, workbookChartLegendFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartLegendFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValueFromMethod("font", workbookChartLegendFormat.font, serializeWorkbookChartFont);
}

function serializeWorkbookChartLegend(writer, workbookChartLegend = {}) {
    serializeEntity(writer, workbookChartLegend);
    writer.writeObjectValueFromMethod("format", workbookChartLegend.format, serializeWorkbookChartLegendFormat);
    writer.writeBooleanValue("overlay", workbookChartLegend.overlay);
    writer.writeStringValue("position", workbookChartLegend.position);
    writer.writeBooleanValue("visible", workbookChartLegend.visible);
}

function serializeWorkbookChartPointFormat(writer, workbookChartPointFormat = {}) {
    serializeEntity(writer, workbookChartPointFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartPointFormat.fill, serializeWorkbookChartFill);
}

function serializeWorkbookChartPoint(writer, workbookChartPoint = {}) {
    serializeEntity(writer, workbookChartPoint);
    writer.writeObjectValueFromMethod("format", workbookChartPoint.format, serializeWorkbookChartPointFormat);
    writer.writeObjectValueFromMethod("value", workbookChartPoint.value, serializeJson);
}

function serializeWorkbookChartSeriesFormat(writer, workbookChartSeriesFormat = {}) {
    serializeEntity(writer, workbookChartSeriesFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartSeriesFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValueFromMethod("line", workbookChartSeriesFormat.line, serializeWorkbookChartLineFormat);
}

function serializeWorkbookChartSeries(writer, workbookChartSeries = {}) {
    serializeEntity(writer, workbookChartSeries);
    writer.writeObjectValueFromMethod("format", workbookChartSeries.format, serializeWorkbookChartSeriesFormat);
    writer.writeStringValue("name", workbookChartSeries.name);
    writer.writeCollectionOfObjectValuesFromMethod("points", workbookChartSeries.points, serializeWorkbookChartPoint);
}

function serializeWorkbookChartTitleFormat(writer, workbookChartTitleFormat = {}) {
    serializeEntity(writer, workbookChartTitleFormat);
    writer.writeObjectValueFromMethod("fill", workbookChartTitleFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValueFromMethod("font", workbookChartTitleFormat.font, serializeWorkbookChartFont);
}

function serializeWorkbookChartTitle(writer, workbookChartTitle = {}) {
    serializeEntity(writer, workbookChartTitle);
    writer.writeObjectValueFromMethod("format", workbookChartTitle.format, serializeWorkbookChartTitleFormat);
    writer.writeBooleanValue("overlay", workbookChartTitle.overlay);
    writer.writeStringValue("text", workbookChartTitle.text);
    writer.writeBooleanValue("visible", workbookChartTitle.visible);
}

function serializeWorkbookChart(writer, workbookChart = {}) {
    serializeEntity(writer, workbookChart);
    writer.writeObjectValueFromMethod("axes", workbookChart.axes, serializeWorkbookChartAxes);
    writer.writeObjectValueFromMethod("dataLabels", workbookChart.dataLabels, serializeWorkbookChartDataLabels);
    writer.writeObjectValueFromMethod("format", workbookChart.format, serializeWorkbookChartAreaFormat);
    writer.writeNumberValue("height", workbookChart.height);
    writer.writeNumberValue("left", workbookChart.left);
    writer.writeObjectValueFromMethod("legend", workbookChart.legend, serializeWorkbookChartLegend);
    writer.writeStringValue("name", workbookChart.name);
    writer.writeCollectionOfObjectValuesFromMethod("series", workbookChart.series, serializeWorkbookChartSeries);
    writer.writeObjectValueFromMethod("title", workbookChart.title, serializeWorkbookChartTitle);
    writer.writeNumberValue("top", workbookChart.top);
    writer.writeNumberValue("width", workbookChart.width);
    writer.writeObjectValueFromMethod("worksheet", workbookChart.worksheet, serializeWorkbookWorksheet);
}

function serializeWorkbookPivotTable(writer, workbookPivotTable = {}) {
    serializeEntity(writer, workbookPivotTable);
    writer.writeStringValue("name", workbookPivotTable.name);
    writer.writeObjectValueFromMethod("worksheet", workbookPivotTable.worksheet, serializeWorkbookWorksheet);
}

function serializeWorkbookIcon(writer, workbookIcon = {}) {
    writer.writeNumberValue("index", workbookIcon.index);
    writer.writeStringValue("set", workbookIcon.set);
}

function serializeWorkbookFilterCriteria(writer, workbookFilterCriteria = {}) {
    writer.writeStringValue("color", workbookFilterCriteria.color);
    writer.writeStringValue("criterion1", workbookFilterCriteria.criterion1);
    writer.writeStringValue("criterion2", workbookFilterCriteria.criterion2);
    writer.writeStringValue("dynamicCriteria", workbookFilterCriteria.dynamicCriteria);
    writer.writeStringValue("filterOn", workbookFilterCriteria.filterOn);
    writer.writeObjectValueFromMethod("icon", workbookFilterCriteria.icon, serializeWorkbookIcon);
    writer.writeStringValue("operator", workbookFilterCriteria.operator);
    writer.writeObjectValueFromMethod("values", workbookFilterCriteria.values, serializeJson);
}

function serializeWorkbookFilter(writer, workbookFilter = {}) {
    serializeEntity(writer, workbookFilter);
    writer.writeObjectValueFromMethod("criteria", workbookFilter.criteria, serializeWorkbookFilterCriteria);
}

function serializeWorkbookTableColumn(writer, workbookTableColumn = {}) {
    serializeEntity(writer, workbookTableColumn);
    writer.writeObjectValueFromMethod("filter", workbookTableColumn.filter, serializeWorkbookFilter);
    writer.writeNumberValue("index", workbookTableColumn.index);
    writer.writeStringValue("name", workbookTableColumn.name);
    writer.writeObjectValueFromMethod("values", workbookTableColumn.values, serializeJson);
}

function serializeWorkbookTableRow(writer, workbookTableRow = {}) {
    serializeEntity(writer, workbookTableRow);
    writer.writeNumberValue("index", workbookTableRow.index);
    writer.writeObjectValueFromMethod("values", workbookTableRow.values, serializeJson);
}

function serializeWorkbookSortField(writer, workbookSortField = {}) {
    writer.writeBooleanValue("ascending", workbookSortField.ascending);
    writer.writeStringValue("color", workbookSortField.color);
    writer.writeStringValue("dataOption", workbookSortField.dataOption);
    writer.writeObjectValueFromMethod("icon", workbookSortField.icon, serializeWorkbookIcon);
    writer.writeNumberValue("key", workbookSortField.key);
    writer.writeStringValue("sortOn", workbookSortField.sortOn);
}

function serializeWorkbookTableSort(writer, workbookTableSort = {}) {
    serializeEntity(writer, workbookTableSort);
    writer.writeCollectionOfObjectValuesFromMethod("fields", workbookTableSort.fields, serializeWorkbookSortField);
    writer.writeBooleanValue("matchCase", workbookTableSort.matchCase);
    writer.writeStringValue("method", workbookTableSort.method);
}

function serializeWorkbookTable(writer, workbookTable = {}) {
    serializeEntity(writer, workbookTable);
    writer.writeCollectionOfObjectValuesFromMethod("columns", workbookTable.columns, serializeWorkbookTableColumn);
    writer.writeBooleanValue("highlightFirstColumn", workbookTable.highlightFirstColumn);
    writer.writeBooleanValue("highlightLastColumn", workbookTable.highlightLastColumn);
    writer.writeStringValue("legacyId", workbookTable.legacyId);
    writer.writeStringValue("name", workbookTable.name);
    writer.writeCollectionOfObjectValuesFromMethod("rows", workbookTable.rows, serializeWorkbookTableRow);
    writer.writeBooleanValue("showBandedColumns", workbookTable.showBandedColumns);
    writer.writeBooleanValue("showBandedRows", workbookTable.showBandedRows);
    writer.writeBooleanValue("showFilterButton", workbookTable.showFilterButton);
    writer.writeBooleanValue("showHeaders", workbookTable.showHeaders);
    writer.writeBooleanValue("showTotals", workbookTable.showTotals);
    writer.writeObjectValueFromMethod("sort", workbookTable.sort, serializeWorkbookTableSort);
    writer.writeStringValue("style", workbookTable.style);
    writer.writeObjectValueFromMethod("worksheet", workbookTable.worksheet, serializeWorkbookWorksheet);
}

function serializeWorkbookWorksheetProtectionOptions(writer, workbookWorksheetProtectionOptions = {}) {
    writer.writeBooleanValue("allowAutoFilter", workbookWorksheetProtectionOptions.allowAutoFilter);
    writer.writeBooleanValue("allowDeleteColumns", workbookWorksheetProtectionOptions.allowDeleteColumns);
    writer.writeBooleanValue("allowDeleteRows", workbookWorksheetProtectionOptions.allowDeleteRows);
    writer.writeBooleanValue("allowFormatCells", workbookWorksheetProtectionOptions.allowFormatCells);
    writer.writeBooleanValue("allowFormatColumns", workbookWorksheetProtectionOptions.allowFormatColumns);
    writer.writeBooleanValue("allowFormatRows", workbookWorksheetProtectionOptions.allowFormatRows);
    writer.writeBooleanValue("allowInsertColumns", workbookWorksheetProtectionOptions.allowInsertColumns);
    writer.writeBooleanValue("allowInsertHyperlinks", workbookWorksheetProtectionOptions.allowInsertHyperlinks);
    writer.writeBooleanValue("allowInsertRows", workbookWorksheetProtectionOptions.allowInsertRows);
    writer.writeBooleanValue("allowPivotTables", workbookWorksheetProtectionOptions.allowPivotTables);
    writer.writeBooleanValue("allowSort", workbookWorksheetProtectionOptions.allowSort);
}

function serializeWorkbookWorksheetProtection(writer, workbookWorksheetProtection = {}) {
    serializeEntity(writer, workbookWorksheetProtection);
    writer.writeObjectValueFromMethod("options", workbookWorksheetProtection.options, serializeWorkbookWorksheetProtectionOptions);
    writer.writeBooleanValue("protected", workbookWorksheetProtection.protected);
}

function serializeWorkbookWorksheet(writer, workbookWorksheet = {}) {
    serializeEntity(writer, workbookWorksheet);
    writer.writeCollectionOfObjectValuesFromMethod("charts", workbookWorksheet.charts, serializeWorkbookChart);
    writer.writeStringValue("name", workbookWorksheet.name);
    writer.writeCollectionOfObjectValuesFromMethod("names", workbookWorksheet.names, serializeWorkbookNamedItem);
    writer.writeCollectionOfObjectValuesFromMethod("pivotTables", workbookWorksheet.pivotTables, serializeWorkbookPivotTable);
    writer.writeNumberValue("position", workbookWorksheet.position);
    writer.writeObjectValueFromMethod("protection", workbookWorksheet.protection, serializeWorkbookWorksheetProtection);
    writer.writeCollectionOfObjectValuesFromMethod("tables", workbookWorksheet.tables, serializeWorkbookTable);
    writer.writeStringValue("visibility", workbookWorksheet.visibility);
}

function serializeWorkbookNamedItem(writer, workbookNamedItem = {}) {
    serializeEntity(writer, workbookNamedItem);
    writer.writeStringValue("comment", workbookNamedItem.comment);
    writer.writeStringValue("name", workbookNamedItem.name);
    writer.writeStringValue("scope", workbookNamedItem.scope);
    writer.writeStringValue("type", workbookNamedItem.type);
    writer.writeObjectValueFromMethod("value", workbookNamedItem.value, serializeJson);
    writer.writeBooleanValue("visible", workbookNamedItem.visible);
    writer.writeObjectValueFromMethod("worksheet", workbookNamedItem.worksheet, serializeWorkbookWorksheet);
}

function serializeWorkbookOperationError(writer, workbookOperationError = {}) {
    writer.writeStringValue("code", workbookOperationError.code);
    writer.writeObjectValueFromMethod("innerError", workbookOperationError.innerError, serializeWorkbookOperationError);
    writer.writeStringValue("message", workbookOperationError.message);
}

function serializeWorkbookOperation(writer, workbookOperation = {}) {
    serializeEntity(writer, workbookOperation);
    writer.writeObjectValueFromMethod("error_escaped", workbookOperation.error_escaped, serializeWorkbookOperationError);
    writer.writeStringValue("resourceLocation", workbookOperation.resourceLocation);
    writer.writeEnumValue("status", workbookOperation.status);
}

function serializeWorkbook(writer, workbook = {}) {
    serializeEntity(writer, workbook);
    writer.writeObjectValueFromMethod("application", workbook.application, serializeWorkbookApplication);
    writer.writeCollectionOfObjectValuesFromMethod("comments", workbook.comments, serializeWorkbookComment);
    writer.writeObjectValueFromMethod("functions", workbook.functions, serializeWorkbookFunctions);
    writer.writeCollectionOfObjectValuesFromMethod("names", workbook.names, serializeWorkbookNamedItem);
    writer.writeCollectionOfObjectValuesFromMethod("operations", workbook.operations, serializeWorkbookOperation);
    writer.writeCollectionOfObjectValuesFromMethod("tables", workbook.tables, serializeWorkbookTable);
    writer.writeCollectionOfObjectValuesFromMethod("worksheets", workbook.worksheets, serializeWorkbookWorksheet);
}

function serializeDriveItem(writer, driveItem = {}) {
    serializeBaseItem(writer, driveItem);
    writer.writeCollectionOfObjectValuesFromMethod("activities", driveItem.activities, serializeItemActivityOLD);
    writer.writeObjectValueFromMethod("analytics", driveItem.analytics, serializeItemAnalytics);
    writer.writeObjectValueFromMethod("audio", driveItem.audio, serializeAudio);
    writer.writeObjectValueFromMethod("bundle", driveItem.bundle, serializeBundle);
    writer.writeCollectionOfObjectValuesFromMethod("children", driveItem.children, serializeDriveItem);
    writer.writeStringValue("content", driveItem.content);
    writer.writeStringValue("cTag", driveItem.cTag);
    writer.writeObjectValueFromMethod("deleted", driveItem.deleted, serializeDeleted);
    writer.writeObjectValueFromMethod("file", driveItem.file, serializeFile);
    writer.writeObjectValueFromMethod("fileSystemInfo", driveItem.fileSystemInfo, serializeFileSystemInfo);
    writer.writeObjectValueFromMethod("folder", driveItem.folder, serializeFolder);
    writer.writeObjectValueFromMethod("image", driveItem.image, serializeImage);
    writer.writeObjectValueFromMethod("listItem", driveItem.listItem, serializeListItem);
    writer.writeObjectValueFromMethod("location", driveItem.location, serializeGeoCoordinates);
    writer.writeObjectValueFromMethod("malware", driveItem.malware, serializeMalware);
    writer.writeObjectValueFromMethod("media", driveItem.media, serializeMedia);
    writer.writeObjectValueFromMethod("package", driveItem.package, serializePackage);
    writer.writeObjectValueFromMethod("pendingOperations", driveItem.pendingOperations, serializePendingOperations);
    writer.writeCollectionOfObjectValuesFromMethod("permissions", driveItem.permissions, serializePermission);
    writer.writeObjectValueFromMethod("photo", driveItem.photo, serializePhoto);
    writer.writeObjectValueFromMethod("publication", driveItem.publication, serializePublicationFacet);
    writer.writeObjectValueFromMethod("remoteItem", driveItem.remoteItem, serializeRemoteItem);
    writer.writeObjectValueFromMethod("root", driveItem.root, serializeRoot);
    writer.writeObjectValueFromMethod("searchResult", driveItem.searchResult, serializeSearchResult);
    writer.writeObjectValueFromMethod("shared", driveItem.shared, serializeShared);
    writer.writeObjectValueFromMethod("sharepointIds", driveItem.sharepointIds, serializeSharepointIds);
    writer.writeNumberValue("size", driveItem.size);
    writer.writeObjectValueFromMethod("source", driveItem.source, serializeDriveItemSource);
    writer.writeObjectValueFromMethod("specialFolder", driveItem.specialFolder, serializeSpecialFolder);
    writer.writeCollectionOfObjectValuesFromMethod("subscriptions", driveItem.subscriptions, serializeSubscription);
    writer.writeCollectionOfObjectValuesFromMethod("thumbnails", driveItem.thumbnails, serializeThumbnailSet);
    writer.writeCollectionOfObjectValuesFromMethod("versions", driveItem.versions, serializeDriveItemVersion);
    writer.writeObjectValueFromMethod("video", driveItem.video, serializeVideo);
    writer.writeStringValue("webDavUrl", driveItem.webDavUrl);
    writer.writeObjectValueFromMethod("workbook", driveItem.workbook, serializeWorkbook);
}

function serializeBooleanColumn(writer, booleanColumn = {}) {
}

function serializeCalculatedColumn(writer, calculatedColumn = {}) {
    writer.writeStringValue("format", calculatedColumn.format);
    writer.writeStringValue("formula", calculatedColumn.formula);
    writer.writeStringValue("outputType", calculatedColumn.outputType);
}

function serializeChoiceColumn(writer, choiceColumn = {}) {
    writer.writeBooleanValue("allowTextEntry", choiceColumn.allowTextEntry);
    writer.writeCollectionOfPrimitiveValues("choices", choiceColumn.choices);
    writer.writeStringValue("displayAs", choiceColumn.displayAs);
}

function serializeDisplayNameLocalization(writer, displayNameLocalization = {}) {
    writer.writeStringValue("displayName", displayNameLocalization.displayName);
    writer.writeStringValue("languageTag", displayNameLocalization.languageTag);
}

function serializeColumnValidation(writer, columnValidation = {}) {
    writer.writeStringValue("defaultLanguage", columnValidation.defaultLanguage);
    writer.writeCollectionOfObjectValuesFromMethod("descriptions", columnValidation.descriptions, serializeDisplayNameLocalization);
    writer.writeStringValue("formula", columnValidation.formula);
}

function serializeContentApprovalStatusColumn(writer, contentApprovalStatusColumn = {}) {
}

function serializeCurrencyColumn(writer, currencyColumn = {}) {
    writer.writeStringValue("locale", currencyColumn.locale);
}

function serializeDateTimeColumn(writer, dateTimeColumn = {}) {
    writer.writeStringValue("displayAs", dateTimeColumn.displayAs);
    writer.writeStringValue("format", dateTimeColumn.format);
}

function serializeDefaultColumnValue(writer, defaultColumnValue = {}) {
    writer.writeStringValue("formula", defaultColumnValue.formula);
    writer.writeStringValue("value", defaultColumnValue.value);
}

function serializeGeolocationColumn(writer, geolocationColumn = {}) {
}

function serializeHyperlinkOrPictureColumn(writer, hyperlinkOrPictureColumn = {}) {
    writer.writeBooleanValue("isPicture", hyperlinkOrPictureColumn.isPicture);
}

function serializeLookupColumn(writer, lookupColumn = {}) {
    writer.writeBooleanValue("allowMultipleValues", lookupColumn.allowMultipleValues);
    writer.writeBooleanValue("allowUnlimitedLength", lookupColumn.allowUnlimitedLength);
    writer.writeStringValue("columnName", lookupColumn.columnName);
    writer.writeStringValue("listId", lookupColumn.listId);
    writer.writeStringValue("primaryLookupColumnId", lookupColumn.primaryLookupColumnId);
}

function serializeNumberColumn(writer, numberColumn = {}) {
    writer.writeStringValue("decimalPlaces", numberColumn.decimalPlaces);
    writer.writeStringValue("displayAs", numberColumn.displayAs);
    writer.writeNumberValue("maximum", numberColumn.maximum);
    writer.writeNumberValue("minimum", numberColumn.minimum);
}

function serializePersonOrGroupColumn(writer, personOrGroupColumn = {}) {
    writer.writeBooleanValue("allowMultipleSelection", personOrGroupColumn.allowMultipleSelection);
    writer.writeStringValue("chooseFromType", personOrGroupColumn.chooseFromType);
    writer.writeStringValue("displayAs", personOrGroupColumn.displayAs);
}

function serializeKeyValue(writer, keyValue = {}) {
    writer.writeStringValue("key", keyValue.key);
    writer.writeStringValue("value", keyValue.value);
}

function serializeGroup$1(writer, group = {}) {
    serializeEntity(writer, group);
    writer.writeDateValue("createdDateTime", group.createdDateTime);
    writer.writeStringValue("description", group.description);
    writer.writeStringValue("displayName", group.displayName);
    writer.writeStringValue("parentSiteId", group.parentSiteId);
    writer.writeEnumValue("scope", group.scope);
    writer.writeCollectionOfObjectValuesFromMethod("sets", group.sets, serializeSet);
}

function serializeLocalizedName(writer, localizedName = {}) {
    writer.writeStringValue("languageTag", localizedName.languageTag);
    writer.writeStringValue("name", localizedName.name);
}

function serializeLocalizedDescription(writer, localizedDescription = {}) {
    writer.writeStringValue("description", localizedDescription.description);
    writer.writeStringValue("languageTag", localizedDescription.languageTag);
}

function serializeLocalizedLabel(writer, localizedLabel = {}) {
    writer.writeBooleanValue("isDefault", localizedLabel.isDefault);
    writer.writeStringValue("languageTag", localizedLabel.languageTag);
    writer.writeStringValue("name", localizedLabel.name);
}

function serializeTerm(writer, term = {}) {
    serializeEntity(writer, term);
    writer.writeCollectionOfObjectValuesFromMethod("children", term.children, serializeTerm);
    writer.writeDateValue("createdDateTime", term.createdDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("descriptions", term.descriptions, serializeLocalizedDescription);
    writer.writeCollectionOfObjectValuesFromMethod("labels", term.labels, serializeLocalizedLabel);
    writer.writeDateValue("lastModifiedDateTime", term.lastModifiedDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("properties", term.properties, serializeKeyValue);
    writer.writeCollectionOfObjectValuesFromMethod("relations", term.relations, serializeRelation);
    writer.writeObjectValueFromMethod("set", term.set, serializeSet);
}

function serializeRelation(writer, relation = {}) {
    serializeEntity(writer, relation);
    writer.writeObjectValueFromMethod("fromTerm", relation.fromTerm, serializeTerm);
    writer.writeEnumValue("relationship", relation.relationship);
    writer.writeObjectValueFromMethod("set", relation.set, serializeSet);
    writer.writeObjectValueFromMethod("toTerm", relation.toTerm, serializeTerm);
}

function serializeSet(writer, set = {}) {
    serializeEntity(writer, set);
    writer.writeCollectionOfObjectValuesFromMethod("children", set.children, serializeTerm);
    writer.writeDateValue("createdDateTime", set.createdDateTime);
    writer.writeStringValue("description", set.description);
    writer.writeCollectionOfObjectValuesFromMethod("localizedNames", set.localizedNames, serializeLocalizedName);
    writer.writeObjectValueFromMethod("parentGroup", set.parentGroup, serializeGroup$1);
    writer.writeCollectionOfObjectValuesFromMethod("properties", set.properties, serializeKeyValue);
    writer.writeCollectionOfObjectValuesFromMethod("relations", set.relations, serializeRelation);
    writer.writeCollectionOfObjectValuesFromMethod("terms", set.terms, serializeTerm);
}

function serializeTermColumn(writer, termColumn = {}) {
    writer.writeBooleanValue("allowMultipleValues", termColumn.allowMultipleValues);
    writer.writeObjectValueFromMethod("parentTerm", termColumn.parentTerm, serializeTerm);
    writer.writeBooleanValue("showFullyQualifiedName", termColumn.showFullyQualifiedName);
    writer.writeObjectValueFromMethod("termSet", termColumn.termSet, serializeSet);
}

function serializeTextColumn(writer, textColumn = {}) {
    writer.writeBooleanValue("allowMultipleLines", textColumn.allowMultipleLines);
    writer.writeBooleanValue("appendChangesToExistingText", textColumn.appendChangesToExistingText);
    writer.writeNumberValue("linesForEditing", textColumn.linesForEditing);
    writer.writeNumberValue("maxLength", textColumn.maxLength);
    writer.writeStringValue("textType", textColumn.textType);
}

function serializeThumbnailColumn(writer, thumbnailColumn = {}) {
}

function serializeColumnDefinition(writer, columnDefinition = {}) {
    serializeEntity(writer, columnDefinition);
    writer.writeObjectValueFromMethod("boolean", columnDefinition.boolean, serializeBooleanColumn);
    writer.writeObjectValueFromMethod("calculated", columnDefinition.calculated, serializeCalculatedColumn);
    writer.writeObjectValueFromMethod("choice", columnDefinition.choice, serializeChoiceColumn);
    writer.writeStringValue("columnGroup", columnDefinition.columnGroup);
    writer.writeObjectValueFromMethod("contentApprovalStatus", columnDefinition.contentApprovalStatus, serializeContentApprovalStatusColumn);
    writer.writeObjectValueFromMethod("currency", columnDefinition.currency, serializeCurrencyColumn);
    writer.writeObjectValueFromMethod("dateTime", columnDefinition.dateTime, serializeDateTimeColumn);
    writer.writeObjectValueFromMethod("defaultValue", columnDefinition.defaultValue, serializeDefaultColumnValue);
    writer.writeStringValue("description", columnDefinition.description);
    writer.writeStringValue("displayName", columnDefinition.displayName);
    writer.writeBooleanValue("enforceUniqueValues", columnDefinition.enforceUniqueValues);
    writer.writeObjectValueFromMethod("geolocation", columnDefinition.geolocation, serializeGeolocationColumn);
    writer.writeBooleanValue("hidden", columnDefinition.hidden);
    writer.writeObjectValueFromMethod("hyperlinkOrPicture", columnDefinition.hyperlinkOrPicture, serializeHyperlinkOrPictureColumn);
    writer.writeBooleanValue("indexed", columnDefinition.indexed);
    writer.writeBooleanValue("isDeletable", columnDefinition.isDeletable);
    writer.writeBooleanValue("isReorderable", columnDefinition.isReorderable);
    writer.writeBooleanValue("isSealed", columnDefinition.isSealed);
    writer.writeObjectValueFromMethod("lookup", columnDefinition.lookup, serializeLookupColumn);
    writer.writeStringValue("name", columnDefinition.name);
    writer.writeObjectValueFromMethod("number", columnDefinition.number, serializeNumberColumn);
    writer.writeObjectValueFromMethod("personOrGroup", columnDefinition.personOrGroup, serializePersonOrGroupColumn);
    writer.writeBooleanValue("propagateChanges", columnDefinition.propagateChanges);
    writer.writeBooleanValue("readOnly", columnDefinition.readOnly);
    writer.writeBooleanValue("required", columnDefinition.required);
    writer.writeObjectValueFromMethod("sourceColumn", columnDefinition.sourceColumn, serializeColumnDefinition);
    writer.writeObjectValueFromMethod("sourceContentType", columnDefinition.sourceContentType, serializeContentTypeInfo);
    writer.writeObjectValueFromMethod("term", columnDefinition.term, serializeTermColumn);
    writer.writeObjectValueFromMethod("text", columnDefinition.text, serializeTextColumn);
    writer.writeObjectValueFromMethod("thumbnail", columnDefinition.thumbnail, serializeThumbnailColumn);
    writer.writeEnumValue("type", columnDefinition.type);
    writer.writeObjectValueFromMethod("validation", columnDefinition.validation, serializeColumnValidation);
}

function serializeColumnLink(writer, columnLink = {}) {
    serializeEntity(writer, columnLink);
    writer.writeStringValue("name", columnLink.name);
}

function serializeContentTypeOrder(writer, contentTypeOrder = {}) {
    writer.writeBooleanValue("default", contentTypeOrder.default_escaped);
    writer.writeNumberValue("position", contentTypeOrder.position);
}

function serializeDocumentSetContent(writer, documentSetContent = {}) {
    writer.writeObjectValueFromMethod("contentType", documentSetContent.contentType, serializeContentTypeInfo);
    writer.writeStringValue("fileName", documentSetContent.fileName);
    writer.writeStringValue("folderName", documentSetContent.folderName);
}

function serializeDocumentSet(writer, documentSet = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("allowedContentTypes", documentSet.allowedContentTypes, serializeContentTypeInfo);
    writer.writeCollectionOfObjectValuesFromMethod("defaultContents", documentSet.defaultContents, serializeDocumentSetContent);
    writer.writeBooleanValue("propagateWelcomePageChanges", documentSet.propagateWelcomePageChanges);
    writer.writeCollectionOfObjectValuesFromMethod("sharedColumns", documentSet.sharedColumns, serializeColumnDefinition);
    writer.writeBooleanValue("shouldPrefixNameToFile", documentSet.shouldPrefixNameToFile);
    writer.writeCollectionOfObjectValuesFromMethod("welcomePageColumns", documentSet.welcomePageColumns, serializeColumnDefinition);
    writer.writeStringValue("welcomePageUrl", documentSet.welcomePageUrl);
}

function serializeContentType(writer, contentType = {}) {
    serializeEntity(writer, contentType);
    writer.writeCollectionOfPrimitiveValues("associatedHubsUrls", contentType.associatedHubsUrls);
    writer.writeObjectValueFromMethod("base", contentType.base, serializeContentType);
    writer.writeCollectionOfObjectValuesFromMethod("baseTypes", contentType.baseTypes, serializeContentType);
    writer.writeCollectionOfObjectValuesFromMethod("columnLinks", contentType.columnLinks, serializeColumnLink);
    writer.writeCollectionOfObjectValuesFromMethod("columnPositions", contentType.columnPositions, serializeColumnDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("columns", contentType.columns, serializeColumnDefinition);
    writer.writeStringValue("description", contentType.description);
    writer.writeObjectValueFromMethod("documentSet", contentType.documentSet, serializeDocumentSet);
    writer.writeObjectValueFromMethod("documentTemplate", contentType.documentTemplate, serializeDocumentSetContent);
    writer.writeStringValue("group", contentType.group);
    writer.writeBooleanValue("hidden", contentType.hidden);
    writer.writeObjectValueFromMethod("inheritedFrom", contentType.inheritedFrom, serializeItemReference);
    writer.writeBooleanValue("isBuiltIn", contentType.isBuiltIn);
    writer.writeStringValue("name", contentType.name);
    writer.writeObjectValueFromMethod("order", contentType.order, serializeContentTypeOrder);
    writer.writeStringValue("parentId", contentType.parentId);
    writer.writeBooleanValue("propagateChanges", contentType.propagateChanges);
    writer.writeBooleanValue("readOnly", contentType.readOnly);
    writer.writeBooleanValue("sealed", contentType.sealed);
}

function serializeListInfo(writer, listInfo = {}) {
    writer.writeBooleanValue("contentTypesEnabled", listInfo.contentTypesEnabled);
    writer.writeBooleanValue("hidden", listInfo.hidden);
    writer.writeStringValue("template", listInfo.template);
}

function serializePublicErrorDetail(writer, publicErrorDetail = {}) {
    writer.writeStringValue("code", publicErrorDetail.code);
    writer.writeStringValue("message", publicErrorDetail.message);
    writer.writeStringValue("target", publicErrorDetail.target);
}

function serializePublicInnerError(writer, publicInnerError = {}) {
    writer.writeStringValue("code", publicInnerError.code);
    writer.writeCollectionOfObjectValuesFromMethod("details", publicInnerError.details, serializePublicErrorDetail);
    writer.writeStringValue("message", publicInnerError.message);
    writer.writeStringValue("target", publicInnerError.target);
}

function serializePublicError(writer, publicError = {}) {
    writer.writeStringValue("code", publicError.code);
    writer.writeCollectionOfObjectValuesFromMethod("details", publicError.details, serializePublicErrorDetail);
    writer.writeObjectValueFromMethod("innerError", publicError.innerError, serializePublicInnerError);
    writer.writeStringValue("message", publicError.message);
    writer.writeStringValue("target", publicError.target);
}

function serializeRichLongRunningOperation(writer, richLongRunningOperation = {}) {
    serializeLongRunningOperation(writer, richLongRunningOperation);
    writer.writeObjectValueFromMethod("error_escaped", richLongRunningOperation.error_escaped, serializePublicError);
    writer.writeNumberValue("percentageComplete", richLongRunningOperation.percentageComplete);
    writer.writeStringValue("resourceId", richLongRunningOperation.resourceId);
    writer.writeStringValue("type", richLongRunningOperation.type);
}

function serializeSystemFacet(writer, systemFacet = {}) {
}

function serializeList(writer, list = {}) {
    serializeBaseItem(writer, list);
    writer.writeCollectionOfObjectValuesFromMethod("activities", list.activities, serializeItemActivityOLD);
    writer.writeCollectionOfObjectValuesFromMethod("columns", list.columns, serializeColumnDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("contentTypes", list.contentTypes, serializeContentType);
    writer.writeStringValue("displayName", list.displayName);
    writer.writeObjectValueFromMethod("drive", list.drive, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("items", list.items, serializeListItem);
    writer.writeObjectValueFromMethod("list", list.list, serializeListInfo);
    writer.writeCollectionOfObjectValuesFromMethod("operations", list.operations, serializeRichLongRunningOperation);
    writer.writeObjectValueFromMethod("sharepointIds", list.sharepointIds, serializeSharepointIds);
    writer.writeCollectionOfObjectValuesFromMethod("subscriptions", list.subscriptions, serializeSubscription);
    writer.writeObjectValueFromMethod("system", list.system, serializeSystemFacet);
}

function serializeStoragePlanInformation(writer, storagePlanInformation = {}) {
    writer.writeBooleanValue("upgradeAvailable", storagePlanInformation.upgradeAvailable);
}

function serializeQuota(writer, quota = {}) {
    writer.writeNumberValue("deleted", quota.deleted);
    writer.writeNumberValue("remaining", quota.remaining);
    writer.writeStringValue("state", quota.state);
    writer.writeObjectValueFromMethod("storagePlanInformation", quota.storagePlanInformation, serializeStoragePlanInformation);
    writer.writeNumberValue("total", quota.total);
    writer.writeNumberValue("used", quota.used);
}

function serializeDrive(writer, drive = {}) {
    serializeBaseItem(writer, drive);
    writer.writeCollectionOfObjectValuesFromMethod("activities", drive.activities, serializeItemActivityOLD);
    writer.writeCollectionOfObjectValuesFromMethod("bundles", drive.bundles, serializeDriveItem);
    writer.writeStringValue("driveType", drive.driveType);
    writer.writeCollectionOfObjectValuesFromMethod("following", drive.following, serializeDriveItem);
    writer.writeCollectionOfObjectValuesFromMethod("items", drive.items, serializeDriveItem);
    writer.writeObjectValueFromMethod("list", drive.list, serializeList);
    writer.writeObjectValueFromMethod("owner", drive.owner, serializeIdentitySet);
    writer.writeObjectValueFromMethod("quota", drive.quota, serializeQuota);
    writer.writeObjectValueFromMethod("root", drive.root, serializeDriveItem);
    writer.writeObjectValueFromMethod("sharePointIds", drive.sharePointIds, serializeSharepointIds);
    writer.writeCollectionOfObjectValuesFromMethod("special", drive.special, serializeDriveItem);
    writer.writeObjectValueFromMethod("system", drive.system, serializeSystemFacet);
}

function serializeEmployeeOrgData(writer, employeeOrgData = {}) {
    writer.writeStringValue("costCenter", employeeOrgData.costCenter);
    writer.writeStringValue("division", employeeOrgData.division);
}

function serializeAssignedLabel(writer, assignedLabel = {}) {
    writer.writeStringValue("displayName", assignedLabel.displayName);
    writer.writeStringValue("labelId", assignedLabel.labelId);
}

function serializeMention(writer, mention = {}) {
    serializeEntity(writer, mention);
    writer.writeStringValue("application", mention.application);
    writer.writeStringValue("clientReference", mention.clientReference);
    writer.writeObjectValueFromMethod("createdBy", mention.createdBy, serializeEmailAddress);
    writer.writeDateValue("createdDateTime", mention.createdDateTime);
    writer.writeStringValue("deepLink", mention.deepLink);
    writer.writeObjectValueFromMethod("mentioned", mention.mentioned, serializeEmailAddress);
    writer.writeStringValue("mentionText", mention.mentionText);
    writer.writeDateValue("serverCreatedDateTime", mention.serverCreatedDateTime);
}

function serializePost(writer, post = {}) {
    serializeOutlookItem(writer, post);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", post.attachments, serializeAttachment);
    writer.writeObjectValueFromMethod("body", post.body, serializeItemBody);
    writer.writeStringValue("conversationId", post.conversationId);
    writer.writeStringValue("conversationThreadId", post.conversationThreadId);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", post.extensions, serializeExtension);
    writer.writeObjectValueFromMethod("from", post.from, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", post.hasAttachments);
    writer.writeEnumValue("importance", post.importance);
    writer.writeObjectValueFromMethod("inReplyTo", post.inReplyTo, serializePost);
    writer.writeCollectionOfObjectValuesFromMethod("mentions", post.mentions, serializeMention);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", post.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeCollectionOfObjectValuesFromMethod("newParticipants", post.newParticipants, serializeRecipient);
    writer.writeDateValue("receivedDateTime", post.receivedDateTime);
    writer.writeObjectValueFromMethod("sender", post.sender, serializeRecipient);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", post.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
}

function serializeConversationThread(writer, conversationThread = {}) {
    serializeEntity(writer, conversationThread);
    writer.writeCollectionOfObjectValuesFromMethod("ccRecipients", conversationThread.ccRecipients, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", conversationThread.hasAttachments);
    writer.writeBooleanValue("isLocked", conversationThread.isLocked);
    writer.writeDateValue("lastDeliveredDateTime", conversationThread.lastDeliveredDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("posts", conversationThread.posts, serializePost);
    writer.writeStringValue("preview", conversationThread.preview);
    writer.writeStringValue("topic", conversationThread.topic);
    writer.writeCollectionOfObjectValuesFromMethod("toRecipients", conversationThread.toRecipients, serializeRecipient);
    writer.writeCollectionOfPrimitiveValues("uniqueSenders", conversationThread.uniqueSenders);
}

function serializeConversation(writer, conversation = {}) {
    serializeEntity(writer, conversation);
    writer.writeBooleanValue("hasAttachments", conversation.hasAttachments);
    writer.writeDateValue("lastDeliveredDateTime", conversation.lastDeliveredDateTime);
    writer.writeStringValue("preview", conversation.preview);
    writer.writeCollectionOfObjectValuesFromMethod("threads", conversation.threads, serializeConversationThread);
    writer.writeStringValue("topic", conversation.topic);
    writer.writeCollectionOfPrimitiveValues("uniqueSenders", conversation.uniqueSenders);
}

function serializeSettingValue(writer, settingValue = {}) {
    writer.writeStringValue("name", settingValue.name);
    writer.writeStringValue("value", settingValue.value);
}

function serializeDirectorySetting(writer, directorySetting = {}) {
    serializeEntity(writer, directorySetting);
    writer.writeStringValue("displayName", directorySetting.displayName);
    writer.writeStringValue("templateId", directorySetting.templateId);
    writer.writeCollectionOfObjectValuesFromMethod("values", directorySetting.values, serializeSettingValue);
}

function serializeEndpoint(writer, endpoint = {}) {
    serializeDirectoryObject(writer, endpoint);
    writer.writeStringValue("capability", endpoint.capability);
    writer.writeStringValue("providerId", endpoint.providerId);
    writer.writeStringValue("providerName", endpoint.providerName);
    writer.writeStringValue("providerResourceId", endpoint.providerResourceId);
    writer.writeStringValue("uri", endpoint.uri);
}

function serializeGroupLifecyclePolicy(writer, groupLifecyclePolicy = {}) {
    serializeEntity(writer, groupLifecyclePolicy);
    writer.writeStringValue("alternateNotificationEmails", groupLifecyclePolicy.alternateNotificationEmails);
    writer.writeNumberValue("groupLifetimeInDays", groupLifecyclePolicy.groupLifetimeInDays);
    writer.writeStringValue("managedGroupTypes", groupLifecyclePolicy.managedGroupTypes);
}

function serializeWritebackConfiguration(writer, writebackConfiguration = {}) {
    writer.writeBooleanValue("isEnabled", writebackConfiguration.isEnabled);
}

function serializeGroupWritebackConfiguration(writer, groupWritebackConfiguration = {}) {
    serializeWritebackConfiguration(writer, groupWritebackConfiguration);
    writer.writeStringValue("onPremisesGroupType", groupWritebackConfiguration.onPremisesGroupType);
}

function serializeLicenseProcessingState(writer, licenseProcessingState = {}) {
    writer.writeStringValue("state", licenseProcessingState.state);
}

function serializeMembershipRuleProcessingStatus(writer, membershipRuleProcessingStatus = {}) {
    writer.writeStringValue("errorMessage", membershipRuleProcessingStatus.errorMessage);
    writer.writeDateValue("lastMembershipUpdated", membershipRuleProcessingStatus.lastMembershipUpdated);
    writer.writeEnumValue("status", membershipRuleProcessingStatus.status);
}

function serializeExternalLink(writer, externalLink = {}) {
    writer.writeStringValue("href", externalLink.href);
}

function serializeNotebookLinks(writer, notebookLinks = {}) {
    writer.writeObjectValueFromMethod("oneNoteClientUrl", notebookLinks.oneNoteClientUrl, serializeExternalLink);
    writer.writeObjectValueFromMethod("oneNoteWebUrl", notebookLinks.oneNoteWebUrl, serializeExternalLink);
}

function serializeOnenoteEntityBaseModel(writer, onenoteEntityBaseModel = {}) {
    serializeEntity(writer, onenoteEntityBaseModel);
    writer.writeStringValue("self", onenoteEntityBaseModel.self);
}

function serializeOnenoteEntitySchemaObjectModel(writer, onenoteEntitySchemaObjectModel = {}) {
    serializeOnenoteEntityBaseModel(writer, onenoteEntitySchemaObjectModel);
    writer.writeDateValue("createdDateTime", onenoteEntitySchemaObjectModel.createdDateTime);
}

function serializeOnenoteEntityHierarchyModel(writer, onenoteEntityHierarchyModel = {}) {
    serializeOnenoteEntitySchemaObjectModel(writer, onenoteEntityHierarchyModel);
    writer.writeObjectValueFromMethod("createdBy", onenoteEntityHierarchyModel.createdBy, serializeIdentitySet);
    writer.writeStringValue("displayName", onenoteEntityHierarchyModel.displayName);
    writer.writeObjectValueFromMethod("lastModifiedBy", onenoteEntityHierarchyModel.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", onenoteEntityHierarchyModel.lastModifiedDateTime);
}

function serializePageLinks(writer, pageLinks = {}) {
    writer.writeObjectValueFromMethod("oneNoteClientUrl", pageLinks.oneNoteClientUrl, serializeExternalLink);
    writer.writeObjectValueFromMethod("oneNoteWebUrl", pageLinks.oneNoteWebUrl, serializeExternalLink);
}

function serializeOnenotePage(writer, onenotePage = {}) {
    serializeOnenoteEntitySchemaObjectModel(writer, onenotePage);
    writer.writeStringValue("content", onenotePage.content);
    writer.writeStringValue("contentUrl", onenotePage.contentUrl);
    writer.writeStringValue("createdByAppId", onenotePage.createdByAppId);
    writer.writeDateValue("lastModifiedDateTime", onenotePage.lastModifiedDateTime);
    writer.writeNumberValue("level", onenotePage.level);
    writer.writeObjectValueFromMethod("links", onenotePage.links, serializePageLinks);
    writer.writeNumberValue("order", onenotePage.order);
    writer.writeObjectValueFromMethod("parentNotebook", onenotePage.parentNotebook, serializeNotebook);
    writer.writeObjectValueFromMethod("parentSection", onenotePage.parentSection, serializeOnenoteSection);
    writer.writeStringValue("title", onenotePage.title);
    writer.writeCollectionOfPrimitiveValues("userTags", onenotePage.userTags);
}

function serializeSectionGroup(writer, sectionGroup = {}) {
    serializeOnenoteEntityHierarchyModel(writer, sectionGroup);
    writer.writeObjectValueFromMethod("parentNotebook", sectionGroup.parentNotebook, serializeNotebook);
    writer.writeObjectValueFromMethod("parentSectionGroup", sectionGroup.parentSectionGroup, serializeSectionGroup);
    writer.writeCollectionOfObjectValuesFromMethod("sectionGroups", sectionGroup.sectionGroups, serializeSectionGroup);
    writer.writeStringValue("sectionGroupsUrl", sectionGroup.sectionGroupsUrl);
    writer.writeCollectionOfObjectValuesFromMethod("sections", sectionGroup.sections, serializeOnenoteSection);
    writer.writeStringValue("sectionsUrl", sectionGroup.sectionsUrl);
}

function serializeSectionLinks(writer, sectionLinks = {}) {
    writer.writeObjectValueFromMethod("oneNoteClientUrl", sectionLinks.oneNoteClientUrl, serializeExternalLink);
    writer.writeObjectValueFromMethod("oneNoteWebUrl", sectionLinks.oneNoteWebUrl, serializeExternalLink);
}

function serializeOnenoteSection(writer, onenoteSection = {}) {
    serializeOnenoteEntityHierarchyModel(writer, onenoteSection);
    writer.writeBooleanValue("isDefault", onenoteSection.isDefault);
    writer.writeObjectValueFromMethod("links", onenoteSection.links, serializeSectionLinks);
    writer.writeCollectionOfObjectValuesFromMethod("pages", onenoteSection.pages, serializeOnenotePage);
    writer.writeStringValue("pagesUrl", onenoteSection.pagesUrl);
    writer.writeObjectValueFromMethod("parentNotebook", onenoteSection.parentNotebook, serializeNotebook);
    writer.writeObjectValueFromMethod("parentSectionGroup", onenoteSection.parentSectionGroup, serializeSectionGroup);
}

function serializeNotebook(writer, notebook = {}) {
    serializeOnenoteEntityHierarchyModel(writer, notebook);
    writer.writeBooleanValue("isDefault", notebook.isDefault);
    writer.writeBooleanValue("isShared", notebook.isShared);
    writer.writeObjectValueFromMethod("links", notebook.links, serializeNotebookLinks);
    writer.writeCollectionOfObjectValuesFromMethod("sectionGroups", notebook.sectionGroups, serializeSectionGroup);
    writer.writeStringValue("sectionGroupsUrl", notebook.sectionGroupsUrl);
    writer.writeCollectionOfObjectValuesFromMethod("sections", notebook.sections, serializeOnenoteSection);
    writer.writeStringValue("sectionsUrl", notebook.sectionsUrl);
    writer.writeEnumValue("userRole", notebook.userRole);
}

function serializeOnenoteOperationError(writer, onenoteOperationError = {}) {
    writer.writeStringValue("code", onenoteOperationError.code);
    writer.writeStringValue("message", onenoteOperationError.message);
}

function serializeOperation(writer, operation = {}) {
    serializeEntity(writer, operation);
    writer.writeDateValue("createdDateTime", operation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", operation.lastActionDateTime);
    writer.writeEnumValue("status", operation.status);
}

function serializeOnenoteOperation(writer, onenoteOperation = {}) {
    serializeOperation(writer, onenoteOperation);
    writer.writeObjectValueFromMethod("error_escaped", onenoteOperation.error_escaped, serializeOnenoteOperationError);
    writer.writeStringValue("percentComplete", onenoteOperation.percentComplete);
    writer.writeStringValue("resourceId", onenoteOperation.resourceId);
    writer.writeStringValue("resourceLocation", onenoteOperation.resourceLocation);
}

function serializeOnenoteResource(writer, onenoteResource = {}) {
    serializeOnenoteEntityBaseModel(writer, onenoteResource);
    writer.writeStringValue("content", onenoteResource.content);
    writer.writeStringValue("contentUrl", onenoteResource.contentUrl);
}

function serializeOnenote(writer, onenote = {}) {
    serializeEntity(writer, onenote);
    writer.writeCollectionOfObjectValuesFromMethod("notebooks", onenote.notebooks, serializeNotebook);
    writer.writeCollectionOfObjectValuesFromMethod("operations", onenote.operations, serializeOnenoteOperation);
    writer.writeCollectionOfObjectValuesFromMethod("pages", onenote.pages, serializeOnenotePage);
    writer.writeCollectionOfObjectValuesFromMethod("resources", onenote.resources, serializeOnenoteResource);
    writer.writeCollectionOfObjectValuesFromMethod("sectionGroups", onenote.sectionGroups, serializeSectionGroup);
    writer.writeCollectionOfObjectValuesFromMethod("sections", onenote.sections, serializeOnenoteSection);
}

function serializeOnPremisesProvisioningError(writer, onPremisesProvisioningError = {}) {
    writer.writeStringValue("category", onPremisesProvisioningError.category);
    writer.writeDateValue("occurredDateTime", onPremisesProvisioningError.occurredDateTime);
    writer.writeStringValue("propertyCausingError", onPremisesProvisioningError.propertyCausingError);
    writer.writeStringValue("value", onPremisesProvisioningError.value);
}

function serializePlannerBucketCreation(writer, plannerBucketCreation = {}) {
    writer.writeEnumValue("creationSourceKind", plannerBucketCreation.creationSourceKind);
}

function serializePlannerDelta(writer, plannerDelta = {}) {
    serializeEntity(writer, plannerDelta);
}

function serializePlannerAppliedCategories(writer, plannerAppliedCategories = {}) {
}

function serializePlannerOrderHintsByAssignee(writer, plannerOrderHintsByAssignee = {}) {
}

function serializePlannerAssignedToTaskBoardTaskFormat(writer, plannerAssignedToTaskBoardTaskFormat = {}) {
    serializePlannerDelta(writer, plannerAssignedToTaskBoardTaskFormat);
    writer.writeObjectValueFromMethod("orderHintsByAssignee", plannerAssignedToTaskBoardTaskFormat.orderHintsByAssignee, serializePlannerOrderHintsByAssignee);
    writer.writeStringValue("unassignedOrderHint", plannerAssignedToTaskBoardTaskFormat.unassignedOrderHint);
}

function serializePlannerAssignments(writer, plannerAssignments = {}) {
}

function serializePlannerBucketTaskBoardTaskFormat(writer, plannerBucketTaskBoardTaskFormat = {}) {
    serializePlannerDelta(writer, plannerBucketTaskBoardTaskFormat);
    writer.writeStringValue("orderHint", plannerBucketTaskBoardTaskFormat.orderHint);
}

function serializePlannerProgressTaskBoardTaskFormat(writer, plannerProgressTaskBoardTaskFormat = {}) {
    serializePlannerDelta(writer, plannerProgressTaskBoardTaskFormat);
    writer.writeStringValue("orderHint", plannerProgressTaskBoardTaskFormat.orderHint);
}

function serializePlannerTeamsPublicationInfo(writer, plannerTeamsPublicationInfo = {}) {
    serializePlannerTaskCreation(writer, plannerTeamsPublicationInfo);
    writer.writeDateValue("lastModifiedDateTime", plannerTeamsPublicationInfo.lastModifiedDateTime);
    writer.writeStringValue("publicationId", plannerTeamsPublicationInfo.publicationId);
    writer.writeStringValue("publishedToPlanId", plannerTeamsPublicationInfo.publishedToPlanId);
    writer.writeStringValue("publishingTeamId", plannerTeamsPublicationInfo.publishingTeamId);
    writer.writeStringValue("publishingTeamName", plannerTeamsPublicationInfo.publishingTeamName);
}

function serializePlannerTaskCreation(writer, plannerTaskCreation = {}) {
    writer.writeEnumValue("creationSourceKind", plannerTaskCreation.creationSourceKind);
    writer.writeObjectValueFromMethod("teamsPublicationInfo", plannerTaskCreation.teamsPublicationInfo, serializePlannerTeamsPublicationInfo);
}

function serializePlannerChecklistItems(writer, plannerChecklistItems = {}) {
}

function serializePlannerExternalReferences(writer, plannerExternalReferences = {}) {
}

function serializePlannerTaskDetails(writer, plannerTaskDetails = {}) {
    serializePlannerDelta(writer, plannerTaskDetails);
    writer.writeObjectValueFromMethod("checklist", plannerTaskDetails.checklist, serializePlannerChecklistItems);
    writer.writeStringValue("description", plannerTaskDetails.description);
    writer.writeObjectValueFromMethod("notes", plannerTaskDetails.notes, serializeItemBody);
    writer.writeEnumValue("previewType", plannerTaskDetails.previewType);
    writer.writeObjectValueFromMethod("references", plannerTaskDetails.references, serializePlannerExternalReferences);
}

function serializePlannerTask(writer, plannerTask = {}) {
    serializePlannerDelta(writer, plannerTask);
    writer.writeNumberValue("activeChecklistItemCount", plannerTask.activeChecklistItemCount);
    writer.writeObjectValueFromMethod("appliedCategories", plannerTask.appliedCategories, serializePlannerAppliedCategories);
    writer.writeObjectValueFromMethod("assignedToTaskBoardFormat", plannerTask.assignedToTaskBoardFormat, serializePlannerAssignedToTaskBoardTaskFormat);
    writer.writeStringValue("assigneePriority", plannerTask.assigneePriority);
    writer.writeObjectValueFromMethod("assignments", plannerTask.assignments, serializePlannerAssignments);
    writer.writeStringValue("bucketId", plannerTask.bucketId);
    writer.writeObjectValueFromMethod("bucketTaskBoardFormat", plannerTask.bucketTaskBoardFormat, serializePlannerBucketTaskBoardTaskFormat);
    writer.writeNumberValue("checklistItemCount", plannerTask.checklistItemCount);
    writer.writeObjectValueFromMethod("completedBy", plannerTask.completedBy, serializeIdentitySet);
    writer.writeDateValue("completedDateTime", plannerTask.completedDateTime);
    writer.writeStringValue("conversationThreadId", plannerTask.conversationThreadId);
    writer.writeObjectValueFromMethod("createdBy", plannerTask.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", plannerTask.createdDateTime);
    writer.writeObjectValueFromMethod("creationSource", plannerTask.creationSource, serializePlannerTaskCreation);
    writer.writeObjectValueFromMethod("details", plannerTask.details, serializePlannerTaskDetails);
    writer.writeDateValue("dueDateTime", plannerTask.dueDateTime);
    writer.writeBooleanValue("hasDescription", plannerTask.hasDescription);
    writer.writeStringValue("orderHint", plannerTask.orderHint);
    writer.writeNumberValue("percentComplete", plannerTask.percentComplete);
    writer.writeStringValue("planId", plannerTask.planId);
    writer.writeEnumValue("previewType", plannerTask.previewType);
    writer.writeNumberValue("priority", plannerTask.priority);
    writer.writeObjectValueFromMethod("progressTaskBoardFormat", plannerTask.progressTaskBoardFormat, serializePlannerProgressTaskBoardTaskFormat);
    writer.writeNumberValue("referenceCount", plannerTask.referenceCount);
    writer.writeDateValue("startDateTime", plannerTask.startDateTime);
    writer.writeStringValue("title", plannerTask.title);
}

function serializePlannerBucket(writer, plannerBucket = {}) {
    serializePlannerDelta(writer, plannerBucket);
    writer.writeObjectValueFromMethod("creationSource", plannerBucket.creationSource, serializePlannerBucketCreation);
    writer.writeStringValue("name", plannerBucket.name);
    writer.writeStringValue("orderHint", plannerBucket.orderHint);
    writer.writeStringValue("planId", plannerBucket.planId);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", plannerBucket.tasks, serializePlannerTask);
}

function serializePlannerPlanContainer(writer, plannerPlanContainer = {}) {
    writer.writeStringValue("containerId", plannerPlanContainer.containerId);
    writer.writeEnumValue("type", plannerPlanContainer.type);
    writer.writeStringValue("url", plannerPlanContainer.url);
}

function serializePlannerPlanContextCollection(writer, plannerPlanContextCollection = {}) {
}

function serializePlannerPlanCreation(writer, plannerPlanCreation = {}) {
    writer.writeEnumValue("creationSourceKind", plannerPlanCreation.creationSourceKind);
}

function serializePlannerCategoryDescriptions(writer, plannerCategoryDescriptions = {}) {
    writer.writeStringValue("category1", plannerCategoryDescriptions.category1);
    writer.writeStringValue("category10", plannerCategoryDescriptions.category10);
    writer.writeStringValue("category11", plannerCategoryDescriptions.category11);
    writer.writeStringValue("category12", plannerCategoryDescriptions.category12);
    writer.writeStringValue("category13", plannerCategoryDescriptions.category13);
    writer.writeStringValue("category14", plannerCategoryDescriptions.category14);
    writer.writeStringValue("category15", plannerCategoryDescriptions.category15);
    writer.writeStringValue("category16", plannerCategoryDescriptions.category16);
    writer.writeStringValue("category17", plannerCategoryDescriptions.category17);
    writer.writeStringValue("category18", plannerCategoryDescriptions.category18);
    writer.writeStringValue("category19", plannerCategoryDescriptions.category19);
    writer.writeStringValue("category2", plannerCategoryDescriptions.category2);
    writer.writeStringValue("category20", plannerCategoryDescriptions.category20);
    writer.writeStringValue("category21", plannerCategoryDescriptions.category21);
    writer.writeStringValue("category22", plannerCategoryDescriptions.category22);
    writer.writeStringValue("category23", plannerCategoryDescriptions.category23);
    writer.writeStringValue("category24", plannerCategoryDescriptions.category24);
    writer.writeStringValue("category25", plannerCategoryDescriptions.category25);
    writer.writeStringValue("category3", plannerCategoryDescriptions.category3);
    writer.writeStringValue("category4", plannerCategoryDescriptions.category4);
    writer.writeStringValue("category5", plannerCategoryDescriptions.category5);
    writer.writeStringValue("category6", plannerCategoryDescriptions.category6);
    writer.writeStringValue("category7", plannerCategoryDescriptions.category7);
    writer.writeStringValue("category8", plannerCategoryDescriptions.category8);
    writer.writeStringValue("category9", plannerCategoryDescriptions.category9);
}

function serializePlannerPlanContextDetailsCollection(writer, plannerPlanContextDetailsCollection = {}) {
}

function serializePlannerUserIds(writer, plannerUserIds = {}) {
}

function serializePlannerPlanDetails(writer, plannerPlanDetails = {}) {
    serializePlannerDelta(writer, plannerPlanDetails);
    writer.writeObjectValueFromMethod("categoryDescriptions", plannerPlanDetails.categoryDescriptions, serializePlannerCategoryDescriptions);
    writer.writeObjectValueFromMethod("contextDetails", plannerPlanDetails.contextDetails, serializePlannerPlanContextDetailsCollection);
    writer.writeObjectValueFromMethod("sharedWith", plannerPlanDetails.sharedWith, serializePlannerUserIds);
}

function serializePlannerPlan(writer, plannerPlan = {}) {
    serializePlannerDelta(writer, plannerPlan);
    writer.writeCollectionOfObjectValuesFromMethod("buckets", plannerPlan.buckets, serializePlannerBucket);
    writer.writeObjectValueFromMethod("container", plannerPlan.container, serializePlannerPlanContainer);
    writer.writeObjectValueFromMethod("contexts", plannerPlan.contexts, serializePlannerPlanContextCollection);
    writer.writeObjectValueFromMethod("createdBy", plannerPlan.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", plannerPlan.createdDateTime);
    writer.writeObjectValueFromMethod("creationSource", plannerPlan.creationSource, serializePlannerPlanCreation);
    writer.writeObjectValueFromMethod("details", plannerPlan.details, serializePlannerPlanDetails);
    writer.writeStringValue("owner", plannerPlan.owner);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", plannerPlan.tasks, serializePlannerTask);
    writer.writeStringValue("title", plannerPlan.title);
}

function serializePlannerGroup(writer, plannerGroup = {}) {
    serializeEntity(writer, plannerGroup);
    writer.writeCollectionOfObjectValuesFromMethod("plans", plannerGroup.plans, serializePlannerPlan);
}

function serializeSiteCollection(writer, siteCollection = {}) {
    writer.writeStringValue("dataLocationCode", siteCollection.dataLocationCode);
    writer.writeStringValue("hostname", siteCollection.hostname);
    writer.writeObjectValueFromMethod("root", siteCollection.root, serializeRoot);
}

function serializeSitePageData(writer, sitePageData = {}) {
}

function serializeWebPart(writer, webPart = {}) {
    writer.writeObjectValueFromMethod("data", webPart.data, serializeSitePageData);
    writer.writeStringValue("type", webPart.type);
}

function serializeSitePage(writer, sitePage = {}) {
    serializeBaseItem(writer, sitePage);
    writer.writeObjectValueFromMethod("contentType", sitePage.contentType, serializeContentTypeInfo);
    writer.writeStringValue("pageLayoutType", sitePage.pageLayoutType);
    writer.writeObjectValueFromMethod("publishingState", sitePage.publishingState, serializePublicationFacet);
    writer.writeStringValue("title", sitePage.title);
    writer.writeCollectionOfObjectValuesFromMethod("webParts", sitePage.webParts, serializeWebPart);
}

function serializeSiteSettings(writer, siteSettings = {}) {
    writer.writeStringValue("languageTag", siteSettings.languageTag);
    writer.writeStringValue("timeZone", siteSettings.timeZone);
}

function serializeStore(writer, store = {}) {
    serializeEntity(writer, store);
    writer.writeStringValue("defaultLanguageTag", store.defaultLanguageTag);
    writer.writeCollectionOfObjectValuesFromMethod("groups", store.groups, serializeGroup$1);
    writer.writeCollectionOfPrimitiveValues("languageTags", store.languageTags);
    writer.writeCollectionOfObjectValuesFromMethod("sets", store.sets, serializeSet);
}

function serializeSite(writer, site = {}) {
    serializeBaseItem(writer, site);
    writer.writeObjectValueFromMethod("analytics", site.analytics, serializeItemAnalytics);
    writer.writeCollectionOfObjectValuesFromMethod("columns", site.columns, serializeColumnDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("contentTypes", site.contentTypes, serializeContentType);
    writer.writeObjectValueFromMethod("deleted", site.deleted, serializeDeleted);
    writer.writeStringValue("displayName", site.displayName);
    writer.writeObjectValueFromMethod("drive", site.drive, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("drives", site.drives, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("externalColumns", site.externalColumns, serializeColumnDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("items", site.items, serializeBaseItem);
    writer.writeCollectionOfObjectValuesFromMethod("lists", site.lists, serializeList);
    writer.writeObjectValueFromMethod("onenote", site.onenote, serializeOnenote);
    writer.writeCollectionOfObjectValuesFromMethod("operations", site.operations, serializeRichLongRunningOperation);
    writer.writeCollectionOfObjectValuesFromMethod("pages", site.pages, serializeSitePage);
    writer.writeCollectionOfObjectValuesFromMethod("permissions", site.permissions, serializePermission);
    writer.writeObjectValueFromMethod("root", site.root, serializeRoot);
    writer.writeObjectValueFromMethod("settings", site.settings, serializeSiteSettings);
    writer.writeObjectValueFromMethod("sharepointIds", site.sharepointIds, serializeSharepointIds);
    writer.writeObjectValueFromMethod("siteCollection", site.siteCollection, serializeSiteCollection);
    writer.writeCollectionOfObjectValuesFromMethod("sites", site.sites, serializeSite);
    writer.writeObjectValueFromMethod("termStore", site.termStore, serializeStore);
}

function serializeChannelModerationSettings(writer, channelModerationSettings = {}) {
    writer.writeBooleanValue("allowNewMessageFromBots", channelModerationSettings.allowNewMessageFromBots);
    writer.writeBooleanValue("allowNewMessageFromConnectors", channelModerationSettings.allowNewMessageFromConnectors);
    writer.writeEnumValue("replyRestriction", channelModerationSettings.replyRestriction);
    writer.writeEnumValue("userNewMessageRestriction", channelModerationSettings.userNewMessageRestriction);
}

function serializeChannelSummary(writer, channelSummary = {}) {
    writer.writeNumberValue("guestsCount", channelSummary.guestsCount);
    writer.writeBooleanValue("hasMembersFromOtherTenants", channelSummary.hasMembersFromOtherTenants);
    writer.writeNumberValue("membersCount", channelSummary.membersCount);
    writer.writeNumberValue("ownersCount", channelSummary.ownersCount);
}

function serializeTeamInfo(writer, teamInfo = {}) {
    serializeEntity(writer, teamInfo);
    writer.writeStringValue("displayName", teamInfo.displayName);
    writer.writeObjectValueFromMethod("team", teamInfo.team, serializeTeam);
    writer.writeStringValue("tenantId", teamInfo.tenantId);
}

function serializeSharedWithChannelTeamInfo(writer, sharedWithChannelTeamInfo = {}) {
    serializeTeamInfo(writer, sharedWithChannelTeamInfo);
    writer.writeCollectionOfObjectValuesFromMethod("allowedMembers", sharedWithChannelTeamInfo.allowedMembers, serializeConversationMember);
    writer.writeBooleanValue("isHostTeam", sharedWithChannelTeamInfo.isHostTeam);
}

function serializeChannel(writer, channel = {}) {
    serializeEntity(writer, channel);
    writer.writeDateValue("createdDateTime", channel.createdDateTime);
    writer.writeStringValue("description", channel.description);
    writer.writeStringValue("displayName", channel.displayName);
    writer.writeStringValue("email", channel.email);
    writer.writeObjectValueFromMethod("filesFolder", channel.filesFolder, serializeDriveItem);
    writer.writeBooleanValue("isFavoriteByDefault", channel.isFavoriteByDefault);
    writer.writeCollectionOfObjectValuesFromMethod("members", channel.members, serializeConversationMember);
    writer.writeEnumValue("membershipType", channel.membershipType);
    writer.writeCollectionOfObjectValuesFromMethod("messages", channel.messages, serializeChatMessage);
    writer.writeObjectValueFromMethod("moderationSettings", channel.moderationSettings, serializeChannelModerationSettings);
    writer.writeCollectionOfObjectValuesFromMethod("sharedWithTeams", channel.sharedWithTeams, serializeSharedWithChannelTeamInfo);
    writer.writeObjectValueFromMethod("summary", channel.summary, serializeChannelSummary);
    writer.writeCollectionOfObjectValuesFromMethod("tabs", channel.tabs, serializeTeamsTab);
    writer.writeStringValue("tenantId", channel.tenantId);
    writer.writeStringValue("webUrl", channel.webUrl);
}

function serializeChangeTrackedEntity(writer, changeTrackedEntity = {}) {
    serializeEntity(writer, changeTrackedEntity);
    writer.writeObjectValueFromMethod("createdBy", changeTrackedEntity.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", changeTrackedEntity.createdDateTime);
    writer.writeObjectValueFromMethod("lastModifiedBy", changeTrackedEntity.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", changeTrackedEntity.lastModifiedDateTime);
}

function serializeScheduleChangeRequest(writer, scheduleChangeRequest = {}) {
    serializeChangeTrackedEntity(writer, scheduleChangeRequest);
    writer.writeEnumValue("assignedTo", scheduleChangeRequest.assignedTo);
    writer.writeDateValue("managerActionDateTime", scheduleChangeRequest.managerActionDateTime);
    writer.writeStringValue("managerActionMessage", scheduleChangeRequest.managerActionMessage);
    writer.writeStringValue("managerUserId", scheduleChangeRequest.managerUserId);
    writer.writeDateValue("senderDateTime", scheduleChangeRequest.senderDateTime);
    writer.writeStringValue("senderMessage", scheduleChangeRequest.senderMessage);
    writer.writeStringValue("senderUserId", scheduleChangeRequest.senderUserId);
    writer.writeEnumValue("state", scheduleChangeRequest.state);
}

function serializeOfferShiftRequest(writer, offerShiftRequest = {}) {
    serializeScheduleChangeRequest(writer, offerShiftRequest);
    writer.writeDateValue("recipientActionDateTime", offerShiftRequest.recipientActionDateTime);
    writer.writeStringValue("recipientActionMessage", offerShiftRequest.recipientActionMessage);
    writer.writeStringValue("recipientUserId", offerShiftRequest.recipientUserId);
    writer.writeStringValue("senderShiftId", offerShiftRequest.senderShiftId);
}

function serializeScheduleEntity(writer, scheduleEntity = {}) {
    writer.writeDateValue("endDateTime", scheduleEntity.endDateTime);
    writer.writeDateValue("startDateTime", scheduleEntity.startDateTime);
    writer.writeEnumValue("theme", scheduleEntity.theme);
}

function serializeShiftActivity(writer, shiftActivity = {}) {
    writer.writeStringValue("code", shiftActivity.code);
    writer.writeStringValue("displayName", shiftActivity.displayName);
    writer.writeDateValue("endDateTime", shiftActivity.endDateTime);
    writer.writeBooleanValue("isPaid", shiftActivity.isPaid);
    writer.writeDateValue("startDateTime", shiftActivity.startDateTime);
    writer.writeEnumValue("theme", shiftActivity.theme);
}

function serializeShiftItem(writer, shiftItem = {}) {
    serializeScheduleEntity(writer, shiftItem);
    writer.writeCollectionOfObjectValuesFromMethod("activities", shiftItem.activities, serializeShiftActivity);
    writer.writeStringValue("displayName", shiftItem.displayName);
    writer.writeStringValue("notes", shiftItem.notes);
}

function serializeOpenShiftItem(writer, openShiftItem = {}) {
    serializeShiftItem(writer, openShiftItem);
    writer.writeNumberValue("openSlotCount", openShiftItem.openSlotCount);
}

function serializeOpenShift(writer, openShift = {}) {
    serializeChangeTrackedEntity(writer, openShift);
    writer.writeObjectValueFromMethod("draftOpenShift", openShift.draftOpenShift, serializeOpenShiftItem);
    writer.writeBooleanValue("isStagedForDeletion", openShift.isStagedForDeletion);
    writer.writeStringValue("schedulingGroupId", openShift.schedulingGroupId);
    writer.writeObjectValueFromMethod("sharedOpenShift", openShift.sharedOpenShift, serializeOpenShiftItem);
}

function serializeOpenShiftChangeRequest(writer, openShiftChangeRequest = {}) {
    serializeScheduleChangeRequest(writer, openShiftChangeRequest);
    writer.writeStringValue("openShiftId", openShiftChangeRequest.openShiftId);
}

function serializeSchedulingGroup(writer, schedulingGroup = {}) {
    serializeChangeTrackedEntity(writer, schedulingGroup);
    writer.writeStringValue("displayName", schedulingGroup.displayName);
    writer.writeBooleanValue("isActive", schedulingGroup.isActive);
    writer.writeCollectionOfPrimitiveValues("userIds", schedulingGroup.userIds);
}

function serializeShift(writer, shift = {}) {
    serializeChangeTrackedEntity(writer, shift);
    writer.writeObjectValueFromMethod("draftShift", shift.draftShift, serializeShiftItem);
    writer.writeBooleanValue("isStagedForDeletion", shift.isStagedForDeletion);
    writer.writeStringValue("schedulingGroupId", shift.schedulingGroupId);
    writer.writeObjectValueFromMethod("sharedShift", shift.sharedShift, serializeShiftItem);
    writer.writeStringValue("userId", shift.userId);
}

function serializeSwapShiftsChangeRequest(writer, swapShiftsChangeRequest = {}) {
    serializeOfferShiftRequest(writer, swapShiftsChangeRequest);
    writer.writeStringValue("recipientShiftId", swapShiftsChangeRequest.recipientShiftId);
}

function serializeTimeCardEvent(writer, timeCardEvent = {}) {
    writer.writeBooleanValue("atApprovedLocation", timeCardEvent.atApprovedLocation);
    writer.writeDateValue("dateTime", timeCardEvent.dateTime);
    writer.writeObjectValueFromMethod("notes", timeCardEvent.notes, serializeItemBody);
}

function serializeTimeCardBreak(writer, timeCardBreak = {}) {
    writer.writeStringValue("breakId", timeCardBreak.breakId);
    writer.writeObjectValueFromMethod("end", timeCardBreak.end, serializeTimeCardEvent);
    writer.writeObjectValueFromMethod("notes", timeCardBreak.notes, serializeItemBody);
    writer.writeObjectValueFromMethod("start", timeCardBreak.start, serializeTimeCardEvent);
}

function serializeTimeCardEntry(writer, timeCardEntry = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("breaks", timeCardEntry.breaks, serializeTimeCardBreak);
    writer.writeObjectValueFromMethod("clockInEvent", timeCardEntry.clockInEvent, serializeTimeCardEvent);
    writer.writeObjectValueFromMethod("clockOutEvent", timeCardEntry.clockOutEvent, serializeTimeCardEvent);
}

function serializeTimeCard(writer, timeCard = {}) {
    serializeChangeTrackedEntity(writer, timeCard);
    writer.writeCollectionOfObjectValuesFromMethod("breaks", timeCard.breaks, serializeTimeCardBreak);
    writer.writeObjectValueFromMethod("clockInEvent", timeCard.clockInEvent, serializeTimeCardEvent);
    writer.writeObjectValueFromMethod("clockOutEvent", timeCard.clockOutEvent, serializeTimeCardEvent);
    writer.writeEnumValue("confirmedBy", timeCard.confirmedBy);
    writer.writeObjectValueFromMethod("notes", timeCard.notes, serializeItemBody);
    writer.writeObjectValueFromMethod("originalEntry", timeCard.originalEntry, serializeTimeCardEntry);
    writer.writeEnumValue("state", timeCard.state);
    writer.writeStringValue("userId", timeCard.userId);
}

function serializeTimeClockSettings(writer, timeClockSettings = {}) {
    writer.writeObjectValueFromMethod("approvedLocation", timeClockSettings.approvedLocation, serializeGeoCoordinates);
}

function serializeTimeOffItem(writer, timeOffItem = {}) {
    serializeScheduleEntity(writer, timeOffItem);
    writer.writeStringValue("timeOffReasonId", timeOffItem.timeOffReasonId);
}

function serializeTimeOff(writer, timeOff = {}) {
    serializeChangeTrackedEntity(writer, timeOff);
    writer.writeObjectValueFromMethod("draftTimeOff", timeOff.draftTimeOff, serializeTimeOffItem);
    writer.writeBooleanValue("isStagedForDeletion", timeOff.isStagedForDeletion);
    writer.writeObjectValueFromMethod("sharedTimeOff", timeOff.sharedTimeOff, serializeTimeOffItem);
    writer.writeStringValue("userId", timeOff.userId);
}

function serializeTimeOffReason(writer, timeOffReason = {}) {
    serializeChangeTrackedEntity(writer, timeOffReason);
    writer.writeStringValue("displayName", timeOffReason.displayName);
    writer.writeEnumValue("iconType", timeOffReason.iconType);
    writer.writeBooleanValue("isActive", timeOffReason.isActive);
}

function serializeTimeOffRequest(writer, timeOffRequest = {}) {
    serializeScheduleChangeRequest(writer, timeOffRequest);
    writer.writeDateValue("endDateTime", timeOffRequest.endDateTime);
    writer.writeDateValue("startDateTime", timeOffRequest.startDateTime);
    writer.writeStringValue("timeOffReasonId", timeOffRequest.timeOffReasonId);
}

function serializeSchedule(writer, schedule = {}) {
    serializeEntity(writer, schedule);
    writer.writeBooleanValue("enabled", schedule.enabled);
    writer.writeCollectionOfObjectValuesFromMethod("offerShiftRequests", schedule.offerShiftRequests, serializeOfferShiftRequest);
    writer.writeBooleanValue("offerShiftRequestsEnabled", schedule.offerShiftRequestsEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("openShiftChangeRequests", schedule.openShiftChangeRequests, serializeOpenShiftChangeRequest);
    writer.writeCollectionOfObjectValuesFromMethod("openShifts", schedule.openShifts, serializeOpenShift);
    writer.writeBooleanValue("openShiftsEnabled", schedule.openShiftsEnabled);
    writer.writeEnumValue("provisionStatus", schedule.provisionStatus);
    writer.writeStringValue("provisionStatusCode", schedule.provisionStatusCode);
    writer.writeCollectionOfObjectValuesFromMethod("schedulingGroups", schedule.schedulingGroups, serializeSchedulingGroup);
    writer.writeCollectionOfObjectValuesFromMethod("shifts", schedule.shifts, serializeShift);
    writer.writeCollectionOfObjectValuesFromMethod("swapShiftsChangeRequests", schedule.swapShiftsChangeRequests, serializeSwapShiftsChangeRequest);
    writer.writeBooleanValue("swapShiftsRequestsEnabled", schedule.swapShiftsRequestsEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("timeCards", schedule.timeCards, serializeTimeCard);
    writer.writeBooleanValue("timeClockEnabled", schedule.timeClockEnabled);
    writer.writeObjectValueFromMethod("timeClockSettings", schedule.timeClockSettings, serializeTimeClockSettings);
    writer.writeCollectionOfObjectValuesFromMethod("timeOffReasons", schedule.timeOffReasons, serializeTimeOffReason);
    writer.writeCollectionOfObjectValuesFromMethod("timeOffRequests", schedule.timeOffRequests, serializeTimeOffRequest);
    writer.writeBooleanValue("timeOffRequestsEnabled", schedule.timeOffRequestsEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("timesOff", schedule.timesOff, serializeTimeOff);
    writer.writeStringValue("timeZone", schedule.timeZone);
    writer.writeCollectionOfPrimitiveValues("workforceIntegrationIds", schedule.workforceIntegrationIds);
}

function serializeTeamDiscoverySettings(writer, teamDiscoverySettings = {}) {
    writer.writeBooleanValue("showInTeamsSearchAndSuggestions", teamDiscoverySettings.showInTeamsSearchAndSuggestions);
}

function serializeTeamFunSettings(writer, teamFunSettings = {}) {
    writer.writeBooleanValue("allowCustomMemes", teamFunSettings.allowCustomMemes);
    writer.writeBooleanValue("allowGiphy", teamFunSettings.allowGiphy);
    writer.writeBooleanValue("allowStickersAndMemes", teamFunSettings.allowStickersAndMemes);
    writer.writeEnumValue("giphyContentRating", teamFunSettings.giphyContentRating);
}

function serializeTeamGuestSettings(writer, teamGuestSettings = {}) {
    writer.writeBooleanValue("allowCreateUpdateChannels", teamGuestSettings.allowCreateUpdateChannels);
    writer.writeBooleanValue("allowDeleteChannels", teamGuestSettings.allowDeleteChannels);
}

function serializeTeamMemberSettings(writer, teamMemberSettings = {}) {
    writer.writeBooleanValue("allowAddRemoveApps", teamMemberSettings.allowAddRemoveApps);
    writer.writeBooleanValue("allowCreatePrivateChannels", teamMemberSettings.allowCreatePrivateChannels);
    writer.writeBooleanValue("allowCreateUpdateChannels", teamMemberSettings.allowCreateUpdateChannels);
    writer.writeBooleanValue("allowCreateUpdateRemoveConnectors", teamMemberSettings.allowCreateUpdateRemoveConnectors);
    writer.writeBooleanValue("allowCreateUpdateRemoveTabs", teamMemberSettings.allowCreateUpdateRemoveTabs);
    writer.writeBooleanValue("allowDeleteChannels", teamMemberSettings.allowDeleteChannels);
}

function serializeTeamMessagingSettings(writer, teamMessagingSettings = {}) {
    writer.writeBooleanValue("allowChannelMentions", teamMessagingSettings.allowChannelMentions);
    writer.writeBooleanValue("allowOwnerDeleteMessages", teamMessagingSettings.allowOwnerDeleteMessages);
    writer.writeBooleanValue("allowTeamMentions", teamMessagingSettings.allowTeamMentions);
    writer.writeBooleanValue("allowUserDeleteMessages", teamMessagingSettings.allowUserDeleteMessages);
    writer.writeBooleanValue("allowUserEditMessages", teamMessagingSettings.allowUserEditMessages);
}

function serializeTeamsTemplate(writer, teamsTemplate = {}) {
    serializeEntity(writer, teamsTemplate);
}

function serializeTeamSummary(writer, teamSummary = {}) {
    writer.writeNumberValue("guestsCount", teamSummary.guestsCount);
    writer.writeNumberValue("membersCount", teamSummary.membersCount);
    writer.writeNumberValue("ownersCount", teamSummary.ownersCount);
}

function serializeTeamTemplateDefinition(writer, teamTemplateDefinition = {}) {
    serializeEntity(writer, teamTemplateDefinition);
    writer.writeEnumValue("audience", teamTemplateDefinition.audience);
    writer.writeCollectionOfPrimitiveValues("categories", teamTemplateDefinition.categories);
    writer.writeStringValue("description", teamTemplateDefinition.description);
    writer.writeStringValue("displayName", teamTemplateDefinition.displayName);
    writer.writeStringValue("iconUrl", teamTemplateDefinition.iconUrl);
    writer.writeStringValue("languageTag", teamTemplateDefinition.languageTag);
    writer.writeObjectValueFromMethod("lastModifiedBy", teamTemplateDefinition.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", teamTemplateDefinition.lastModifiedDateTime);
    writer.writeStringValue("parentTemplateId", teamTemplateDefinition.parentTemplateId);
    writer.writeStringValue("publisherName", teamTemplateDefinition.publisherName);
    writer.writeStringValue("shortDescription", teamTemplateDefinition.shortDescription);
    writer.writeObjectValueFromMethod("teamDefinition", teamTemplateDefinition.teamDefinition, serializeTeam);
}

function serializeTeamworkTagMember(writer, teamworkTagMember = {}) {
    serializeEntity(writer, teamworkTagMember);
    writer.writeStringValue("displayName", teamworkTagMember.displayName);
    writer.writeStringValue("tenantId", teamworkTagMember.tenantId);
    writer.writeStringValue("userId", teamworkTagMember.userId);
}

function serializeTeamworkTag(writer, teamworkTag = {}) {
    serializeEntity(writer, teamworkTag);
    writer.writeStringValue("description", teamworkTag.description);
    writer.writeStringValue("displayName", teamworkTag.displayName);
    writer.writeNumberValue("memberCount", teamworkTag.memberCount);
    writer.writeCollectionOfObjectValuesFromMethod("members", teamworkTag.members, serializeTeamworkTagMember);
    writer.writeEnumValue("tagType", teamworkTag.tagType);
    writer.writeStringValue("teamId", teamworkTag.teamId);
}

function serializeTeam(writer, team = {}) {
    serializeEntity(writer, team);
    writer.writeCollectionOfObjectValuesFromMethod("allChannels", team.allChannels, serializeChannel);
    writer.writeCollectionOfObjectValuesFromMethod("channels", team.channels, serializeChannel);
    writer.writeStringValue("classification", team.classification);
    writer.writeDateValue("createdDateTime", team.createdDateTime);
    writer.writeStringValue("description", team.description);
    writer.writeObjectValueFromMethod("discoverySettings", team.discoverySettings, serializeTeamDiscoverySettings);
    writer.writeStringValue("displayName", team.displayName);
    writer.writeObjectValueFromMethod("funSettings", team.funSettings, serializeTeamFunSettings);
    writer.writeObjectValueFromMethod("group", team.group, serializeGroup);
    writer.writeObjectValueFromMethod("guestSettings", team.guestSettings, serializeTeamGuestSettings);
    writer.writeCollectionOfObjectValuesFromMethod("incomingChannels", team.incomingChannels, serializeChannel);
    writer.writeCollectionOfObjectValuesFromMethod("installedApps", team.installedApps, serializeTeamsAppInstallation);
    writer.writeStringValue("internalId", team.internalId);
    writer.writeBooleanValue("isArchived", team.isArchived);
    writer.writeBooleanValue("isMembershipLimitedToOwners", team.isMembershipLimitedToOwners);
    writer.writeCollectionOfObjectValuesFromMethod("members", team.members, serializeConversationMember);
    writer.writeObjectValueFromMethod("memberSettings", team.memberSettings, serializeTeamMemberSettings);
    writer.writeObjectValueFromMethod("messagingSettings", team.messagingSettings, serializeTeamMessagingSettings);
    writer.writeCollectionOfObjectValuesFromMethod("operations", team.operations, serializeTeamsAsyncOperation);
    writer.writeCollectionOfObjectValuesFromMethod("owners", team.owners, serializeUser);
    writer.writeCollectionOfObjectValuesFromMethod("permissionGrants", team.permissionGrants, serializeResourceSpecificPermissionGrant);
    writer.writeObjectValueFromMethod("photo", team.photo, serializeProfilePhoto);
    writer.writeObjectValueFromMethod("primaryChannel", team.primaryChannel, serializeChannel);
    writer.writeObjectValueFromMethod("schedule", team.schedule, serializeSchedule);
    writer.writeEnumValue("specialization", team.specialization);
    writer.writeObjectValueFromMethod("summary", team.summary, serializeTeamSummary);
    writer.writeCollectionOfObjectValuesFromMethod("tags", team.tags, serializeTeamworkTag);
    writer.writeObjectValueFromMethod("template", team.template, serializeTeamsTemplate);
    writer.writeObjectValueFromMethod("templateDefinition", team.templateDefinition, serializeTeamTemplateDefinition);
    writer.writeStringValue("tenantId", team.tenantId);
    writer.writeEnumValue("visibility", team.visibility);
    writer.writeStringValue("webUrl", team.webUrl);
}

function serializeGroup(writer, group = {}) {
    serializeDirectoryObject(writer, group);
    writer.writeCollectionOfObjectValuesFromMethod("acceptedSenders", group.acceptedSenders, serializeDirectoryObject);
    writer.writeEnumValue("accessType", group.accessType);
    writer.writeBooleanValue("allowExternalSenders", group.allowExternalSenders);
    writer.writeCollectionOfObjectValuesFromMethod("appRoleAssignments", group.appRoleAssignments, serializeAppRoleAssignment);
    writer.writeCollectionOfObjectValuesFromMethod("assignedLabels", group.assignedLabels, serializeAssignedLabel);
    writer.writeCollectionOfObjectValuesFromMethod("assignedLicenses", group.assignedLicenses, serializeAssignedLicense);
    writer.writeBooleanValue("autoSubscribeNewMembers", group.autoSubscribeNewMembers);
    writer.writeObjectValueFromMethod("calendar", group.calendar, serializeCalendar);
    writer.writeCollectionOfObjectValuesFromMethod("calendarView", group.calendarView, serializeEvent);
    writer.writeStringValue("classification", group.classification);
    writer.writeCollectionOfObjectValuesFromMethod("conversations", group.conversations, serializeConversation);
    writer.writeStringValue("createdByAppId", group.createdByAppId);
    writer.writeDateValue("createdDateTime", group.createdDateTime);
    writer.writeObjectValueFromMethod("createdOnBehalfOf", group.createdOnBehalfOf, serializeDirectoryObject);
    writer.writeStringValue("description", group.description);
    writer.writeStringValue("displayName", group.displayName);
    writer.writeObjectValueFromMethod("drive", group.drive, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("drives", group.drives, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("endpoints", group.endpoints, serializeEndpoint);
    writer.writeCollectionOfObjectValuesFromMethod("events", group.events, serializeEvent);
    writer.writeDateValue("expirationDateTime", group.expirationDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", group.extensions, serializeExtension);
    writer.writeCollectionOfObjectValuesFromMethod("groupLifecyclePolicies", group.groupLifecyclePolicies, serializeGroupLifecyclePolicy);
    writer.writeCollectionOfPrimitiveValues("groupTypes", group.groupTypes);
    writer.writeBooleanValue("hasMembersWithLicenseErrors", group.hasMembersWithLicenseErrors);
    writer.writeBooleanValue("hideFromAddressLists", group.hideFromAddressLists);
    writer.writeBooleanValue("hideFromOutlookClients", group.hideFromOutlookClients);
    writer.writeCollectionOfPrimitiveValues("infoCatalogs", group.infoCatalogs);
    writer.writeBooleanValue("isArchived", group.isArchived);
    writer.writeBooleanValue("isAssignableToRole", group.isAssignableToRole);
    writer.writeBooleanValue("isFavorite", group.isFavorite);
    writer.writeBooleanValue("isManagementRestricted", group.isManagementRestricted);
    writer.writeBooleanValue("isSubscribedByMail", group.isSubscribedByMail);
    writer.writeObjectValueFromMethod("licenseProcessingState", group.licenseProcessingState, serializeLicenseProcessingState);
    writer.writeStringValue("mail", group.mail);
    writer.writeBooleanValue("mailEnabled", group.mailEnabled);
    writer.writeStringValue("mailNickname", group.mailNickname);
    writer.writeCollectionOfObjectValuesFromMethod("memberOf", group.memberOf, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("members", group.members, serializeDirectoryObject);
    writer.writeStringValue("membershipRule", group.membershipRule);
    writer.writeStringValue("membershipRuleProcessingState", group.membershipRuleProcessingState);
    writer.writeObjectValueFromMethod("membershipRuleProcessingStatus", group.membershipRuleProcessingStatus, serializeMembershipRuleProcessingStatus);
    writer.writeCollectionOfObjectValuesFromMethod("membersWithLicenseErrors", group.membersWithLicenseErrors, serializeDirectoryObject);
    writer.writeObjectValueFromMethod("onenote", group.onenote, serializeOnenote);
    writer.writeStringValue("onPremisesDomainName", group.onPremisesDomainName);
    writer.writeDateValue("onPremisesLastSyncDateTime", group.onPremisesLastSyncDateTime);
    writer.writeStringValue("onPremisesNetBiosName", group.onPremisesNetBiosName);
    writer.writeCollectionOfObjectValuesFromMethod("onPremisesProvisioningErrors", group.onPremisesProvisioningErrors, serializeOnPremisesProvisioningError);
    writer.writeStringValue("onPremisesSamAccountName", group.onPremisesSamAccountName);
    writer.writeStringValue("onPremisesSecurityIdentifier", group.onPremisesSecurityIdentifier);
    writer.writeBooleanValue("onPremisesSyncEnabled", group.onPremisesSyncEnabled);
    writer.writeStringValue("organizationId", group.organizationId);
    writer.writeCollectionOfObjectValuesFromMethod("owners", group.owners, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("permissionGrants", group.permissionGrants, serializeResourceSpecificPermissionGrant);
    writer.writeObjectValueFromMethod("photo", group.photo, serializeProfilePhoto);
    writer.writeCollectionOfObjectValuesFromMethod("photos", group.photos, serializeProfilePhoto);
    writer.writeObjectValueFromMethod("planner", group.planner, serializePlannerGroup);
    writer.writeStringValue("preferredDataLocation", group.preferredDataLocation);
    writer.writeStringValue("preferredLanguage", group.preferredLanguage);
    writer.writeCollectionOfPrimitiveValues("proxyAddresses", group.proxyAddresses);
    writer.writeCollectionOfObjectValuesFromMethod("rejectedSenders", group.rejectedSenders, serializeDirectoryObject);
    writer.writeDateValue("renewedDateTime", group.renewedDateTime);
    writer.writeCollectionOfPrimitiveValues("resourceBehaviorOptions", group.resourceBehaviorOptions);
    writer.writeCollectionOfPrimitiveValues("resourceProvisioningOptions", group.resourceProvisioningOptions);
    writer.writeBooleanValue("securityEnabled", group.securityEnabled);
    writer.writeStringValue("securityIdentifier", group.securityIdentifier);
    writer.writeCollectionOfObjectValuesFromMethod("settings", group.settings, serializeDirectorySetting);
    writer.writeCollectionOfObjectValuesFromMethod("sites", group.sites, serializeSite);
    writer.writeObjectValueFromMethod("team", group.team, serializeTeam);
    writer.writeStringValue("theme", group.theme);
    writer.writeCollectionOfObjectValuesFromMethod("threads", group.threads, serializeConversationThread);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveMemberOf", group.transitiveMemberOf, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveMembers", group.transitiveMembers, serializeDirectoryObject);
    writer.writeNumberValue("unseenConversationsCount", group.unseenConversationsCount);
    writer.writeNumberValue("unseenCount", group.unseenCount);
    writer.writeNumberValue("unseenMessagesCount", group.unseenMessagesCount);
    writer.writeStringValue("visibility", group.visibility);
    writer.writeObjectValueFromMethod("writebackConfiguration", group.writebackConfiguration, serializeGroupWritebackConfiguration);
}

function serializeInferenceClassificationOverride(writer, inferenceClassificationOverride = {}) {
    serializeEntity(writer, inferenceClassificationOverride);
    writer.writeEnumValue("classifyAs", inferenceClassificationOverride.classifyAs);
    writer.writeObjectValueFromMethod("senderEmailAddress", inferenceClassificationOverride.senderEmailAddress, serializeEmailAddress);
}

function serializeInferenceClassification(writer, inferenceClassification = {}) {
    serializeEntity(writer, inferenceClassification);
    writer.writeCollectionOfObjectValuesFromMethod("overrides", inferenceClassification.overrides, serializeInferenceClassificationOverride);
}

function serializeBitlockerRecoveryKey(writer, bitlockerRecoveryKey = {}) {
    serializeEntity(writer, bitlockerRecoveryKey);
    writer.writeDateValue("createdDateTime", bitlockerRecoveryKey.createdDateTime);
    writer.writeStringValue("deviceId", bitlockerRecoveryKey.deviceId);
    writer.writeStringValue("key", bitlockerRecoveryKey.key);
    writer.writeEnumValue("volumeType", bitlockerRecoveryKey.volumeType);
}

function serializeBitlocker(writer, bitlocker = {}) {
    serializeEntity(writer, bitlocker);
    writer.writeCollectionOfObjectValuesFromMethod("recoveryKeys", bitlocker.recoveryKeys, serializeBitlockerRecoveryKey);
}

function serializeDataLossPreventionPolicy(writer, dataLossPreventionPolicy = {}) {
    serializeEntity(writer, dataLossPreventionPolicy);
    writer.writeStringValue("name", dataLossPreventionPolicy.name);
}

function serializeParentLabelDetails(writer, parentLabelDetails = {}) {
    writer.writeStringValue("color", parentLabelDetails.color);
    writer.writeStringValue("description", parentLabelDetails.description);
    writer.writeStringValue("id", parentLabelDetails.id);
    writer.writeBooleanValue("isActive", parentLabelDetails.isActive);
    writer.writeStringValue("name", parentLabelDetails.name);
    writer.writeObjectValueFromMethod("parent", parentLabelDetails.parent, serializeParentLabelDetails);
    writer.writeNumberValue("sensitivity", parentLabelDetails.sensitivity);
    writer.writeStringValue("tooltip", parentLabelDetails.tooltip);
}

function serializeInformationProtectionLabel(writer, informationProtectionLabel = {}) {
    serializeEntity(writer, informationProtectionLabel);
    writer.writeStringValue("color", informationProtectionLabel.color);
    writer.writeStringValue("description", informationProtectionLabel.description);
    writer.writeBooleanValue("isActive", informationProtectionLabel.isActive);
    writer.writeStringValue("name", informationProtectionLabel.name);
    writer.writeObjectValueFromMethod("parent", informationProtectionLabel.parent, serializeParentLabelDetails);
    writer.writeNumberValue("sensitivity", informationProtectionLabel.sensitivity);
    writer.writeStringValue("tooltip", informationProtectionLabel.tooltip);
}

function serializeInformationProtectionPolicy(writer, informationProtectionPolicy = {}) {
    serializeEntity(writer, informationProtectionPolicy);
    writer.writeCollectionOfObjectValuesFromMethod("labels", informationProtectionPolicy.labels, serializeInformationProtectionLabel);
}

function serializeAutoLabeling(writer, autoLabeling = {}) {
    writer.writeStringValue("message", autoLabeling.message);
    writer.writeCollectionOfPrimitiveValues("sensitiveTypeIds", autoLabeling.sensitiveTypeIds);
}

function serializeLabelActionBase(writer, labelActionBase = {}) {
    writer.writeStringValue("name", labelActionBase.name);
}

function serializeLabelPolicy(writer, labelPolicy = {}) {
    writer.writeStringValue("id", labelPolicy.id);
    writer.writeStringValue("name", labelPolicy.name);
}

function serializeSensitivityLabel(writer, sensitivityLabel = {}) {
    serializeEntity(writer, sensitivityLabel);
    writer.writeEnumValue("applicableTo", sensitivityLabel.applicableTo);
    writer.writeEnumValue("applicationMode", sensitivityLabel.applicationMode);
    writer.writeCollectionOfObjectValuesFromMethod("assignedPolicies", sensitivityLabel.assignedPolicies, serializeLabelPolicy);
    writer.writeObjectValueFromMethod("autoLabeling", sensitivityLabel.autoLabeling, serializeAutoLabeling);
    writer.writeStringValue("description", sensitivityLabel.description);
    writer.writeStringValue("displayName", sensitivityLabel.displayName);
    writer.writeBooleanValue("isDefault", sensitivityLabel.isDefault);
    writer.writeBooleanValue("isEndpointProtectionEnabled", sensitivityLabel.isEndpointProtectionEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("labelActions", sensitivityLabel.labelActions, serializeLabelActionBase);
    writer.writeStringValue("name", sensitivityLabel.name);
    writer.writeNumberValue("priority", sensitivityLabel.priority);
    writer.writeCollectionOfObjectValuesFromMethod("sublabels", sensitivityLabel.sublabels, serializeSensitivityLabel);
    writer.writeStringValue("toolTip", sensitivityLabel.toolTip);
}

function serializeSensitivityPolicySettings(writer, sensitivityPolicySettings = {}) {
    serializeEntity(writer, sensitivityPolicySettings);
    writer.writeEnumValue("applicableTo", sensitivityPolicySettings.applicableTo);
    writer.writeBooleanValue("downgradeSensitivityRequiresJustification", sensitivityPolicySettings.downgradeSensitivityRequiresJustification);
    writer.writeStringValue("helpWebUrl", sensitivityPolicySettings.helpWebUrl);
    writer.writeBooleanValue("isMandatory", sensitivityPolicySettings.isMandatory);
}

function serializeThreatAssessmentResult(writer, threatAssessmentResult = {}) {
    serializeEntity(writer, threatAssessmentResult);
    writer.writeDateValue("createdDateTime", threatAssessmentResult.createdDateTime);
    writer.writeStringValue("message", threatAssessmentResult.message);
    writer.writeEnumValue("resultType", threatAssessmentResult.resultType);
}

function serializeThreatAssessmentRequest(writer, threatAssessmentRequest = {}) {
    serializeEntity(writer, threatAssessmentRequest);
    writer.writeEnumValue("category", threatAssessmentRequest.category);
    writer.writeEnumValue("contentType", threatAssessmentRequest.contentType);
    writer.writeObjectValueFromMethod("createdBy", threatAssessmentRequest.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", threatAssessmentRequest.createdDateTime);
    writer.writeEnumValue("expectedAssessment", threatAssessmentRequest.expectedAssessment);
    writer.writeEnumValue("requestSource", threatAssessmentRequest.requestSource);
    writer.writeCollectionOfObjectValuesFromMethod("results", threatAssessmentRequest.results, serializeThreatAssessmentResult);
    writer.writeEnumValue("status", threatAssessmentRequest.status);
}

function serializeInformationProtection(writer, informationProtection = {}) {
    serializeEntity(writer, informationProtection);
    writer.writeObjectValueFromMethod("bitlocker", informationProtection.bitlocker, serializeBitlocker);
    writer.writeCollectionOfObjectValuesFromMethod("dataLossPreventionPolicies", informationProtection.dataLossPreventionPolicies, serializeDataLossPreventionPolicy);
    writer.writeObjectValueFromMethod("policy", informationProtection.policy, serializeInformationProtectionPolicy);
    writer.writeCollectionOfObjectValuesFromMethod("sensitivityLabels", informationProtection.sensitivityLabels, serializeSensitivityLabel);
    writer.writeObjectValueFromMethod("sensitivityPolicySettings", informationProtection.sensitivityPolicySettings, serializeSensitivityPolicySettings);
    writer.writeCollectionOfObjectValuesFromMethod("threatAssessmentRequests", informationProtection.threatAssessmentRequests, serializeThreatAssessmentRequest);
}

function serializeResourceReference(writer, resourceReference = {}) {
    writer.writeStringValue("id", resourceReference.id);
    writer.writeStringValue("type", resourceReference.type);
    writer.writeStringValue("webUrl", resourceReference.webUrl);
}

function serializeResourceVisualization(writer, resourceVisualization = {}) {
    writer.writeStringValue("containerDisplayName", resourceVisualization.containerDisplayName);
    writer.writeStringValue("containerType", resourceVisualization.containerType);
    writer.writeStringValue("containerWebUrl", resourceVisualization.containerWebUrl);
    writer.writeStringValue("mediaType", resourceVisualization.mediaType);
    writer.writeStringValue("previewImageUrl", resourceVisualization.previewImageUrl);
    writer.writeStringValue("previewText", resourceVisualization.previewText);
    writer.writeStringValue("title", resourceVisualization.title);
    writer.writeStringValue("type", resourceVisualization.type);
}

function serializeInsightIdentity(writer, insightIdentity = {}) {
    writer.writeStringValue("address", insightIdentity.address);
    writer.writeStringValue("displayName", insightIdentity.displayName);
    writer.writeStringValue("id", insightIdentity.id);
}

function serializeSharingDetail(writer, sharingDetail = {}) {
    writer.writeObjectValueFromMethod("sharedBy", sharingDetail.sharedBy, serializeInsightIdentity);
    writer.writeDateValue("sharedDateTime", sharingDetail.sharedDateTime);
    writer.writeObjectValueFromMethod("sharingReference", sharingDetail.sharingReference, serializeResourceReference);
    writer.writeStringValue("sharingSubject", sharingDetail.sharingSubject);
    writer.writeStringValue("sharingType", sharingDetail.sharingType);
}

function serializeSharedInsight(writer, sharedInsight = {}) {
    serializeEntity(writer, sharedInsight);
    writer.writeObjectValueFromMethod("lastShared", sharedInsight.lastShared, serializeSharingDetail);
    writer.writeObjectValueFromMethod("lastSharedMethod", sharedInsight.lastSharedMethod, serializeEntity);
    writer.writeObjectValueFromMethod("resource", sharedInsight.resource, serializeEntity);
    writer.writeObjectValueFromMethod("resourceReference", sharedInsight.resourceReference, serializeResourceReference);
    writer.writeObjectValueFromMethod("resourceVisualization", sharedInsight.resourceVisualization, serializeResourceVisualization);
    writer.writeCollectionOfObjectValuesFromMethod("sharingHistory", sharedInsight.sharingHistory, serializeSharingDetail);
}

function serializeTrending(writer, trending = {}) {
    serializeEntity(writer, trending);
    writer.writeDateValue("lastModifiedDateTime", trending.lastModifiedDateTime);
    writer.writeObjectValueFromMethod("resource", trending.resource, serializeEntity);
    writer.writeObjectValueFromMethod("resourceReference", trending.resourceReference, serializeResourceReference);
    writer.writeObjectValueFromMethod("resourceVisualization", trending.resourceVisualization, serializeResourceVisualization);
    writer.writeNumberValue("weight", trending.weight);
}

function serializeUsageDetails(writer, usageDetails = {}) {
    writer.writeDateValue("lastAccessedDateTime", usageDetails.lastAccessedDateTime);
    writer.writeDateValue("lastModifiedDateTime", usageDetails.lastModifiedDateTime);
}

function serializeUsedInsight(writer, usedInsight = {}) {
    serializeEntity(writer, usedInsight);
    writer.writeObjectValueFromMethod("lastUsed", usedInsight.lastUsed, serializeUsageDetails);
    writer.writeObjectValueFromMethod("resource", usedInsight.resource, serializeEntity);
    writer.writeObjectValueFromMethod("resourceReference", usedInsight.resourceReference, serializeResourceReference);
    writer.writeObjectValueFromMethod("resourceVisualization", usedInsight.resourceVisualization, serializeResourceVisualization);
}

function serializeOfficeGraphInsights(writer, officeGraphInsights = {}) {
    serializeEntity(writer, officeGraphInsights);
    writer.writeCollectionOfObjectValuesFromMethod("shared", officeGraphInsights.shared, serializeSharedInsight);
    writer.writeCollectionOfObjectValuesFromMethod("trending", officeGraphInsights.trending, serializeTrending);
    writer.writeCollectionOfObjectValuesFromMethod("used", officeGraphInsights.used, serializeUsedInsight);
}

function serializeItemInsights(writer, itemInsights = {}) {
    serializeOfficeGraphInsights(writer, itemInsights);
}

function serializeLicenseAssignmentState(writer, licenseAssignmentState = {}) {
    writer.writeStringValue("assignedByGroup", licenseAssignmentState.assignedByGroup);
    writer.writeCollectionOfPrimitiveValues("disabledPlans", licenseAssignmentState.disabledPlans);
    writer.writeStringValue("error", licenseAssignmentState.error_escaped);
    writer.writeDateValue("lastUpdatedDateTime", licenseAssignmentState.lastUpdatedDateTime);
    writer.writeStringValue("skuId", licenseAssignmentState.skuId);
    writer.writeStringValue("state", licenseAssignmentState.state);
}

function serializeServicePlanInfo(writer, servicePlanInfo = {}) {
    writer.writeStringValue("appliesTo", servicePlanInfo.appliesTo);
    writer.writeStringValue("provisioningStatus", servicePlanInfo.provisioningStatus);
    writer.writeStringValue("servicePlanId", servicePlanInfo.servicePlanId);
    writer.writeStringValue("servicePlanName", servicePlanInfo.servicePlanName);
}

function serializeLicenseDetails(writer, licenseDetails = {}) {
    serializeEntity(writer, licenseDetails);
    writer.writeCollectionOfObjectValuesFromMethod("servicePlans", licenseDetails.servicePlans, serializeServicePlanInfo);
    writer.writeStringValue("skuId", licenseDetails.skuId);
    writer.writeStringValue("skuPartNumber", licenseDetails.skuPartNumber);
}

function serializeAutomaticRepliesSetting(writer, automaticRepliesSetting = {}) {
    writer.writeEnumValue("externalAudience", automaticRepliesSetting.externalAudience);
    writer.writeStringValue("externalReplyMessage", automaticRepliesSetting.externalReplyMessage);
    writer.writeStringValue("internalReplyMessage", automaticRepliesSetting.internalReplyMessage);
    writer.writeObjectValueFromMethod("scheduledEndDateTime", automaticRepliesSetting.scheduledEndDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValueFromMethod("scheduledStartDateTime", automaticRepliesSetting.scheduledStartDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue("status", automaticRepliesSetting.status);
}

function serializeLocaleInfo(writer, localeInfo = {}) {
    writer.writeStringValue("displayName", localeInfo.displayName);
    writer.writeStringValue("locale", localeInfo.locale);
}

function serializeTimeZoneBase(writer, timeZoneBase = {}) {
    writer.writeStringValue("name", timeZoneBase.name);
}

function serializeWorkingHours(writer, workingHours = {}) {
    // writer.writeEnumValue<DayOfWeek>("daysOfWeek", workingHours.daysOfWeek);
    writer.writeTimeOnlyValue("endTime", workingHours.endTime);
    writer.writeTimeOnlyValue("startTime", workingHours.startTime);
    writer.writeObjectValueFromMethod("timeZone", workingHours.timeZone, serializeTimeZoneBase);
}

function serializeMailboxSettings(writer, mailboxSettings = {}) {
    writer.writeStringValue("archiveFolder", mailboxSettings.archiveFolder);
    writer.writeObjectValueFromMethod("automaticRepliesSetting", mailboxSettings.automaticRepliesSetting, serializeAutomaticRepliesSetting);
    writer.writeStringValue("dateFormat", mailboxSettings.dateFormat);
    writer.writeEnumValue("delegateMeetingMessageDeliveryOptions", mailboxSettings.delegateMeetingMessageDeliveryOptions);
    writer.writeObjectValueFromMethod("language", mailboxSettings.language, serializeLocaleInfo);
    writer.writeStringValue("timeFormat", mailboxSettings.timeFormat);
    writer.writeStringValue("timeZone", mailboxSettings.timeZone);
    writer.writeEnumValue("userPurpose", mailboxSettings.userPurpose);
    writer.writeEnumValue("userPurposeV2", mailboxSettings.userPurposeV2);
    writer.writeObjectValueFromMethod("workingHours", mailboxSettings.workingHours, serializeWorkingHours);
}

function serializeInternetMessageHeader(writer, internetMessageHeader = {}) {
    writer.writeStringValue("name", internetMessageHeader.name);
    writer.writeStringValue("value", internetMessageHeader.value);
}

function serializeMentionsPreview(writer, mentionsPreview = {}) {
    writer.writeBooleanValue("isMentioned", mentionsPreview.isMentioned);
}

function serializeMessage(writer, message = {}) {
    serializeOutlookItem(writer, message);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", message.attachments, serializeAttachment);
    writer.writeCollectionOfObjectValuesFromMethod("bccRecipients", message.bccRecipients, serializeRecipient);
    writer.writeObjectValueFromMethod("body", message.body, serializeItemBody);
    writer.writeStringValue("bodyPreview", message.bodyPreview);
    writer.writeCollectionOfObjectValuesFromMethod("ccRecipients", message.ccRecipients, serializeRecipient);
    writer.writeStringValue("conversationId", message.conversationId);
    writer.writeStringValue("conversationIndex", message.conversationIndex);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", message.extensions, serializeExtension);
    writer.writeObjectValueFromMethod("flag", message.flag, serializeFollowupFlag);
    writer.writeObjectValueFromMethod("from", message.from, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", message.hasAttachments);
    writer.writeEnumValue("importance", message.importance);
    writer.writeEnumValue("inferenceClassification", message.inferenceClassification);
    writer.writeCollectionOfObjectValuesFromMethod("internetMessageHeaders", message.internetMessageHeaders, serializeInternetMessageHeader);
    writer.writeStringValue("internetMessageId", message.internetMessageId);
    writer.writeBooleanValue("isDeliveryReceiptRequested", message.isDeliveryReceiptRequested);
    writer.writeBooleanValue("isDraft", message.isDraft);
    writer.writeBooleanValue("isRead", message.isRead);
    writer.writeBooleanValue("isReadReceiptRequested", message.isReadReceiptRequested);
    writer.writeCollectionOfObjectValuesFromMethod("mentions", message.mentions, serializeMention);
    writer.writeObjectValueFromMethod("mentionsPreview", message.mentionsPreview, serializeMentionsPreview);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", message.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", message.parentFolderId);
    writer.writeDateValue("receivedDateTime", message.receivedDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("replyTo", message.replyTo, serializeRecipient);
    writer.writeObjectValueFromMethod("sender", message.sender, serializeRecipient);
    writer.writeDateValue("sentDateTime", message.sentDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", message.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeStringValue("subject", message.subject);
    writer.writeCollectionOfObjectValuesFromMethod("toRecipients", message.toRecipients, serializeRecipient);
    writer.writeObjectValueFromMethod("uniqueBody", message.uniqueBody, serializeItemBody);
    writer.writeCollectionOfPrimitiveValues("unsubscribeData", message.unsubscribeData);
    writer.writeBooleanValue("unsubscribeEnabled", message.unsubscribeEnabled);
    writer.writeStringValue("webLink", message.webLink);
}

function serializeMessageRuleActions(writer, messageRuleActions = {}) {
    writer.writeCollectionOfPrimitiveValues("assignCategories", messageRuleActions.assignCategories);
    writer.writeStringValue("copyToFolder", messageRuleActions.copyToFolder);
    writer.writeBooleanValue("delete", messageRuleActions.delete);
    writer.writeCollectionOfObjectValuesFromMethod("forwardAsAttachmentTo", messageRuleActions.forwardAsAttachmentTo, serializeRecipient);
    writer.writeCollectionOfObjectValuesFromMethod("forwardTo", messageRuleActions.forwardTo, serializeRecipient);
    writer.writeBooleanValue("markAsRead", messageRuleActions.markAsRead);
    writer.writeEnumValue("markImportance", messageRuleActions.markImportance);
    writer.writeStringValue("moveToFolder", messageRuleActions.moveToFolder);
    writer.writeBooleanValue("permanentDelete", messageRuleActions.permanentDelete);
    writer.writeCollectionOfObjectValuesFromMethod("redirectTo", messageRuleActions.redirectTo, serializeRecipient);
    writer.writeBooleanValue("stopProcessingRules", messageRuleActions.stopProcessingRules);
}

function serializeSizeRange(writer, sizeRange = {}) {
    writer.writeNumberValue("maximumSize", sizeRange.maximumSize);
    writer.writeNumberValue("minimumSize", sizeRange.minimumSize);
}

function serializeMessageRulePredicates(writer, messageRulePredicates = {}) {
    writer.writeCollectionOfPrimitiveValues("bodyContains", messageRulePredicates.bodyContains);
    writer.writeCollectionOfPrimitiveValues("bodyOrSubjectContains", messageRulePredicates.bodyOrSubjectContains);
    writer.writeCollectionOfPrimitiveValues("categories", messageRulePredicates.categories);
    writer.writeCollectionOfObjectValuesFromMethod("fromAddresses", messageRulePredicates.fromAddresses, serializeRecipient);
    writer.writeBooleanValue("hasAttachments", messageRulePredicates.hasAttachments);
    writer.writeCollectionOfPrimitiveValues("headerContains", messageRulePredicates.headerContains);
    writer.writeEnumValue("importance", messageRulePredicates.importance);
    writer.writeBooleanValue("isApprovalRequest", messageRulePredicates.isApprovalRequest);
    writer.writeBooleanValue("isAutomaticForward", messageRulePredicates.isAutomaticForward);
    writer.writeBooleanValue("isAutomaticReply", messageRulePredicates.isAutomaticReply);
    writer.writeBooleanValue("isEncrypted", messageRulePredicates.isEncrypted);
    writer.writeBooleanValue("isMeetingRequest", messageRulePredicates.isMeetingRequest);
    writer.writeBooleanValue("isMeetingResponse", messageRulePredicates.isMeetingResponse);
    writer.writeBooleanValue("isNonDeliveryReport", messageRulePredicates.isNonDeliveryReport);
    writer.writeBooleanValue("isPermissionControlled", messageRulePredicates.isPermissionControlled);
    writer.writeBooleanValue("isReadReceipt", messageRulePredicates.isReadReceipt);
    writer.writeBooleanValue("isSigned", messageRulePredicates.isSigned);
    writer.writeBooleanValue("isVoicemail", messageRulePredicates.isVoicemail);
    writer.writeEnumValue("messageActionFlag", messageRulePredicates.messageActionFlag);
    writer.writeBooleanValue("notSentToMe", messageRulePredicates.notSentToMe);
    writer.writeCollectionOfPrimitiveValues("recipientContains", messageRulePredicates.recipientContains);
    writer.writeCollectionOfPrimitiveValues("senderContains", messageRulePredicates.senderContains);
    writer.writeEnumValue("sensitivity", messageRulePredicates.sensitivity);
    writer.writeBooleanValue("sentCcMe", messageRulePredicates.sentCcMe);
    writer.writeBooleanValue("sentOnlyToMe", messageRulePredicates.sentOnlyToMe);
    writer.writeCollectionOfObjectValuesFromMethod("sentToAddresses", messageRulePredicates.sentToAddresses, serializeRecipient);
    writer.writeBooleanValue("sentToMe", messageRulePredicates.sentToMe);
    writer.writeBooleanValue("sentToOrCcMe", messageRulePredicates.sentToOrCcMe);
    writer.writeCollectionOfPrimitiveValues("subjectContains", messageRulePredicates.subjectContains);
    writer.writeObjectValueFromMethod("withinSizeRange", messageRulePredicates.withinSizeRange, serializeSizeRange);
}

function serializeMessageRule(writer, messageRule = {}) {
    serializeEntity(writer, messageRule);
    writer.writeObjectValueFromMethod("actions", messageRule.actions, serializeMessageRuleActions);
    writer.writeObjectValueFromMethod("conditions", messageRule.conditions, serializeMessageRulePredicates);
    writer.writeStringValue("displayName", messageRule.displayName);
    writer.writeObjectValueFromMethod("exceptions", messageRule.exceptions, serializeMessageRulePredicates);
    writer.writeBooleanValue("hasError", messageRule.hasError);
    writer.writeBooleanValue("isEnabled", messageRule.isEnabled);
    writer.writeBooleanValue("isReadOnly", messageRule.isReadOnly);
    writer.writeNumberValue("sequence", messageRule.sequence);
}

function serializeUserConfiguration(writer, userConfiguration = {}) {
    serializeEntity(writer, userConfiguration);
    writer.writeStringValue("binaryData", userConfiguration.binaryData);
}

function serializeMailFolder(writer, mailFolder = {}) {
    serializeEntity(writer, mailFolder);
    writer.writeNumberValue("childFolderCount", mailFolder.childFolderCount);
    writer.writeCollectionOfObjectValuesFromMethod("childFolders", mailFolder.childFolders, serializeMailFolder);
    writer.writeStringValue("displayName", mailFolder.displayName);
    writer.writeBooleanValue("isHidden", mailFolder.isHidden);
    writer.writeCollectionOfObjectValuesFromMethod("messageRules", mailFolder.messageRules, serializeMessageRule);
    writer.writeCollectionOfObjectValuesFromMethod("messages", mailFolder.messages, serializeMessage);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", mailFolder.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", mailFolder.parentFolderId);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", mailFolder.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeNumberValue("totalItemCount", mailFolder.totalItemCount);
    writer.writeNumberValue("unreadItemCount", mailFolder.unreadItemCount);
    writer.writeCollectionOfObjectValuesFromMethod("userConfigurations", mailFolder.userConfigurations, serializeUserConfiguration);
    writer.writeStringValue("wellKnownName", mailFolder.wellKnownName);
}

function serializeManagedAppOperation(writer, managedAppOperation = {}) {
    serializeEntity(writer, managedAppOperation);
    writer.writeStringValue("displayName", managedAppOperation.displayName);
    writer.writeDateValue("lastModifiedDateTime", managedAppOperation.lastModifiedDateTime);
    writer.writeStringValue("state", managedAppOperation.state);
    writer.writeStringValue("version", managedAppOperation.version);
}

function serializeManagedAppPolicy(writer, managedAppPolicy = {}) {
    serializeEntity(writer, managedAppPolicy);
    writer.writeDateValue("createdDateTime", managedAppPolicy.createdDateTime);
    writer.writeStringValue("description", managedAppPolicy.description);
    writer.writeStringValue("displayName", managedAppPolicy.displayName);
    writer.writeDateValue("lastModifiedDateTime", managedAppPolicy.lastModifiedDateTime);
    writer.writeCollectionOfPrimitiveValues("roleScopeTagIds", managedAppPolicy.roleScopeTagIds);
    writer.writeStringValue("version", managedAppPolicy.version);
}

function serializeMobileAppIdentifier(writer, mobileAppIdentifier = {}) {
}

function serializeManagedAppRegistration(writer, managedAppRegistration = {}) {
    serializeEntity(writer, managedAppRegistration);
    writer.writeObjectValueFromMethod("appIdentifier", managedAppRegistration.appIdentifier, serializeMobileAppIdentifier);
    writer.writeStringValue("applicationVersion", managedAppRegistration.applicationVersion);
    writer.writeCollectionOfObjectValuesFromMethod("appliedPolicies", managedAppRegistration.appliedPolicies, serializeManagedAppPolicy);
    writer.writeStringValue("azureADDeviceId", managedAppRegistration.azureADDeviceId);
    writer.writeDateValue("createdDateTime", managedAppRegistration.createdDateTime);
    writer.writeStringValue("deviceManufacturer", managedAppRegistration.deviceManufacturer);
    writer.writeStringValue("deviceModel", managedAppRegistration.deviceModel);
    writer.writeStringValue("deviceName", managedAppRegistration.deviceName);
    writer.writeStringValue("deviceTag", managedAppRegistration.deviceTag);
    writer.writeStringValue("deviceType", managedAppRegistration.deviceType);
    //writer.writeEnumValue<ManagedAppFlaggedReason>("flaggedReasons", managedAppRegistration.flaggedReasons);
    writer.writeCollectionOfObjectValuesFromMethod("intendedPolicies", managedAppRegistration.intendedPolicies, serializeManagedAppPolicy);
    writer.writeDateValue("lastSyncDateTime", managedAppRegistration.lastSyncDateTime);
    writer.writeStringValue("managedDeviceId", managedAppRegistration.managedDeviceId);
    writer.writeStringValue("managementSdkVersion", managedAppRegistration.managementSdkVersion);
    writer.writeCollectionOfObjectValuesFromMethod("operations", managedAppRegistration.operations, serializeManagedAppOperation);
    writer.writeStringValue("platformVersion", managedAppRegistration.platformVersion);
    writer.writeStringValue("userId", managedAppRegistration.userId);
    writer.writeStringValue("version", managedAppRegistration.version);
}

function serializeAssignmentFilterEvaluationStatusDetails(writer, assignmentFilterEvaluationStatusDetails = {}) {
    serializeEntity(writer, assignmentFilterEvaluationStatusDetails);
    writer.writeStringValue("payloadId", assignmentFilterEvaluationStatusDetails.payloadId);
}

function serializeChromeOSDeviceProperty(writer, chromeOSDeviceProperty = {}) {
    writer.writeStringValue("name", chromeOSDeviceProperty.name);
    writer.writeBooleanValue("updatable", chromeOSDeviceProperty.updatable);
    writer.writeStringValue("value", chromeOSDeviceProperty.value);
    writer.writeStringValue("valueType", chromeOSDeviceProperty.valueType);
}

function serializeConfigurationManagerClientEnabledFeatures(writer, configurationManagerClientEnabledFeatures = {}) {
    writer.writeBooleanValue("compliancePolicy", configurationManagerClientEnabledFeatures.compliancePolicy);
    writer.writeBooleanValue("deviceConfiguration", configurationManagerClientEnabledFeatures.deviceConfiguration);
    writer.writeBooleanValue("endpointProtection", configurationManagerClientEnabledFeatures.endpointProtection);
    writer.writeBooleanValue("inventory", configurationManagerClientEnabledFeatures.inventory);
    writer.writeBooleanValue("modernApps", configurationManagerClientEnabledFeatures.modernApps);
    writer.writeBooleanValue("officeApps", configurationManagerClientEnabledFeatures.officeApps);
    writer.writeBooleanValue("resourceAccess", configurationManagerClientEnabledFeatures.resourceAccess);
    writer.writeBooleanValue("windowsUpdateForBusiness", configurationManagerClientEnabledFeatures.windowsUpdateForBusiness);
}

function serializeConfigurationManagerClientHealthState(writer, configurationManagerClientHealthState = {}) {
    writer.writeNumberValue("errorCode", configurationManagerClientHealthState.errorCode);
    writer.writeDateValue("lastSyncDateTime", configurationManagerClientHealthState.lastSyncDateTime);
    writer.writeEnumValue("state", configurationManagerClientHealthState.state);
}

function serializeConfigurationManagerClientInformation(writer, configurationManagerClientInformation = {}) {
    writer.writeStringValue("clientIdentifier", configurationManagerClientInformation.clientIdentifier);
    writer.writeStringValue("clientVersion", configurationManagerClientInformation.clientVersion);
    writer.writeBooleanValue("isBlocked", configurationManagerClientInformation.isBlocked);
}

function serializeDetectedApp(writer, detectedApp = {}) {
    serializeEntity(writer, detectedApp);
    writer.writeNumberValue("deviceCount", detectedApp.deviceCount);
    writer.writeStringValue("displayName", detectedApp.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("managedDevices", detectedApp.managedDevices, serializeManagedDevice);
    writer.writeEnumValue("platform", detectedApp.platform);
    writer.writeStringValue("publisher", detectedApp.publisher);
    writer.writeNumberValue("sizeInByte", detectedApp.sizeInByte);
    writer.writeStringValue("version", detectedApp.version);
}

function serializeDeviceActionResult(writer, deviceActionResult = {}) {
    writer.writeStringValue("actionName", deviceActionResult.actionName);
    writer.writeEnumValue("actionState", deviceActionResult.actionState);
    writer.writeDateValue("lastUpdatedDateTime", deviceActionResult.lastUpdatedDateTime);
    writer.writeDateValue("startDateTime", deviceActionResult.startDateTime);
}

function serializeDeviceCategory(writer, deviceCategory = {}) {
    serializeEntity(writer, deviceCategory);
    writer.writeStringValue("description", deviceCategory.description);
    writer.writeStringValue("displayName", deviceCategory.displayName);
    writer.writeCollectionOfPrimitiveValues("roleScopeTagIds", deviceCategory.roleScopeTagIds);
}

function serializeSettingSource(writer, settingSource = {}) {
    writer.writeStringValue("displayName", settingSource.displayName);
    writer.writeStringValue("id", settingSource.id);
    writer.writeEnumValue("sourceType", settingSource.sourceType);
}

function serializeDeviceCompliancePolicySettingState(writer, deviceCompliancePolicySettingState = {}) {
    writer.writeStringValue("currentValue", deviceCompliancePolicySettingState.currentValue);
    writer.writeNumberValue("errorCode", deviceCompliancePolicySettingState.errorCode);
    writer.writeStringValue("errorDescription", deviceCompliancePolicySettingState.errorDescription);
    writer.writeStringValue("instanceDisplayName", deviceCompliancePolicySettingState.instanceDisplayName);
    writer.writeStringValue("setting", deviceCompliancePolicySettingState.setting);
    writer.writeStringValue("settingInstanceId", deviceCompliancePolicySettingState.settingInstanceId);
    writer.writeStringValue("settingName", deviceCompliancePolicySettingState.settingName);
    writer.writeCollectionOfObjectValuesFromMethod("sources", deviceCompliancePolicySettingState.sources, serializeSettingSource);
    writer.writeEnumValue("state", deviceCompliancePolicySettingState.state);
    writer.writeStringValue("userEmail", deviceCompliancePolicySettingState.userEmail);
    writer.writeStringValue("userId", deviceCompliancePolicySettingState.userId);
    writer.writeStringValue("userName", deviceCompliancePolicySettingState.userName);
    writer.writeStringValue("userPrincipalName", deviceCompliancePolicySettingState.userPrincipalName);
}

function serializeDeviceCompliancePolicyState(writer, deviceCompliancePolicyState = {}) {
    serializeEntity(writer, deviceCompliancePolicyState);
    writer.writeStringValue("displayName", deviceCompliancePolicyState.displayName);
    writer.writeEnumValue("platformType", deviceCompliancePolicyState.platformType);
    writer.writeNumberValue("settingCount", deviceCompliancePolicyState.settingCount);
    writer.writeCollectionOfObjectValuesFromMethod("settingStates", deviceCompliancePolicyState.settingStates, serializeDeviceCompliancePolicySettingState);
    writer.writeEnumValue("state", deviceCompliancePolicyState.state);
    writer.writeStringValue("userId", deviceCompliancePolicyState.userId);
    writer.writeStringValue("userPrincipalName", deviceCompliancePolicyState.userPrincipalName);
    writer.writeNumberValue("version", deviceCompliancePolicyState.version);
}

function serializeDeviceConfigurationSettingState(writer, deviceConfigurationSettingState = {}) {
    writer.writeStringValue("currentValue", deviceConfigurationSettingState.currentValue);
    writer.writeNumberValue("errorCode", deviceConfigurationSettingState.errorCode);
    writer.writeStringValue("errorDescription", deviceConfigurationSettingState.errorDescription);
    writer.writeStringValue("instanceDisplayName", deviceConfigurationSettingState.instanceDisplayName);
    writer.writeStringValue("setting", deviceConfigurationSettingState.setting);
    writer.writeStringValue("settingInstanceId", deviceConfigurationSettingState.settingInstanceId);
    writer.writeStringValue("settingName", deviceConfigurationSettingState.settingName);
    writer.writeCollectionOfObjectValuesFromMethod("sources", deviceConfigurationSettingState.sources, serializeSettingSource);
    writer.writeEnumValue("state", deviceConfigurationSettingState.state);
    writer.writeStringValue("userEmail", deviceConfigurationSettingState.userEmail);
    writer.writeStringValue("userId", deviceConfigurationSettingState.userId);
    writer.writeStringValue("userName", deviceConfigurationSettingState.userName);
    writer.writeStringValue("userPrincipalName", deviceConfigurationSettingState.userPrincipalName);
}

function serializeDeviceConfigurationState(writer, deviceConfigurationState = {}) {
    serializeEntity(writer, deviceConfigurationState);
    writer.writeStringValue("displayName", deviceConfigurationState.displayName);
    writer.writeEnumValue("platformType", deviceConfigurationState.platformType);
    writer.writeNumberValue("settingCount", deviceConfigurationState.settingCount);
    writer.writeCollectionOfObjectValuesFromMethod("settingStates", deviceConfigurationState.settingStates, serializeDeviceConfigurationSettingState);
    writer.writeEnumValue("state", deviceConfigurationState.state);
    writer.writeStringValue("userId", deviceConfigurationState.userId);
    writer.writeStringValue("userPrincipalName", deviceConfigurationState.userPrincipalName);
    writer.writeNumberValue("version", deviceConfigurationState.version);
}

function serializeDeviceHealthAttestationState(writer, deviceHealthAttestationState = {}) {
    writer.writeStringValue("attestationIdentityKey", deviceHealthAttestationState.attestationIdentityKey);
    writer.writeStringValue("bitLockerStatus", deviceHealthAttestationState.bitLockerStatus);
    writer.writeStringValue("bootAppSecurityVersion", deviceHealthAttestationState.bootAppSecurityVersion);
    writer.writeStringValue("bootDebugging", deviceHealthAttestationState.bootDebugging);
    writer.writeStringValue("bootManagerSecurityVersion", deviceHealthAttestationState.bootManagerSecurityVersion);
    writer.writeStringValue("bootManagerVersion", deviceHealthAttestationState.bootManagerVersion);
    writer.writeStringValue("bootRevisionListInfo", deviceHealthAttestationState.bootRevisionListInfo);
    writer.writeStringValue("codeIntegrity", deviceHealthAttestationState.codeIntegrity);
    writer.writeStringValue("codeIntegrityCheckVersion", deviceHealthAttestationState.codeIntegrityCheckVersion);
    writer.writeStringValue("codeIntegrityPolicy", deviceHealthAttestationState.codeIntegrityPolicy);
    writer.writeStringValue("contentNamespaceUrl", deviceHealthAttestationState.contentNamespaceUrl);
    writer.writeStringValue("contentVersion", deviceHealthAttestationState.contentVersion);
    writer.writeStringValue("dataExcutionPolicy", deviceHealthAttestationState.dataExcutionPolicy);
    writer.writeStringValue("deviceHealthAttestationStatus", deviceHealthAttestationState.deviceHealthAttestationStatus);
    writer.writeStringValue("earlyLaunchAntiMalwareDriverProtection", deviceHealthAttestationState.earlyLaunchAntiMalwareDriverProtection);
    writer.writeStringValue("healthAttestationSupportedStatus", deviceHealthAttestationState.healthAttestationSupportedStatus);
    writer.writeStringValue("healthStatusMismatchInfo", deviceHealthAttestationState.healthStatusMismatchInfo);
    writer.writeDateValue("issuedDateTime", deviceHealthAttestationState.issuedDateTime);
    writer.writeStringValue("lastUpdateDateTime", deviceHealthAttestationState.lastUpdateDateTime);
    writer.writeStringValue("operatingSystemKernelDebugging", deviceHealthAttestationState.operatingSystemKernelDebugging);
    writer.writeStringValue("operatingSystemRevListInfo", deviceHealthAttestationState.operatingSystemRevListInfo);
    writer.writeStringValue("pcr0", deviceHealthAttestationState.pcr0);
    writer.writeStringValue("pcrHashAlgorithm", deviceHealthAttestationState.pcrHashAlgorithm);
    writer.writeNumberValue("resetCount", deviceHealthAttestationState.resetCount);
    writer.writeNumberValue("restartCount", deviceHealthAttestationState.restartCount);
    writer.writeStringValue("safeMode", deviceHealthAttestationState.safeMode);
    writer.writeStringValue("secureBoot", deviceHealthAttestationState.secureBoot);
    writer.writeStringValue("secureBootConfigurationPolicyFingerPrint", deviceHealthAttestationState.secureBootConfigurationPolicyFingerPrint);
    writer.writeStringValue("testSigning", deviceHealthAttestationState.testSigning);
    writer.writeStringValue("tpmVersion", deviceHealthAttestationState.tpmVersion);
    writer.writeStringValue("virtualSecureMode", deviceHealthAttestationState.virtualSecureMode);
    writer.writeStringValue("windowsPE", deviceHealthAttestationState.windowsPE);
}

function serializeDeviceLogCollectionResponse(writer, deviceLogCollectionResponse = {}) {
    serializeEntity(writer, deviceLogCollectionResponse);
    writer.writeStringValue("enrolledByUser", deviceLogCollectionResponse.enrolledByUser);
    writer.writeNumberValue("errorCode", deviceLogCollectionResponse.errorCode);
    writer.writeDateValue("expirationDateTimeUTC", deviceLogCollectionResponse.expirationDateTimeUTC);
    writer.writeStringValue("initiatedByUserPrincipalName", deviceLogCollectionResponse.initiatedByUserPrincipalName);
    writer.writeStringValue("managedDeviceId", deviceLogCollectionResponse.managedDeviceId);
    writer.writeDateValue("receivedDateTimeUTC", deviceLogCollectionResponse.receivedDateTimeUTC);
    writer.writeDateValue("requestedDateTimeUTC", deviceLogCollectionResponse.requestedDateTimeUTC);
    writer.writeNumberValue("size", deviceLogCollectionResponse.size);
    writer.writeStringValue("status", deviceLogCollectionResponse.status);
}

function serializeSharedAppleDeviceUser(writer, sharedAppleDeviceUser = {}) {
    writer.writeNumberValue("dataQuota", sharedAppleDeviceUser.dataQuota);
    writer.writeBooleanValue("dataToSync", sharedAppleDeviceUser.dataToSync);
    writer.writeNumberValue("dataUsed", sharedAppleDeviceUser.dataUsed);
    writer.writeStringValue("userPrincipalName", sharedAppleDeviceUser.userPrincipalName);
}

function serializeHardwareInformation(writer, hardwareInformation = {}) {
    writer.writeNumberValue("batteryChargeCycles", hardwareInformation.batteryChargeCycles);
    writer.writeNumberValue("batteryHealthPercentage", hardwareInformation.batteryHealthPercentage);
    writer.writeNumberValue("batteryLevelPercentage", hardwareInformation.batteryLevelPercentage);
    writer.writeStringValue("batterySerialNumber", hardwareInformation.batterySerialNumber);
    writer.writeStringValue("cellularTechnology", hardwareInformation.cellularTechnology);
    writer.writeStringValue("deviceFullQualifiedDomainName", hardwareInformation.deviceFullQualifiedDomainName);
    writer.writeEnumValue("deviceGuardLocalSystemAuthorityCredentialGuardState", hardwareInformation.deviceGuardLocalSystemAuthorityCredentialGuardState);
    writer.writeEnumValue("deviceGuardVirtualizationBasedSecurityHardwareRequirementState", hardwareInformation.deviceGuardVirtualizationBasedSecurityHardwareRequirementState);
    writer.writeEnumValue("deviceGuardVirtualizationBasedSecurityState", hardwareInformation.deviceGuardVirtualizationBasedSecurityState);
    writer.writeNumberValue("deviceLicensingLastErrorCode", hardwareInformation.deviceLicensingLastErrorCode);
    writer.writeStringValue("deviceLicensingLastErrorDescription", hardwareInformation.deviceLicensingLastErrorDescription);
    writer.writeEnumValue("deviceLicensingStatus", hardwareInformation.deviceLicensingStatus);
    writer.writeStringValue("esimIdentifier", hardwareInformation.esimIdentifier);
    writer.writeNumberValue("freeStorageSpace", hardwareInformation.freeStorageSpace);
    writer.writeStringValue("imei", hardwareInformation.imei);
    writer.writeStringValue("ipAddressV4", hardwareInformation.ipAddressV4);
    writer.writeBooleanValue("isEncrypted", hardwareInformation.isEncrypted);
    writer.writeBooleanValue("isSharedDevice", hardwareInformation.isSharedDevice);
    writer.writeBooleanValue("isSupervised", hardwareInformation.isSupervised);
    writer.writeStringValue("manufacturer", hardwareInformation.manufacturer);
    writer.writeStringValue("meid", hardwareInformation.meid);
    writer.writeStringValue("model", hardwareInformation.model);
    writer.writeStringValue("operatingSystemEdition", hardwareInformation.operatingSystemEdition);
    writer.writeStringValue("operatingSystemLanguage", hardwareInformation.operatingSystemLanguage);
    writer.writeNumberValue("operatingSystemProductType", hardwareInformation.operatingSystemProductType);
    writer.writeStringValue("osBuildNumber", hardwareInformation.osBuildNumber);
    writer.writeStringValue("phoneNumber", hardwareInformation.phoneNumber);
    writer.writeStringValue("productName", hardwareInformation.productName);
    writer.writeNumberValue("residentUsersCount", hardwareInformation.residentUsersCount);
    writer.writeStringValue("serialNumber", hardwareInformation.serialNumber);
    writer.writeCollectionOfObjectValuesFromMethod("sharedDeviceCachedUsers", hardwareInformation.sharedDeviceCachedUsers, serializeSharedAppleDeviceUser);
    writer.writeStringValue("subnetAddress", hardwareInformation.subnetAddress);
    writer.writeStringValue("subscriberCarrier", hardwareInformation.subscriberCarrier);
    writer.writeStringValue("systemManagementBIOSVersion", hardwareInformation.systemManagementBIOSVersion);
    writer.writeNumberValue("totalStorageSpace", hardwareInformation.totalStorageSpace);
    writer.writeStringValue("tpmManufacturer", hardwareInformation.tpmManufacturer);
    writer.writeStringValue("tpmSpecificationVersion", hardwareInformation.tpmSpecificationVersion);
    writer.writeStringValue("tpmVersion", hardwareInformation.tpmVersion);
    writer.writeStringValue("wifiMac", hardwareInformation.wifiMac);
    writer.writeCollectionOfPrimitiveValues("wiredIPv4Addresses", hardwareInformation.wiredIPv4Addresses);
}

function serializeLoggedOnUser(writer, loggedOnUser = {}) {
    writer.writeDateValue("lastLogOnDateTime", loggedOnUser.lastLogOnDateTime);
    writer.writeStringValue("userId", loggedOnUser.userId);
}

function serializeManagedDeviceMobileAppConfigurationSettingState(writer, managedDeviceMobileAppConfigurationSettingState = {}) {
    writer.writeStringValue("currentValue", managedDeviceMobileAppConfigurationSettingState.currentValue);
    writer.writeNumberValue("errorCode", managedDeviceMobileAppConfigurationSettingState.errorCode);
    writer.writeStringValue("errorDescription", managedDeviceMobileAppConfigurationSettingState.errorDescription);
    writer.writeStringValue("instanceDisplayName", managedDeviceMobileAppConfigurationSettingState.instanceDisplayName);
    writer.writeStringValue("setting", managedDeviceMobileAppConfigurationSettingState.setting);
    writer.writeStringValue("settingInstanceId", managedDeviceMobileAppConfigurationSettingState.settingInstanceId);
    writer.writeStringValue("settingName", managedDeviceMobileAppConfigurationSettingState.settingName);
    writer.writeCollectionOfObjectValuesFromMethod("sources", managedDeviceMobileAppConfigurationSettingState.sources, serializeSettingSource);
    writer.writeEnumValue("state", managedDeviceMobileAppConfigurationSettingState.state);
    writer.writeStringValue("userEmail", managedDeviceMobileAppConfigurationSettingState.userEmail);
    writer.writeStringValue("userId", managedDeviceMobileAppConfigurationSettingState.userId);
    writer.writeStringValue("userName", managedDeviceMobileAppConfigurationSettingState.userName);
    writer.writeStringValue("userPrincipalName", managedDeviceMobileAppConfigurationSettingState.userPrincipalName);
}

function serializeManagedDeviceMobileAppConfigurationState(writer, managedDeviceMobileAppConfigurationState = {}) {
    serializeEntity(writer, managedDeviceMobileAppConfigurationState);
    writer.writeStringValue("displayName", managedDeviceMobileAppConfigurationState.displayName);
    writer.writeEnumValue("platformType", managedDeviceMobileAppConfigurationState.platformType);
    writer.writeNumberValue("settingCount", managedDeviceMobileAppConfigurationState.settingCount);
    writer.writeCollectionOfObjectValuesFromMethod("settingStates", managedDeviceMobileAppConfigurationState.settingStates, serializeManagedDeviceMobileAppConfigurationSettingState);
    writer.writeEnumValue("state", managedDeviceMobileAppConfigurationState.state);
    writer.writeStringValue("userId", managedDeviceMobileAppConfigurationState.userId);
    writer.writeStringValue("userPrincipalName", managedDeviceMobileAppConfigurationState.userPrincipalName);
    writer.writeNumberValue("version", managedDeviceMobileAppConfigurationState.version);
}

function serializeSecurityBaselineContributingPolicy(writer, securityBaselineContributingPolicy = {}) {
    writer.writeStringValue("displayName", securityBaselineContributingPolicy.displayName);
    writer.writeStringValue("sourceId", securityBaselineContributingPolicy.sourceId);
    writer.writeEnumValue("sourceType", securityBaselineContributingPolicy.sourceType);
}

function serializeSecurityBaselineSettingState(writer, securityBaselineSettingState = {}) {
    serializeEntity(writer, securityBaselineSettingState);
    writer.writeCollectionOfObjectValuesFromMethod("contributingPolicies", securityBaselineSettingState.contributingPolicies, serializeSecurityBaselineContributingPolicy);
    writer.writeStringValue("errorCode", securityBaselineSettingState.errorCode);
    writer.writeStringValue("settingCategoryId", securityBaselineSettingState.settingCategoryId);
    writer.writeStringValue("settingCategoryName", securityBaselineSettingState.settingCategoryName);
    writer.writeStringValue("settingId", securityBaselineSettingState.settingId);
    writer.writeStringValue("settingName", securityBaselineSettingState.settingName);
    writer.writeCollectionOfObjectValuesFromMethod("sourcePolicies", securityBaselineSettingState.sourcePolicies, serializeSettingSource);
    writer.writeEnumValue("state", securityBaselineSettingState.state);
}

function serializeSecurityBaselineState(writer, securityBaselineState = {}) {
    serializeEntity(writer, securityBaselineState);
    writer.writeStringValue("displayName", securityBaselineState.displayName);
    writer.writeStringValue("securityBaselineTemplateId", securityBaselineState.securityBaselineTemplateId);
    writer.writeCollectionOfObjectValuesFromMethod("settingStates", securityBaselineState.settingStates, serializeSecurityBaselineSettingState);
    writer.writeEnumValue("state", securityBaselineState.state);
    writer.writeStringValue("userPrincipalName", securityBaselineState.userPrincipalName);
}

function serializeWindowsDeviceMalwareState(writer, windowsDeviceMalwareState = {}) {
    serializeEntity(writer, windowsDeviceMalwareState);
    writer.writeStringValue("additionalInformationUrl", windowsDeviceMalwareState.additionalInformationUrl);
    writer.writeEnumValue("category", windowsDeviceMalwareState.category);
    writer.writeNumberValue("detectionCount", windowsDeviceMalwareState.detectionCount);
    writer.writeStringValue("displayName", windowsDeviceMalwareState.displayName);
    writer.writeEnumValue("executionState", windowsDeviceMalwareState.executionState);
    writer.writeDateValue("initialDetectionDateTime", windowsDeviceMalwareState.initialDetectionDateTime);
    writer.writeDateValue("lastStateChangeDateTime", windowsDeviceMalwareState.lastStateChangeDateTime);
    writer.writeEnumValue("severity", windowsDeviceMalwareState.severity);
    writer.writeEnumValue("state", windowsDeviceMalwareState.state);
    writer.writeEnumValue("threatState", windowsDeviceMalwareState.threatState);
}

function serializeWindowsProtectionState(writer, windowsProtectionState = {}) {
    serializeEntity(writer, windowsProtectionState);
    writer.writeStringValue("antiMalwareVersion", windowsProtectionState.antiMalwareVersion);
    writer.writeCollectionOfObjectValuesFromMethod("detectedMalwareState", windowsProtectionState.detectedMalwareState, serializeWindowsDeviceMalwareState);
    writer.writeEnumValue("deviceState", windowsProtectionState.deviceState);
    writer.writeStringValue("engineVersion", windowsProtectionState.engineVersion);
    writer.writeBooleanValue("fullScanOverdue", windowsProtectionState.fullScanOverdue);
    writer.writeBooleanValue("fullScanRequired", windowsProtectionState.fullScanRequired);
    writer.writeBooleanValue("isVirtualMachine", windowsProtectionState.isVirtualMachine);
    writer.writeDateValue("lastFullScanDateTime", windowsProtectionState.lastFullScanDateTime);
    writer.writeStringValue("lastFullScanSignatureVersion", windowsProtectionState.lastFullScanSignatureVersion);
    writer.writeDateValue("lastQuickScanDateTime", windowsProtectionState.lastQuickScanDateTime);
    writer.writeStringValue("lastQuickScanSignatureVersion", windowsProtectionState.lastQuickScanSignatureVersion);
    writer.writeDateValue("lastReportedDateTime", windowsProtectionState.lastReportedDateTime);
    writer.writeBooleanValue("malwareProtectionEnabled", windowsProtectionState.malwareProtectionEnabled);
    writer.writeBooleanValue("networkInspectionSystemEnabled", windowsProtectionState.networkInspectionSystemEnabled);
    writer.writeEnumValue("productStatus", windowsProtectionState.productStatus);
    writer.writeBooleanValue("quickScanOverdue", windowsProtectionState.quickScanOverdue);
    writer.writeBooleanValue("realTimeProtectionEnabled", windowsProtectionState.realTimeProtectionEnabled);
    writer.writeBooleanValue("rebootRequired", windowsProtectionState.rebootRequired);
    writer.writeBooleanValue("signatureUpdateOverdue", windowsProtectionState.signatureUpdateOverdue);
    writer.writeStringValue("signatureVersion", windowsProtectionState.signatureVersion);
    writer.writeBooleanValue("tamperProtectionEnabled", windowsProtectionState.tamperProtectionEnabled);
}

function serializeManagedDevice(writer, managedDevice = {}) {
    serializeEntity(writer, managedDevice);
    writer.writeBooleanValue("aadRegistered", managedDevice.aadRegistered);
    writer.writeStringValue("activationLockBypassCode", managedDevice.activationLockBypassCode);
    writer.writeStringValue("androidSecurityPatchLevel", managedDevice.androidSecurityPatchLevel);
    writer.writeCollectionOfObjectValuesFromMethod("assignmentFilterEvaluationStatusDetails", managedDevice.assignmentFilterEvaluationStatusDetails, serializeAssignmentFilterEvaluationStatusDetails);
    writer.writeBooleanValue("autopilotEnrolled", managedDevice.autopilotEnrolled);
    writer.writeStringValue("azureActiveDirectoryDeviceId", managedDevice.azureActiveDirectoryDeviceId);
    writer.writeStringValue("azureADDeviceId", managedDevice.azureADDeviceId);
    writer.writeBooleanValue("azureADRegistered", managedDevice.azureADRegistered);
    writer.writeBooleanValue("bootstrapTokenEscrowed", managedDevice.bootstrapTokenEscrowed);
    writer.writeEnumValue("chassisType", managedDevice.chassisType);
    writer.writeCollectionOfObjectValuesFromMethod("chromeOSDeviceInfo", managedDevice.chromeOSDeviceInfo, serializeChromeOSDeviceProperty);
    writer.writeCollectionOfObjectValuesFromMethod("cloudPcRemoteActionResults", managedDevice.cloudPcRemoteActionResults, serializeCloudPcRemoteActionResult);
    writer.writeDateValue("complianceGracePeriodExpirationDateTime", managedDevice.complianceGracePeriodExpirationDateTime);
    writer.writeEnumValue("complianceState", managedDevice.complianceState);
    writer.writeObjectValueFromMethod("configurationManagerClientEnabledFeatures", managedDevice.configurationManagerClientEnabledFeatures, serializeConfigurationManagerClientEnabledFeatures);
    writer.writeObjectValueFromMethod("configurationManagerClientHealthState", managedDevice.configurationManagerClientHealthState, serializeConfigurationManagerClientHealthState);
    writer.writeObjectValueFromMethod("configurationManagerClientInformation", managedDevice.configurationManagerClientInformation, serializeConfigurationManagerClientInformation);
    writer.writeCollectionOfObjectValuesFromMethod("detectedApps", managedDevice.detectedApps, serializeDetectedApp);
    writer.writeCollectionOfObjectValuesFromMethod("deviceActionResults", managedDevice.deviceActionResults, serializeDeviceActionResult);
    writer.writeObjectValueFromMethod("deviceCategory", managedDevice.deviceCategory, serializeDeviceCategory);
    writer.writeStringValue("deviceCategoryDisplayName", managedDevice.deviceCategoryDisplayName);
    writer.writeCollectionOfObjectValuesFromMethod("deviceCompliancePolicyStates", managedDevice.deviceCompliancePolicyStates, serializeDeviceCompliancePolicyState);
    writer.writeCollectionOfObjectValuesFromMethod("deviceConfigurationStates", managedDevice.deviceConfigurationStates, serializeDeviceConfigurationState);
    writer.writeEnumValue("deviceEnrollmentType", managedDevice.deviceEnrollmentType);
    writer.writeBooleanValue("deviceFirmwareConfigurationInterfaceManaged", managedDevice.deviceFirmwareConfigurationInterfaceManaged);
    writer.writeObjectValueFromMethod("deviceHealthAttestationState", managedDevice.deviceHealthAttestationState, serializeDeviceHealthAttestationState);
    writer.writeStringValue("deviceName", managedDevice.deviceName);
    writer.writeEnumValue("deviceRegistrationState", managedDevice.deviceRegistrationState);
    writer.writeEnumValue("deviceType", managedDevice.deviceType);
    writer.writeBooleanValue("easActivated", managedDevice.easActivated);
    writer.writeDateValue("easActivationDateTime", managedDevice.easActivationDateTime);
    writer.writeStringValue("easDeviceId", managedDevice.easDeviceId);
    writer.writeStringValue("emailAddress", managedDevice.emailAddress);
    writer.writeDateValue("enrolledDateTime", managedDevice.enrolledDateTime);
    writer.writeStringValue("enrollmentProfileName", managedDevice.enrollmentProfileName);
    writer.writeStringValue("ethernetMacAddress", managedDevice.ethernetMacAddress);
    writer.writeEnumValue("exchangeAccessState", managedDevice.exchangeAccessState);
    writer.writeEnumValue("exchangeAccessStateReason", managedDevice.exchangeAccessStateReason);
    writer.writeDateValue("exchangeLastSuccessfulSyncDateTime", managedDevice.exchangeLastSuccessfulSyncDateTime);
    writer.writeNumberValue("freeStorageSpaceInBytes", managedDevice.freeStorageSpaceInBytes);
    writer.writeObjectValueFromMethod("hardwareInformation", managedDevice.hardwareInformation, serializeHardwareInformation);
    writer.writeStringValue("iccid", managedDevice.iccid);
    writer.writeStringValue("imei", managedDevice.imei);
    writer.writeBooleanValue("isEncrypted", managedDevice.isEncrypted);
    writer.writeBooleanValue("isSupervised", managedDevice.isSupervised);
    writer.writeStringValue("jailBroken", managedDevice.jailBroken);
    writer.writeEnumValue("joinType", managedDevice.joinType);
    writer.writeDateValue("lastSyncDateTime", managedDevice.lastSyncDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("logCollectionRequests", managedDevice.logCollectionRequests, serializeDeviceLogCollectionResponse);
    writer.writeEnumValue("lostModeState", managedDevice.lostModeState);
    writer.writeCollectionOfObjectValuesFromMethod("managedDeviceMobileAppConfigurationStates", managedDevice.managedDeviceMobileAppConfigurationStates, serializeManagedDeviceMobileAppConfigurationState);
    writer.writeStringValue("managedDeviceName", managedDevice.managedDeviceName);
    writer.writeEnumValue("managedDeviceOwnerType", managedDevice.managedDeviceOwnerType);
    writer.writeEnumValue("managementAgent", managedDevice.managementAgent);
    writer.writeDateValue("managementCertificateExpirationDate", managedDevice.managementCertificateExpirationDate);
    writer.writeEnumValue("managementFeatures", managedDevice.managementFeatures);
    writer.writeEnumValue("managementState", managedDevice.managementState);
    writer.writeStringValue("manufacturer", managedDevice.manufacturer);
    writer.writeStringValue("meid", managedDevice.meid);
    writer.writeStringValue("model", managedDevice.model);
    writer.writeStringValue("notes", managedDevice.notes);
    writer.writeStringValue("operatingSystem", managedDevice.operatingSystem);
    writer.writeStringValue("osVersion", managedDevice.osVersion);
    writer.writeEnumValue("ownerType", managedDevice.ownerType);
    writer.writeEnumValue("partnerReportedThreatState", managedDevice.partnerReportedThreatState);
    writer.writeStringValue("phoneNumber", managedDevice.phoneNumber);
    writer.writeNumberValue("physicalMemoryInBytes", managedDevice.physicalMemoryInBytes);
    writer.writeDateValue("preferMdmOverGroupPolicyAppliedDateTime", managedDevice.preferMdmOverGroupPolicyAppliedDateTime);
    writer.writeEnumValue("processorArchitecture", managedDevice.processorArchitecture);
    writer.writeStringValue("remoteAssistanceSessionErrorDetails", managedDevice.remoteAssistanceSessionErrorDetails);
    writer.writeStringValue("remoteAssistanceSessionUrl", managedDevice.remoteAssistanceSessionUrl);
    writer.writeBooleanValue("requireUserEnrollmentApproval", managedDevice.requireUserEnrollmentApproval);
    writer.writeDateValue("retireAfterDateTime", managedDevice.retireAfterDateTime);
    writer.writeCollectionOfPrimitiveValues("roleScopeTagIds", managedDevice.roleScopeTagIds);
    writer.writeCollectionOfObjectValuesFromMethod("securityBaselineStates", managedDevice.securityBaselineStates, serializeSecurityBaselineState);
    writer.writeStringValue("serialNumber", managedDevice.serialNumber);
    writer.writeStringValue("skuFamily", managedDevice.skuFamily);
    writer.writeNumberValue("skuNumber", managedDevice.skuNumber);
    writer.writeStringValue("specificationVersion", managedDevice.specificationVersion);
    writer.writeStringValue("subscriberCarrier", managedDevice.subscriberCarrier);
    writer.writeNumberValue("totalStorageSpaceInBytes", managedDevice.totalStorageSpaceInBytes);
    writer.writeStringValue("udid", managedDevice.udid);
    writer.writeStringValue("userDisplayName", managedDevice.userDisplayName);
    writer.writeStringValue("userId", managedDevice.userId);
    writer.writeStringValue("userPrincipalName", managedDevice.userPrincipalName);
    writer.writeCollectionOfObjectValuesFromMethod("users", managedDevice.users, serializeUser);
    writer.writeCollectionOfObjectValuesFromMethod("usersLoggedOn", managedDevice.usersLoggedOn, serializeLoggedOnUser);
    writer.writeStringValue("wiFiMacAddress", managedDevice.wiFiMacAddress);
    writer.writeNumberValue("windowsActiveMalwareCount", managedDevice.windowsActiveMalwareCount);
    writer.writeObjectValueFromMethod("windowsProtectionState", managedDevice.windowsProtectionState, serializeWindowsProtectionState);
    writer.writeNumberValue("windowsRemediatedMalwareCount", managedDevice.windowsRemediatedMalwareCount);
}

function serializeMobileAppSupportedDeviceType(writer, mobileAppSupportedDeviceType = {}) {
    writer.writeStringValue("maximumOperatingSystemVersion", mobileAppSupportedDeviceType.maximumOperatingSystemVersion);
    writer.writeStringValue("minimumOperatingSystemVersion", mobileAppSupportedDeviceType.minimumOperatingSystemVersion);
    writer.writeEnumValue("type", mobileAppSupportedDeviceType.type);
}

function serializeMobileAppIntentAndStateDetail(writer, mobileAppIntentAndStateDetail = {}) {
    writer.writeStringValue("applicationId", mobileAppIntentAndStateDetail.applicationId);
    writer.writeStringValue("displayName", mobileAppIntentAndStateDetail.displayName);
    writer.writeStringValue("displayVersion", mobileAppIntentAndStateDetail.displayVersion);
    writer.writeEnumValue("installState", mobileAppIntentAndStateDetail.installState);
    writer.writeEnumValue("mobileAppIntent", mobileAppIntentAndStateDetail.mobileAppIntent);
    writer.writeCollectionOfObjectValuesFromMethod("supportedDeviceTypes", mobileAppIntentAndStateDetail.supportedDeviceTypes, serializeMobileAppSupportedDeviceType);
}

function serializeMobileAppIntentAndState(writer, mobileAppIntentAndState = {}) {
    serializeEntity(writer, mobileAppIntentAndState);
    writer.writeStringValue("managedDeviceIdentifier", mobileAppIntentAndState.managedDeviceIdentifier);
    writer.writeCollectionOfObjectValuesFromMethod("mobileAppList", mobileAppIntentAndState.mobileAppList, serializeMobileAppIntentAndStateDetail);
    writer.writeStringValue("userId", mobileAppIntentAndState.userId);
}

function serializeAppLogCollectionRequest(writer, appLogCollectionRequest = {}) {
    serializeEntity(writer, appLogCollectionRequest);
    writer.writeDateValue("completedDateTime", appLogCollectionRequest.completedDateTime);
    writer.writeCollectionOfPrimitiveValues("customLogFolders", appLogCollectionRequest.customLogFolders);
    writer.writeStringValue("errorMessage", appLogCollectionRequest.errorMessage);
    writer.writeEnumValue("status", appLogCollectionRequest.status);
}

function serializeMobileAppTroubleshootingHistoryItem(writer, mobileAppTroubleshootingHistoryItem = {}) {
    writer.writeDateValue("occurrenceDateTime", mobileAppTroubleshootingHistoryItem.occurrenceDateTime);
    writer.writeObjectValueFromMethod("troubleshootingErrorDetails", mobileAppTroubleshootingHistoryItem.troubleshootingErrorDetails, serializeDeviceManagementTroubleshootingErrorDetails);
}

function serializeMobileAppTroubleshootingEvent(writer, mobileAppTroubleshootingEvent = {}) {
    serializeDeviceManagementTroubleshootingEvent(writer, mobileAppTroubleshootingEvent);
    writer.writeStringValue("applicationId", mobileAppTroubleshootingEvent.applicationId);
    writer.writeCollectionOfObjectValuesFromMethod("appLogCollectionRequests", mobileAppTroubleshootingEvent.appLogCollectionRequests, serializeAppLogCollectionRequest);
    writer.writeCollectionOfObjectValuesFromMethod("history", mobileAppTroubleshootingEvent.history, serializeMobileAppTroubleshootingHistoryItem);
    writer.writeStringValue("managedDeviceIdentifier", mobileAppTroubleshootingEvent.managedDeviceIdentifier);
    writer.writeStringValue("userId", mobileAppTroubleshootingEvent.userId);
}

function serializeVisualProperties(writer, visualProperties = {}) {
    writer.writeStringValue("body", visualProperties.body);
    writer.writeStringValue("title", visualProperties.title);
}

function serializePayloadTypes(writer, payloadTypes = {}) {
    writer.writeStringValue("rawContent", payloadTypes.rawContent);
    writer.writeObjectValueFromMethod("visualContent", payloadTypes.visualContent, serializeVisualProperties);
}

function serializeTargetPolicyEndpoints(writer, targetPolicyEndpoints = {}) {
    writer.writeCollectionOfPrimitiveValues("platformTypes", targetPolicyEndpoints.platformTypes);
}

function serializeNotification(writer, notification = {}) {
    serializeEntity(writer, notification);
    writer.writeNumberValue("displayTimeToLive", notification.displayTimeToLive);
    writer.writeDateValue("expirationDateTime", notification.expirationDateTime);
    writer.writeStringValue("groupName", notification.groupName);
    writer.writeObjectValueFromMethod("payload", notification.payload, serializePayloadTypes);
    writer.writeEnumValue("priority", notification.priority);
    writer.writeStringValue("targetHostName", notification.targetHostName);
    writer.writeObjectValueFromMethod("targetPolicy", notification.targetPolicy, serializeTargetPolicyEndpoints);
}

function serializeOAuth2PermissionGrant(writer, oAuth2PermissionGrant = {}) {
    serializeEntity(writer, oAuth2PermissionGrant);
    writer.writeStringValue("clientId", oAuth2PermissionGrant.clientId);
    writer.writeStringValue("consentType", oAuth2PermissionGrant.consentType);
    writer.writeDateValue("expiryTime", oAuth2PermissionGrant.expiryTime);
    writer.writeStringValue("principalId", oAuth2PermissionGrant.principalId);
    writer.writeStringValue("resourceId", oAuth2PermissionGrant.resourceId);
    writer.writeStringValue("scope", oAuth2PermissionGrant.scope);
    writer.writeDateValue("startTime", oAuth2PermissionGrant.startTime);
}

function serializeObjectIdentity(writer, objectIdentity = {}) {
    writer.writeStringValue("issuer", objectIdentity.issuer);
    writer.writeStringValue("issuerAssignedId", objectIdentity.issuerAssignedId);
    writer.writeStringValue("signInType", objectIdentity.signInType);
}

function serializeAudioConferencing(writer, audioConferencing = {}) {
    writer.writeStringValue("conferenceId", audioConferencing.conferenceId);
    writer.writeStringValue("dialinUrl", audioConferencing.dialinUrl);
    writer.writeStringValue("tollFreeNumber", audioConferencing.tollFreeNumber);
    writer.writeCollectionOfPrimitiveValues("tollFreeNumbers", audioConferencing.tollFreeNumbers);
    writer.writeStringValue("tollNumber", audioConferencing.tollNumber);
    writer.writeCollectionOfPrimitiveValues("tollNumbers", audioConferencing.tollNumbers);
}

function serializeBroadcastMeetingCaptionSettings(writer, broadcastMeetingCaptionSettings = {}) {
    writer.writeBooleanValue("isCaptionEnabled", broadcastMeetingCaptionSettings.isCaptionEnabled);
    writer.writeStringValue("spokenLanguage", broadcastMeetingCaptionSettings.spokenLanguage);
    writer.writeCollectionOfPrimitiveValues("translationLanguages", broadcastMeetingCaptionSettings.translationLanguages);
}

function serializeBroadcastMeetingSettings(writer, broadcastMeetingSettings = {}) {
    writer.writeEnumValue("allowedAudience", broadcastMeetingSettings.allowedAudience);
    writer.writeObjectValueFromMethod("captions", broadcastMeetingSettings.captions, serializeBroadcastMeetingCaptionSettings);
    writer.writeBooleanValue("isAttendeeReportEnabled", broadcastMeetingSettings.isAttendeeReportEnabled);
    writer.writeBooleanValue("isQuestionAndAnswerEnabled", broadcastMeetingSettings.isQuestionAndAnswerEnabled);
    writer.writeBooleanValue("isRecordingEnabled", broadcastMeetingSettings.isRecordingEnabled);
    writer.writeBooleanValue("isVideoOnDemandEnabled", broadcastMeetingSettings.isVideoOnDemandEnabled);
}

function serializeCallTranscript(writer, callTranscript = {}) {
    serializeEntity(writer, callTranscript);
    writer.writeStringValue("content", callTranscript.content);
    writer.writeDateValue("createdDateTime", callTranscript.createdDateTime);
}

function serializeChatInfo(writer, chatInfo = {}) {
    writer.writeStringValue("messageId", chatInfo.messageId);
    writer.writeStringValue("replyChainMessageId", chatInfo.replyChainMessageId);
    writer.writeStringValue("threadId", chatInfo.threadId);
}

function serializeJoinMeetingIdSettings(writer, joinMeetingIdSettings = {}) {
    writer.writeBooleanValue("isPasscodeRequired", joinMeetingIdSettings.isPasscodeRequired);
    writer.writeStringValue("joinMeetingId", joinMeetingIdSettings.joinMeetingId);
    writer.writeStringValue("passcode", joinMeetingIdSettings.passcode);
}

function serializeLobbyBypassSettings(writer, lobbyBypassSettings = {}) {
    writer.writeBooleanValue("isDialInBypassEnabled", lobbyBypassSettings.isDialInBypassEnabled);
    writer.writeEnumValue("scope", lobbyBypassSettings.scope);
}

function serializeAttendanceInterval(writer, attendanceInterval = {}) {
    writer.writeNumberValue("durationInSeconds", attendanceInterval.durationInSeconds);
    writer.writeDateValue("joinDateTime", attendanceInterval.joinDateTime);
    writer.writeDateValue("leaveDateTime", attendanceInterval.leaveDateTime);
}

function serializeAttendanceRecord(writer, attendanceRecord = {}) {
    serializeEntity(writer, attendanceRecord);
    writer.writeCollectionOfObjectValuesFromMethod("attendanceIntervals", attendanceRecord.attendanceIntervals, serializeAttendanceInterval);
    writer.writeStringValue("emailAddress", attendanceRecord.emailAddress);
    writer.writeObjectValueFromMethod("identity", attendanceRecord.identity, serializeIdentity);
    writer.writeStringValue("registrantId", attendanceRecord.registrantId);
    writer.writeStringValue("role", attendanceRecord.role);
    writer.writeNumberValue("totalAttendanceInSeconds", attendanceRecord.totalAttendanceInSeconds);
}

function serializeMeetingAttendanceReport(writer, meetingAttendanceReport = {}) {
    serializeEntity(writer, meetingAttendanceReport);
    writer.writeCollectionOfObjectValuesFromMethod("attendanceRecords", meetingAttendanceReport.attendanceRecords, serializeAttendanceRecord);
    writer.writeDateValue("meetingEndDateTime", meetingAttendanceReport.meetingEndDateTime);
    writer.writeDateValue("meetingStartDateTime", meetingAttendanceReport.meetingStartDateTime);
    writer.writeNumberValue("totalParticipantCount", meetingAttendanceReport.totalParticipantCount);
}

function serializeMeetingParticipantInfo(writer, meetingParticipantInfo = {}) {
    writer.writeObjectValueFromMethod("identity", meetingParticipantInfo.identity, serializeIdentitySet);
    writer.writeEnumValue("role", meetingParticipantInfo.role);
    writer.writeStringValue("upn", meetingParticipantInfo.upn);
}

function serializeMeetingParticipants(writer, meetingParticipants = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("attendees", meetingParticipants.attendees, serializeMeetingParticipantInfo);
    writer.writeCollectionOfObjectValuesFromMethod("contributors", meetingParticipants.contributors, serializeMeetingParticipantInfo);
    writer.writeObjectValueFromMethod("organizer", meetingParticipants.organizer, serializeMeetingParticipantInfo);
    writer.writeCollectionOfObjectValuesFromMethod("producers", meetingParticipants.producers, serializeMeetingParticipantInfo);
}

function serializeMeetingRegistrantBase(writer, meetingRegistrantBase = {}) {
    serializeEntity(writer, meetingRegistrantBase);
    writer.writeStringValue("joinWebUrl", meetingRegistrantBase.joinWebUrl);
}

function serializeMeetingRegistrationBase(writer, meetingRegistrationBase = {}) {
    serializeEntity(writer, meetingRegistrationBase);
    writer.writeEnumValue("allowedRegistrant", meetingRegistrationBase.allowedRegistrant);
    writer.writeCollectionOfObjectValuesFromMethod("registrants", meetingRegistrationBase.registrants, serializeMeetingRegistrantBase);
}

function serializeMeetingRegistrationQuestion(writer, meetingRegistrationQuestion = {}) {
    serializeEntity(writer, meetingRegistrationQuestion);
    writer.writeEnumValue("answerInputType", meetingRegistrationQuestion.answerInputType);
    writer.writeCollectionOfPrimitiveValues("answerOptions", meetingRegistrationQuestion.answerOptions);
    writer.writeStringValue("displayName", meetingRegistrationQuestion.displayName);
    writer.writeBooleanValue("isRequired", meetingRegistrationQuestion.isRequired);
}

function serializeMeetingSpeaker(writer, meetingSpeaker = {}) {
    writer.writeStringValue("bio", meetingSpeaker.bio);
    writer.writeStringValue("displayName", meetingSpeaker.displayName);
}

function serializeMeetingRegistration(writer, meetingRegistration = {}) {
    serializeMeetingRegistrationBase(writer, meetingRegistration);
    writer.writeCollectionOfObjectValuesFromMethod("customQuestions", meetingRegistration.customQuestions, serializeMeetingRegistrationQuestion);
    writer.writeStringValue("description", meetingRegistration.description);
    writer.writeDateValue("endDateTime", meetingRegistration.endDateTime);
    writer.writeNumberValue("registrationPageViewCount", meetingRegistration.registrationPageViewCount);
    writer.writeStringValue("registrationPageWebUrl", meetingRegistration.registrationPageWebUrl);
    writer.writeCollectionOfObjectValuesFromMethod("speakers", meetingRegistration.speakers, serializeMeetingSpeaker);
    writer.writeDateValue("startDateTime", meetingRegistration.startDateTime);
    writer.writeStringValue("subject", meetingRegistration.subject);
}

function serializeVirtualAppointmentSettings(writer, virtualAppointmentSettings = {}) {
    writer.writeBooleanValue("allowClientToJoinUsingBrowser", virtualAppointmentSettings.allowClientToJoinUsingBrowser);
}

function serializeVirtualAppointmentUser(writer, virtualAppointmentUser = {}) {
    writer.writeStringValue("displayName", virtualAppointmentUser.displayName);
    writer.writeStringValue("emailAddress", virtualAppointmentUser.emailAddress);
    writer.writeStringValue("smsCapablePhoneNumber", virtualAppointmentUser.smsCapablePhoneNumber);
}

function serializeVirtualAppointment(writer, virtualAppointment = {}) {
    serializeEntity(writer, virtualAppointment);
    writer.writeStringValue("appointmentClientJoinWebUrl", virtualAppointment.appointmentClientJoinWebUrl);
    writer.writeCollectionOfObjectValuesFromMethod("appointmentClients", virtualAppointment.appointmentClients, serializeVirtualAppointmentUser);
    writer.writeStringValue("externalAppointmentId", virtualAppointment.externalAppointmentId);
    writer.writeStringValue("externalAppointmentUrl", virtualAppointment.externalAppointmentUrl);
    writer.writeObjectValueFromMethod("settings", virtualAppointment.settings, serializeVirtualAppointmentSettings);
}

function serializeOnlineMeeting(writer, onlineMeeting = {}) {
    serializeEntity(writer, onlineMeeting);
    writer.writeBooleanValue("allowAttendeeToEnableCamera", onlineMeeting.allowAttendeeToEnableCamera);
    writer.writeBooleanValue("allowAttendeeToEnableMic", onlineMeeting.allowAttendeeToEnableMic);
    writer.writeEnumValue("allowedPresenters", onlineMeeting.allowedPresenters);
    writer.writeBooleanValue("allowTeamworkReactions", onlineMeeting.allowTeamworkReactions);
    writer.writeStringValue("alternativeRecording", onlineMeeting.alternativeRecording);
    //  writer.writeEnumValue<OnlineMeetingRole>("anonymizeIdentityForRoles", onlineMeeting.anonymizeIdentityForRoles);
    writer.writeCollectionOfObjectValuesFromMethod("attendanceReports", onlineMeeting.attendanceReports, serializeMeetingAttendanceReport);
    writer.writeStringValue("attendeeReport", onlineMeeting.attendeeReport);
    writer.writeObjectValueFromMethod("audioConferencing", onlineMeeting.audioConferencing, serializeAudioConferencing);
    writer.writeObjectValueFromMethod("broadcastSettings", onlineMeeting.broadcastSettings, serializeBroadcastMeetingSettings);
    // writer.writeEnumValue<MeetingCapabilities>("capabilities", onlineMeeting.capabilities);
    writer.writeObjectValueFromMethod("chatInfo", onlineMeeting.chatInfo, serializeChatInfo);
    writer.writeDateValue("creationDateTime", onlineMeeting.creationDateTime);
    writer.writeDateValue("endDateTime", onlineMeeting.endDateTime);
    writer.writeStringValue("externalId", onlineMeeting.externalId);
    writer.writeBooleanValue("isBroadcast", onlineMeeting.isBroadcast);
    writer.writeBooleanValue("isEntryExitAnnounced", onlineMeeting.isEntryExitAnnounced);
    writer.writeObjectValueFromMethod("joinInformation", onlineMeeting.joinInformation, serializeItemBody);
    writer.writeObjectValueFromMethod("joinMeetingIdSettings", onlineMeeting.joinMeetingIdSettings, serializeJoinMeetingIdSettings);
    writer.writeStringValue("joinUrl", onlineMeeting.joinUrl);
    writer.writeStringValue("joinWebUrl", onlineMeeting.joinWebUrl);
    writer.writeObjectValueFromMethod("lobbyBypassSettings", onlineMeeting.lobbyBypassSettings, serializeLobbyBypassSettings);
    writer.writeObjectValueFromMethod("meetingAttendanceReport", onlineMeeting.meetingAttendanceReport, serializeMeetingAttendanceReport);
    writer.writeObjectValueFromMethod("participants", onlineMeeting.participants, serializeMeetingParticipants);
    writer.writeBooleanValue("recordAutomatically", onlineMeeting.recordAutomatically);
    writer.writeStringValue("recording", onlineMeeting.recording);
    writer.writeObjectValueFromMethod("registration", onlineMeeting.registration, serializeMeetingRegistration);
    writer.writeDateValue("startDateTime", onlineMeeting.startDateTime);
    writer.writeStringValue("subject", onlineMeeting.subject);
    writer.writeCollectionOfObjectValuesFromMethod("transcripts", onlineMeeting.transcripts, serializeCallTranscript);
    writer.writeStringValue("videoTeleconferenceId", onlineMeeting.videoTeleconferenceId);
    writer.writeObjectValueFromMethod("virtualAppointment", onlineMeeting.virtualAppointment, serializeVirtualAppointment);
}

function serializeOutlookCategory(writer, outlookCategory = {}) {
    serializeEntity(writer, outlookCategory);
    writer.writeEnumValue("color", outlookCategory.color);
    writer.writeStringValue("displayName", outlookCategory.displayName);
}

function serializeOutlookTask(writer, outlookTask = {}) {
    serializeOutlookItem(writer, outlookTask);
    writer.writeStringValue("assignedTo", outlookTask.assignedTo);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", outlookTask.attachments, serializeAttachment);
    writer.writeObjectValueFromMethod("body", outlookTask.body, serializeItemBody);
    writer.writeObjectValueFromMethod("completedDateTime", outlookTask.completedDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValueFromMethod("dueDateTime", outlookTask.dueDateTime, serializeDateTimeTimeZone);
    writer.writeBooleanValue("hasAttachments", outlookTask.hasAttachments);
    writer.writeEnumValue("importance", outlookTask.importance);
    writer.writeBooleanValue("isReminderOn", outlookTask.isReminderOn);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", outlookTask.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("owner", outlookTask.owner);
    writer.writeStringValue("parentFolderId", outlookTask.parentFolderId);
    writer.writeObjectValueFromMethod("recurrence", outlookTask.recurrence, serializePatternedRecurrence);
    writer.writeObjectValueFromMethod("reminderDateTime", outlookTask.reminderDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue("sensitivity", outlookTask.sensitivity);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", outlookTask.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeObjectValueFromMethod("startDateTime", outlookTask.startDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue("status", outlookTask.status);
    writer.writeStringValue("subject", outlookTask.subject);
}

function serializeOutlookTaskFolder(writer, outlookTaskFolder = {}) {
    serializeEntity(writer, outlookTaskFolder);
    writer.writeStringValue("changeKey", outlookTaskFolder.changeKey);
    writer.writeBooleanValue("isDefaultFolder", outlookTaskFolder.isDefaultFolder);
    writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", outlookTaskFolder.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("name", outlookTaskFolder.name);
    writer.writeStringValue("parentGroupKey", outlookTaskFolder.parentGroupKey);
    writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", outlookTaskFolder.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", outlookTaskFolder.tasks, serializeOutlookTask);
}

function serializeOutlookTaskGroup(writer, outlookTaskGroup = {}) {
    serializeEntity(writer, outlookTaskGroup);
    writer.writeStringValue("changeKey", outlookTaskGroup.changeKey);
    writer.writeStringValue("groupKey", outlookTaskGroup.groupKey);
    writer.writeBooleanValue("isDefaultGroup", outlookTaskGroup.isDefaultGroup);
    writer.writeStringValue("name", outlookTaskGroup.name);
    writer.writeCollectionOfObjectValuesFromMethod("taskFolders", outlookTaskGroup.taskFolders, serializeOutlookTaskFolder);
}

function serializeOutlookUser(writer, outlookUser = {}) {
    serializeEntity(writer, outlookUser);
    writer.writeCollectionOfObjectValuesFromMethod("masterCategories", outlookUser.masterCategories, serializeOutlookCategory);
    writer.writeCollectionOfObjectValuesFromMethod("taskFolders", outlookUser.taskFolders, serializeOutlookTaskFolder);
    writer.writeCollectionOfObjectValuesFromMethod("taskGroups", outlookUser.taskGroups, serializeOutlookTaskGroup);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", outlookUser.tasks, serializeOutlookTask);
}

function serializePasswordProfile(writer, passwordProfile = {}) {
    writer.writeBooleanValue("forceChangePasswordNextSignIn", passwordProfile.forceChangePasswordNextSignIn);
    writer.writeBooleanValue("forceChangePasswordNextSignInWithMfa", passwordProfile.forceChangePasswordNextSignInWithMfa);
    writer.writeStringValue("password", passwordProfile.password);
}

function serializePersonDataSource(writer, personDataSource = {}) {
    writer.writeStringValue("type", personDataSource.type);
}

function serializeRankedEmailAddress(writer, rankedEmailAddress = {}) {
    writer.writeStringValue("address", rankedEmailAddress.address);
    writer.writeNumberValue("rank", rankedEmailAddress.rank);
}

function serializePerson(writer, person = {}) {
    serializeEntity(writer, person);
    writer.writeStringValue("birthday", person.birthday);
    writer.writeStringValue("companyName", person.companyName);
    writer.writeStringValue("department", person.department);
    writer.writeStringValue("displayName", person.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("emailAddresses", person.emailAddresses, serializeRankedEmailAddress);
    writer.writeStringValue("givenName", person.givenName);
    writer.writeBooleanValue("isFavorite", person.isFavorite);
    writer.writeStringValue("mailboxType", person.mailboxType);
    writer.writeStringValue("officeLocation", person.officeLocation);
    writer.writeStringValue("personNotes", person.personNotes);
    writer.writeStringValue("personType", person.personType);
    writer.writeCollectionOfObjectValuesFromMethod("phones", person.phones, serializePhone);
    writer.writeCollectionOfObjectValuesFromMethod("postalAddresses", person.postalAddresses, serializeLocation);
    writer.writeStringValue("profession", person.profession);
    writer.writeCollectionOfObjectValuesFromMethod("sources", person.sources, serializePersonDataSource);
    writer.writeStringValue("surname", person.surname);
    writer.writeStringValue("title", person.title);
    writer.writeStringValue("userPrincipalName", person.userPrincipalName);
    writer.writeCollectionOfObjectValuesFromMethod("websites", person.websites, serializeWebsite);
    writer.writeStringValue("yomiCompany", person.yomiCompany);
}

function serializePlannerFavoritePlanReferenceCollection(writer, plannerFavoritePlanReferenceCollection = {}) {
}

function serializePlannerRecentPlanReferenceCollection(writer, plannerRecentPlanReferenceCollection = {}) {
}

function serializePlannerUser(writer, plannerUser = {}) {
    serializePlannerDelta(writer, plannerUser);
    writer.writeCollectionOfObjectValuesFromMethod("all", plannerUser.all, serializePlannerDelta);
    writer.writeObjectValueFromMethod("favoritePlanReferences", plannerUser.favoritePlanReferences, serializePlannerFavoritePlanReferenceCollection);
    writer.writeCollectionOfObjectValuesFromMethod("favoritePlans", plannerUser.favoritePlans, serializePlannerPlan);
    writer.writeCollectionOfObjectValuesFromMethod("plans", plannerUser.plans, serializePlannerPlan);
    writer.writeObjectValueFromMethod("recentPlanReferences", plannerUser.recentPlanReferences, serializePlannerRecentPlanReferenceCollection);
    writer.writeCollectionOfObjectValuesFromMethod("recentPlans", plannerUser.recentPlans, serializePlannerPlan);
    writer.writeCollectionOfObjectValuesFromMethod("rosterPlans", plannerUser.rosterPlans, serializePlannerPlan);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", plannerUser.tasks, serializePlannerTask);
}

function serializeOutOfOfficeSettings(writer, outOfOfficeSettings = {}) {
    writer.writeBooleanValue("isOutOfOffice", outOfOfficeSettings.isOutOfOffice);
    writer.writeStringValue("message", outOfOfficeSettings.message);
}

function serializePresence(writer, presence = {}) {
    serializeEntity(writer, presence);
    writer.writeStringValue("activity", presence.activity);
    writer.writeStringValue("availability", presence.availability);
    writer.writeObjectValueFromMethod("outOfOfficeSettings", presence.outOfOfficeSettings, serializeOutOfOfficeSettings);
}

function serializeEducationalActivityDetail(writer, educationalActivityDetail = {}) {
    writer.writeStringValue("abbreviation", educationalActivityDetail.abbreviation);
    writer.writeCollectionOfPrimitiveValues("activities", educationalActivityDetail.activities);
    writer.writeCollectionOfPrimitiveValues("awards", educationalActivityDetail.awards);
    writer.writeStringValue("description", educationalActivityDetail.description);
    writer.writeStringValue("displayName", educationalActivityDetail.displayName);
    writer.writeCollectionOfPrimitiveValues("fieldsOfStudy", educationalActivityDetail.fieldsOfStudy);
    writer.writeStringValue("grade", educationalActivityDetail.grade);
    writer.writeStringValue("notes", educationalActivityDetail.notes);
    writer.writeStringValue("webUrl", educationalActivityDetail.webUrl);
}

function serializeInstitutionData(writer, institutionData = {}) {
    writer.writeStringValue("description", institutionData.description);
    writer.writeStringValue("displayName", institutionData.displayName);
    writer.writeObjectValueFromMethod("location", institutionData.location, serializePhysicalAddress);
    writer.writeStringValue("webUrl", institutionData.webUrl);
}

function serializeInferenceData(writer, inferenceData = {}) {
    writer.writeNumberValue("confidenceScore", inferenceData.confidenceScore);
    writer.writeBooleanValue("userHasVerifiedAccuracy", inferenceData.userHasVerifiedAccuracy);
}

function serializePersonDataSources(writer, personDataSources = {}) {
    writer.writeCollectionOfPrimitiveValues("type", personDataSources.type);
}

function serializeItemFacet(writer, itemFacet = {}) {
    serializeEntity(writer, itemFacet);
    writer.writeEnumValue("allowedAudiences", itemFacet.allowedAudiences);
    writer.writeObjectValueFromMethod("createdBy", itemFacet.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", itemFacet.createdDateTime);
    writer.writeObjectValueFromMethod("inference", itemFacet.inference, serializeInferenceData);
    writer.writeBooleanValue("isSearchable", itemFacet.isSearchable);
    writer.writeObjectValueFromMethod("lastModifiedBy", itemFacet.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", itemFacet.lastModifiedDateTime);
    writer.writeObjectValueFromMethod("source", itemFacet.source, serializePersonDataSources);
}

function serializeEducationalActivity(writer, educationalActivity = {}) {
    serializeItemFacet(writer, educationalActivity);
    writer.writeDateOnlyValue("completionMonthYear", educationalActivity.completionMonthYear);
    writer.writeDateOnlyValue("endMonthYear", educationalActivity.endMonthYear);
    writer.writeObjectValueFromMethod("institution", educationalActivity.institution, serializeInstitutionData);
    writer.writeObjectValueFromMethod("program", educationalActivity.program, serializeEducationalActivityDetail);
    writer.writeDateOnlyValue("startMonthYear", educationalActivity.startMonthYear);
}

function serializeItemAddress(writer, itemAddress = {}) {
    serializeItemFacet(writer, itemAddress);
    writer.writeObjectValueFromMethod("detail", itemAddress.detail, serializePhysicalAddress);
    writer.writeStringValue("displayName", itemAddress.displayName);
    writer.writeObjectValueFromMethod("geoCoordinates", itemAddress.geoCoordinates, serializeGeoCoordinates);
}

function serializeItemEmail(writer, itemEmail = {}) {
    serializeItemFacet(writer, itemEmail);
    writer.writeStringValue("address", itemEmail.address);
    writer.writeStringValue("displayName", itemEmail.displayName);
    writer.writeEnumValue("type", itemEmail.type);
}

function serializeItemPatent(writer, itemPatent = {}) {
    serializeItemFacet(writer, itemPatent);
    writer.writeStringValue("description", itemPatent.description);
    writer.writeStringValue("displayName", itemPatent.displayName);
    writer.writeBooleanValue("isPending", itemPatent.isPending);
    writer.writeDateOnlyValue("issuedDate", itemPatent.issuedDate);
    writer.writeStringValue("issuingAuthority", itemPatent.issuingAuthority);
    writer.writeStringValue("number", itemPatent.number);
    writer.writeStringValue("webUrl", itemPatent.webUrl);
}

function serializeItemPhone(writer, itemPhone = {}) {
    serializeItemFacet(writer, itemPhone);
    writer.writeStringValue("displayName", itemPhone.displayName);
    writer.writeStringValue("number", itemPhone.number);
    writer.writeEnumValue("type", itemPhone.type);
}

function serializeItemPublication(writer, itemPublication = {}) {
    serializeItemFacet(writer, itemPublication);
    writer.writeStringValue("description", itemPublication.description);
    writer.writeStringValue("displayName", itemPublication.displayName);
    writer.writeDateOnlyValue("publishedDate", itemPublication.publishedDate);
    writer.writeStringValue("publisher", itemPublication.publisher);
    writer.writeStringValue("thumbnailUrl", itemPublication.thumbnailUrl);
    writer.writeStringValue("webUrl", itemPublication.webUrl);
}

function serializeLanguageProficiency(writer, languageProficiency = {}) {
    serializeItemFacet(writer, languageProficiency);
    writer.writeStringValue("displayName", languageProficiency.displayName);
    writer.writeEnumValue("proficiency", languageProficiency.proficiency);
    writer.writeEnumValue("reading", languageProficiency.reading);
    writer.writeEnumValue("spoken", languageProficiency.spoken);
    writer.writeStringValue("tag", languageProficiency.tag);
    writer.writeStringValue("thumbnailUrl", languageProficiency.thumbnailUrl);
    writer.writeEnumValue("written", languageProficiency.written);
}

function serializePersonAnnotation(writer, personAnnotation = {}) {
    serializeItemFacet(writer, personAnnotation);
    writer.writeObjectValueFromMethod("detail", personAnnotation.detail, serializeItemBody);
    writer.writeStringValue("displayName", personAnnotation.displayName);
    writer.writeStringValue("thumbnailUrl", personAnnotation.thumbnailUrl);
}

function serializePersonAnnualEvent(writer, personAnnualEvent = {}) {
    serializeItemFacet(writer, personAnnualEvent);
    writer.writeDateOnlyValue("date", personAnnualEvent.date);
    writer.writeStringValue("displayName", personAnnualEvent.displayName);
    writer.writeEnumValue("type", personAnnualEvent.type);
}

function serializePersonAward(writer, personAward = {}) {
    serializeItemFacet(writer, personAward);
    writer.writeStringValue("description", personAward.description);
    writer.writeStringValue("displayName", personAward.displayName);
    writer.writeDateOnlyValue("issuedDate", personAward.issuedDate);
    writer.writeStringValue("issuingAuthority", personAward.issuingAuthority);
    writer.writeStringValue("thumbnailUrl", personAward.thumbnailUrl);
    writer.writeStringValue("webUrl", personAward.webUrl);
}

function serializePersonCertification(writer, personCertification = {}) {
    serializeItemFacet(writer, personCertification);
    writer.writeStringValue("certificationId", personCertification.certificationId);
    writer.writeStringValue("description", personCertification.description);
    writer.writeStringValue("displayName", personCertification.displayName);
    writer.writeDateOnlyValue("endDate", personCertification.endDate);
    writer.writeDateOnlyValue("issuedDate", personCertification.issuedDate);
    writer.writeStringValue("issuingAuthority", personCertification.issuingAuthority);
    writer.writeStringValue("issuingCompany", personCertification.issuingCompany);
    writer.writeDateOnlyValue("startDate", personCertification.startDate);
    writer.writeStringValue("thumbnailUrl", personCertification.thumbnailUrl);
    writer.writeStringValue("webUrl", personCertification.webUrl);
}

function serializePersonInterest(writer, personInterest = {}) {
    serializeItemFacet(writer, personInterest);
    writer.writeCollectionOfPrimitiveValues("categories", personInterest.categories);
    writer.writeCollectionOfPrimitiveValues("collaborationTags", personInterest.collaborationTags);
    writer.writeStringValue("description", personInterest.description);
    writer.writeStringValue("displayName", personInterest.displayName);
    writer.writeStringValue("thumbnailUrl", personInterest.thumbnailUrl);
    writer.writeStringValue("webUrl", personInterest.webUrl);
}

function serializePersonNamePronounciation(writer, personNamePronounciation = {}) {
    writer.writeStringValue("displayName", personNamePronounciation.displayName);
    writer.writeStringValue("first", personNamePronounciation.first);
    writer.writeStringValue("last", personNamePronounciation.last);
    writer.writeStringValue("maiden", personNamePronounciation.maiden);
    writer.writeStringValue("middle", personNamePronounciation.middle);
}

function serializePersonName(writer, personName = {}) {
    serializeItemFacet(writer, personName);
    writer.writeStringValue("displayName", personName.displayName);
    writer.writeStringValue("first", personName.first);
    writer.writeStringValue("initials", personName.initials);
    writer.writeStringValue("languageTag", personName.languageTag);
    writer.writeStringValue("last", personName.last);
    writer.writeStringValue("maiden", personName.maiden);
    writer.writeStringValue("middle", personName.middle);
    writer.writeStringValue("nickname", personName.nickname);
    writer.writeObjectValueFromMethod("pronunciation", personName.pronunciation, serializePersonNamePronounciation);
    writer.writeStringValue("suffix", personName.suffix);
    writer.writeStringValue("title", personName.title);
}

function serializePersonWebsite(writer, personWebsite = {}) {
    serializeItemFacet(writer, personWebsite);
    writer.writeCollectionOfPrimitiveValues("categories", personWebsite.categories);
    writer.writeStringValue("description", personWebsite.description);
    writer.writeStringValue("displayName", personWebsite.displayName);
    writer.writeStringValue("thumbnailUrl", personWebsite.thumbnailUrl);
    writer.writeStringValue("webUrl", personWebsite.webUrl);
}

function serializeCompanyDetail(writer, companyDetail = {}) {
    writer.writeObjectValueFromMethod("address", companyDetail.address, serializePhysicalAddress);
    writer.writeStringValue("department", companyDetail.department);
    writer.writeStringValue("displayName", companyDetail.displayName);
    writer.writeStringValue("officeLocation", companyDetail.officeLocation);
    writer.writeStringValue("pronunciation", companyDetail.pronunciation);
    writer.writeStringValue("webUrl", companyDetail.webUrl);
}

function serializePositionDetail(writer, positionDetail = {}) {
    writer.writeObjectValueFromMethod("company", positionDetail.company, serializeCompanyDetail);
    writer.writeStringValue("description", positionDetail.description);
    writer.writeDateOnlyValue("endMonthYear", positionDetail.endMonthYear);
    writer.writeStringValue("jobTitle", positionDetail.jobTitle);
    writer.writeStringValue("role", positionDetail.role);
    writer.writeDateOnlyValue("startMonthYear", positionDetail.startMonthYear);
    writer.writeStringValue("summary", positionDetail.summary);
}

function serializeRelatedPerson(writer, relatedPerson = {}) {
    writer.writeStringValue("displayName", relatedPerson.displayName);
    writer.writeEnumValue("relationship", relatedPerson.relationship);
    writer.writeStringValue("userPrincipalName", relatedPerson.userPrincipalName);
}

function serializeProjectParticipation(writer, projectParticipation = {}) {
    serializeItemFacet(writer, projectParticipation);
    writer.writeCollectionOfPrimitiveValues("categories", projectParticipation.categories);
    writer.writeObjectValueFromMethod("client", projectParticipation.client, serializeCompanyDetail);
    writer.writeCollectionOfPrimitiveValues("collaborationTags", projectParticipation.collaborationTags);
    writer.writeCollectionOfObjectValuesFromMethod("colleagues", projectParticipation.colleagues, serializeRelatedPerson);
    writer.writeObjectValueFromMethod("detail", projectParticipation.detail, serializePositionDetail);
    writer.writeStringValue("displayName", projectParticipation.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("sponsors", projectParticipation.sponsors, serializeRelatedPerson);
    writer.writeStringValue("thumbnailUrl", projectParticipation.thumbnailUrl);
}

function serializeSkillProficiency(writer, skillProficiency = {}) {
    serializeItemFacet(writer, skillProficiency);
    writer.writeCollectionOfPrimitiveValues("categories", skillProficiency.categories);
    writer.writeCollectionOfPrimitiveValues("collaborationTags", skillProficiency.collaborationTags);
    writer.writeStringValue("displayName", skillProficiency.displayName);
    writer.writeEnumValue("proficiency", skillProficiency.proficiency);
    writer.writeStringValue("thumbnailUrl", skillProficiency.thumbnailUrl);
    writer.writeStringValue("webUrl", skillProficiency.webUrl);
}

function serializeUserAccountInformation(writer, userAccountInformation = {}) {
    serializeItemFacet(writer, userAccountInformation);
    writer.writeStringValue("ageGroup", userAccountInformation.ageGroup);
    writer.writeStringValue("countryCode", userAccountInformation.countryCode);
    writer.writeObjectValueFromMethod("preferredLanguageTag", userAccountInformation.preferredLanguageTag, serializeLocaleInfo);
    writer.writeStringValue("userPrincipalName", userAccountInformation.userPrincipalName);
}

function serializeServiceInformation(writer, serviceInformation = {}) {
    writer.writeStringValue("name", serviceInformation.name);
    writer.writeStringValue("webUrl", serviceInformation.webUrl);
}

function serializeWebAccount(writer, webAccount = {}) {
    serializeItemFacet(writer, webAccount);
    writer.writeStringValue("description", webAccount.description);
    writer.writeObjectValueFromMethod("service", webAccount.service, serializeServiceInformation);
    writer.writeStringValue("statusMessage", webAccount.statusMessage);
    writer.writeStringValue("thumbnailUrl", webAccount.thumbnailUrl);
    writer.writeStringValue("userId", webAccount.userId);
    writer.writeStringValue("webUrl", webAccount.webUrl);
}

function serializeWorkPosition(writer, workPosition = {}) {
    serializeItemFacet(writer, workPosition);
    writer.writeCollectionOfPrimitiveValues("categories", workPosition.categories);
    writer.writeCollectionOfObjectValuesFromMethod("colleagues", workPosition.colleagues, serializeRelatedPerson);
    writer.writeObjectValueFromMethod("detail", workPosition.detail, serializePositionDetail);
    writer.writeBooleanValue("isCurrent", workPosition.isCurrent);
    writer.writeObjectValueFromMethod("manager", workPosition.manager, serializeRelatedPerson);
}

function serializeProfile(writer, profile = {}) {
    serializeEntity(writer, profile);
    writer.writeCollectionOfObjectValuesFromMethod("account", profile.account, serializeUserAccountInformation);
    writer.writeCollectionOfObjectValuesFromMethod("addresses", profile.addresses, serializeItemAddress);
    writer.writeCollectionOfObjectValuesFromMethod("anniversaries", profile.anniversaries, serializePersonAnnualEvent);
    writer.writeCollectionOfObjectValuesFromMethod("awards", profile.awards, serializePersonAward);
    writer.writeCollectionOfObjectValuesFromMethod("certifications", profile.certifications, serializePersonCertification);
    writer.writeCollectionOfObjectValuesFromMethod("educationalActivities", profile.educationalActivities, serializeEducationalActivity);
    writer.writeCollectionOfObjectValuesFromMethod("emails", profile.emails, serializeItemEmail);
    writer.writeCollectionOfObjectValuesFromMethod("interests", profile.interests, serializePersonInterest);
    writer.writeCollectionOfObjectValuesFromMethod("languages", profile.languages, serializeLanguageProficiency);
    writer.writeCollectionOfObjectValuesFromMethod("names", profile.names, serializePersonName);
    writer.writeCollectionOfObjectValuesFromMethod("notes", profile.notes, serializePersonAnnotation);
    writer.writeCollectionOfObjectValuesFromMethod("patents", profile.patents, serializeItemPatent);
    writer.writeCollectionOfObjectValuesFromMethod("phones", profile.phones, serializeItemPhone);
    writer.writeCollectionOfObjectValuesFromMethod("positions", profile.positions, serializeWorkPosition);
    writer.writeCollectionOfObjectValuesFromMethod("projects", profile.projects, serializeProjectParticipation);
    writer.writeCollectionOfObjectValuesFromMethod("publications", profile.publications, serializeItemPublication);
    writer.writeCollectionOfObjectValuesFromMethod("skills", profile.skills, serializeSkillProficiency);
    writer.writeCollectionOfObjectValuesFromMethod("webAccounts", profile.webAccounts, serializeWebAccount);
    writer.writeCollectionOfObjectValuesFromMethod("websites", profile.websites, serializePersonWebsite);
}

function serializeProvisionedPlan(writer, provisionedPlan = {}) {
    writer.writeStringValue("capabilityStatus", provisionedPlan.capabilityStatus);
    writer.writeStringValue("provisioningStatus", provisionedPlan.provisioningStatus);
    writer.writeStringValue("service", provisionedPlan.service);
}

function serializeScopedRoleMembership(writer, scopedRoleMembership = {}) {
    serializeEntity(writer, scopedRoleMembership);
    writer.writeStringValue("administrativeUnitId", scopedRoleMembership.administrativeUnitId);
    writer.writeStringValue("roleId", scopedRoleMembership.roleId);
    writer.writeObjectValueFromMethod("roleMemberInfo", scopedRoleMembership.roleMemberInfo, serializeIdentity);
}

function serializeAddIn(writer, addIn = {}) {
    writer.writeStringValue("id", addIn.id);
    writer.writeCollectionOfObjectValuesFromMethod("properties", addIn.properties, serializeKeyValue);
    writer.writeStringValue("type", addIn.type);
}

function serializeKeyCredentialConfiguration(writer, keyCredentialConfiguration = {}) {
    writer.writeDurationValue("maxLifetime", keyCredentialConfiguration.maxLifetime);
    writer.writeDateValue("restrictForAppsCreatedAfterDateTime", keyCredentialConfiguration.restrictForAppsCreatedAfterDateTime);
    writer.writeEnumValue("restrictionType", keyCredentialConfiguration.restrictionType);
}

function serializePasswordCredentialConfiguration(writer, passwordCredentialConfiguration = {}) {
    writer.writeDurationValue("maxLifetime", passwordCredentialConfiguration.maxLifetime);
    writer.writeDateValue("restrictForAppsCreatedAfterDateTime", passwordCredentialConfiguration.restrictForAppsCreatedAfterDateTime);
    writer.writeEnumValue("restrictionType", passwordCredentialConfiguration.restrictionType);
}

function serializeAppManagementConfiguration(writer, appManagementConfiguration = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("keyCredentials", appManagementConfiguration.keyCredentials, serializeKeyCredentialConfiguration);
    writer.writeCollectionOfObjectValuesFromMethod("passwordCredentials", appManagementConfiguration.passwordCredentials, serializePasswordCredentialConfiguration);
}

function serializePolicyBase(writer, policyBase = {}) {
    serializeDirectoryObject(writer, policyBase);
    writer.writeStringValue("description", policyBase.description);
    writer.writeStringValue("displayName", policyBase.displayName);
}

function serializeAppManagementPolicy(writer, appManagementPolicy = {}) {
    serializePolicyBase(writer, appManagementPolicy);
    writer.writeCollectionOfObjectValuesFromMethod("appliesTo", appManagementPolicy.appliesTo, serializeDirectoryObject);
    writer.writeBooleanValue("isEnabled", appManagementPolicy.isEnabled);
    writer.writeObjectValueFromMethod("restrictions", appManagementPolicy.restrictions, serializeAppManagementConfiguration);
}

function serializeAppRole(writer, appRole = {}) {
    writer.writeCollectionOfPrimitiveValues("allowedMemberTypes", appRole.allowedMemberTypes);
    writer.writeStringValue("description", appRole.description);
    writer.writeStringValue("displayName", appRole.displayName);
    writer.writeStringValue("id", appRole.id);
    writer.writeBooleanValue("isEnabled", appRole.isEnabled);
    writer.writeStringValue("origin", appRole.origin);
    writer.writeStringValue("value", appRole.value);
}

function serializeStsPolicy(writer, stsPolicy = {}) {
    serializePolicyBase(writer, stsPolicy);
    writer.writeCollectionOfObjectValuesFromMethod("appliesTo", stsPolicy.appliesTo, serializeDirectoryObject);
    writer.writeCollectionOfPrimitiveValues("definition", stsPolicy.definition);
    writer.writeBooleanValue("isOrganizationDefault", stsPolicy.isOrganizationDefault);
}

function serializeClaimsMappingPolicy(writer, claimsMappingPolicy = {}) {
    serializeStsPolicy(writer, claimsMappingPolicy);
}

function serializeDelegatedPermissionClassification(writer, delegatedPermissionClassification = {}) {
    serializeEntity(writer, delegatedPermissionClassification);
    writer.writeEnumValue("classification", delegatedPermissionClassification.classification);
    writer.writeStringValue("permissionId", delegatedPermissionClassification.permissionId);
    writer.writeStringValue("permissionName", delegatedPermissionClassification.permissionName);
}

function serializeFederatedIdentityCredential(writer, federatedIdentityCredential = {}) {
    serializeEntity(writer, federatedIdentityCredential);
    writer.writeCollectionOfPrimitiveValues("audiences", federatedIdentityCredential.audiences);
    writer.writeStringValue("description", federatedIdentityCredential.description);
    writer.writeStringValue("issuer", federatedIdentityCredential.issuer);
    writer.writeStringValue("name", federatedIdentityCredential.name);
    writer.writeStringValue("subject", federatedIdentityCredential.subject);
}

function serializeHomeRealmDiscoveryPolicy(writer, homeRealmDiscoveryPolicy = {}) {
    serializeStsPolicy(writer, homeRealmDiscoveryPolicy);
}

function serializeInformationalUrl(writer, informationalUrl = {}) {
    writer.writeStringValue("logoUrl", informationalUrl.logoUrl);
    writer.writeStringValue("marketingUrl", informationalUrl.marketingUrl);
    writer.writeStringValue("privacyStatementUrl", informationalUrl.privacyStatementUrl);
    writer.writeStringValue("supportUrl", informationalUrl.supportUrl);
    writer.writeStringValue("termsOfServiceUrl", informationalUrl.termsOfServiceUrl);
}

function serializeKeyCredential(writer, keyCredential = {}) {
    writer.writeStringValue("customKeyIdentifier", keyCredential.customKeyIdentifier);
    writer.writeStringValue("displayName", keyCredential.displayName);
    writer.writeDateValue("endDateTime", keyCredential.endDateTime);
    writer.writeStringValue("key", keyCredential.key);
    writer.writeStringValue("keyId", keyCredential.keyId);
    writer.writeDateValue("startDateTime", keyCredential.startDateTime);
    writer.writeStringValue("type", keyCredential.type);
    writer.writeStringValue("usage", keyCredential.usage);
}

function serializePasswordCredential(writer, passwordCredential = {}) {
    writer.writeStringValue("customKeyIdentifier", passwordCredential.customKeyIdentifier);
    writer.writeStringValue("displayName", passwordCredential.displayName);
    writer.writeDateValue("endDateTime", passwordCredential.endDateTime);
    writer.writeStringValue("hint", passwordCredential.hint);
    writer.writeStringValue("keyId", passwordCredential.keyId);
    writer.writeStringValue("secretText", passwordCredential.secretText);
    writer.writeDateValue("startDateTime", passwordCredential.startDateTime);
}

function serializePasswordSingleSignOnField(writer, passwordSingleSignOnField = {}) {
    writer.writeStringValue("customizedLabel", passwordSingleSignOnField.customizedLabel);
    writer.writeStringValue("defaultLabel", passwordSingleSignOnField.defaultLabel);
    writer.writeStringValue("fieldId", passwordSingleSignOnField.fieldId);
    writer.writeStringValue("type", passwordSingleSignOnField.type);
}

function serializePasswordSingleSignOnSettings(writer, passwordSingleSignOnSettings = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("fields", passwordSingleSignOnSettings.fields, serializePasswordSingleSignOnField);
}

function serializePermissionScope(writer, permissionScope = {}) {
    writer.writeStringValue("adminConsentDescription", permissionScope.adminConsentDescription);
    writer.writeStringValue("adminConsentDisplayName", permissionScope.adminConsentDisplayName);
    writer.writeStringValue("id", permissionScope.id);
    writer.writeBooleanValue("isEnabled", permissionScope.isEnabled);
    writer.writeStringValue("origin", permissionScope.origin);
    writer.writeStringValue("type", permissionScope.type);
    writer.writeStringValue("userConsentDescription", permissionScope.userConsentDescription);
    writer.writeStringValue("userConsentDisplayName", permissionScope.userConsentDisplayName);
    writer.writeStringValue("value", permissionScope.value);
}

function serializeSamlSingleSignOnSettings(writer, samlSingleSignOnSettings = {}) {
    writer.writeStringValue("relayState", samlSingleSignOnSettings.relayState);
}

function serializeSynchronizationSchedule(writer, synchronizationSchedule = {}) {
    writer.writeDateValue("expiration", synchronizationSchedule.expiration);
    writer.writeDurationValue("interval", synchronizationSchedule.interval);
    writer.writeEnumValue("state", synchronizationSchedule.state);
}

function serializeMetadataEntry(writer, metadataEntry = {}) {
    writer.writeStringValue("key", metadataEntry.key);
    writer.writeStringValue("value", metadataEntry.value);
}

function serializeReferencedObject(writer, referencedObject = {}) {
    writer.writeStringValue("referencedObjectName", referencedObject.referencedObjectName);
    writer.writeStringValue("referencedProperty", referencedObject.referencedProperty);
}

function serializeStringKeyStringValuePair(writer, stringKeyStringValuePair = {}) {
    writer.writeStringValue("key", stringKeyStringValuePair.key);
    writer.writeStringValue("value", stringKeyStringValuePair.value);
}

function serializeAttributeDefinition(writer, attributeDefinition = {}) {
    writer.writeBooleanValue("anchor", attributeDefinition.anchor);
    writer.writeCollectionOfObjectValuesFromMethod("apiExpressions", attributeDefinition.apiExpressions, serializeStringKeyStringValuePair);
    writer.writeBooleanValue("caseExact", attributeDefinition.caseExact);
    writer.writeStringValue("defaultValue", attributeDefinition.defaultValue);
    writer.writeBooleanValue("flowNullValues", attributeDefinition.flowNullValues);
    writer.writeCollectionOfObjectValuesFromMethod("metadata", attributeDefinition.metadata, serializeMetadataEntry);
    writer.writeBooleanValue("multivalued", attributeDefinition.multivalued);
    writer.writeEnumValue("mutability", attributeDefinition.mutability);
    writer.writeStringValue("name", attributeDefinition.name);
    writer.writeCollectionOfObjectValuesFromMethod("referencedObjects", attributeDefinition.referencedObjects, serializeReferencedObject);
    writer.writeBooleanValue("required", attributeDefinition.required);
    writer.writeEnumValue("type", attributeDefinition.type);
}

function serializeObjectDefinition(writer, objectDefinition = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("attributes", objectDefinition.attributes, serializeAttributeDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("metadata", objectDefinition.metadata, serializeMetadataEntry);
    writer.writeStringValue("name", objectDefinition.name);
    writer.writeCollectionOfPrimitiveValues("supportedApis", objectDefinition.supportedApis);
}

function serializeDirectoryDefinition(writer, directoryDefinition = {}) {
    serializeEntity(writer, directoryDefinition);
    writer.writeEnumValue("discoverabilities", directoryDefinition.discoverabilities);
    writer.writeDateValue("discoveryDateTime", directoryDefinition.discoveryDateTime);
    writer.writeStringValue("name", directoryDefinition.name);
    writer.writeCollectionOfObjectValuesFromMethod("objects", directoryDefinition.objects, serializeObjectDefinition);
    writer.writeBooleanValue("readOnly", directoryDefinition.readOnly);
    writer.writeStringValue("version", directoryDefinition.version);
}

function serializeStringKeyAttributeMappingSourceValuePair(writer, stringKeyAttributeMappingSourceValuePair = {}) {
    writer.writeStringValue("key", stringKeyAttributeMappingSourceValuePair.key);
    writer.writeObjectValueFromMethod("value", stringKeyAttributeMappingSourceValuePair.value, serializeAttributeMappingSource);
}

function serializeAttributeMappingSource(writer, attributeMappingSource = {}) {
    writer.writeStringValue("expression", attributeMappingSource.expression);
    writer.writeStringValue("name", attributeMappingSource.name);
    writer.writeCollectionOfObjectValuesFromMethod("parameters", attributeMappingSource.parameters, serializeStringKeyAttributeMappingSourceValuePair);
    writer.writeEnumValue("type", attributeMappingSource.type);
}

function serializeAttributeMapping(writer, attributeMapping = {}) {
    writer.writeStringValue("defaultValue", attributeMapping.defaultValue);
    writer.writeBooleanValue("exportMissingReferences", attributeMapping.exportMissingReferences);
    writer.writeEnumValue("flowBehavior", attributeMapping.flowBehavior);
    writer.writeEnumValue("flowType", attributeMapping.flowType);
    writer.writeNumberValue("matchingPriority", attributeMapping.matchingPriority);
    writer.writeObjectValueFromMethod("source", attributeMapping.source, serializeAttributeMappingSource);
    writer.writeStringValue("targetAttributeName", attributeMapping.targetAttributeName);
}

function serializeFilterOperand(writer, filterOperand = {}) {
    writer.writeCollectionOfPrimitiveValues("values", filterOperand.values);
}

function serializeFilterClause(writer, filterClause = {}) {
    writer.writeStringValue("operatorName", filterClause.operatorName);
    writer.writeStringValue("sourceOperandName", filterClause.sourceOperandName);
    writer.writeObjectValueFromMethod("targetOperand", filterClause.targetOperand, serializeFilterOperand);
}

function serializeFilterGroup(writer, filterGroup = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("clauses", filterGroup.clauses, serializeFilterClause);
    writer.writeStringValue("name", filterGroup.name);
}

function serializeFilter(writer, filter = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("categoryFilterGroups", filter.categoryFilterGroups, serializeFilterGroup);
    writer.writeCollectionOfObjectValuesFromMethod("groups", filter.groups, serializeFilterGroup);
    writer.writeCollectionOfObjectValuesFromMethod("inputFilterGroups", filter.inputFilterGroups, serializeFilterGroup);
}

function serializeObjectMapping(writer, objectMapping = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("attributeMappings", objectMapping.attributeMappings, serializeAttributeMapping);
    writer.writeBooleanValue("enabled", objectMapping.enabled);
    writer.writeEnumValue("flowTypes", objectMapping.flowTypes);
    writer.writeCollectionOfObjectValuesFromMethod("metadata", objectMapping.metadata, serializeMetadataEntry);
    writer.writeStringValue("name", objectMapping.name);
    writer.writeObjectValueFromMethod("scope", objectMapping.scope, serializeFilter);
    writer.writeStringValue("sourceObjectName", objectMapping.sourceObjectName);
    writer.writeStringValue("targetObjectName", objectMapping.targetObjectName);
}

function serializeSynchronizationRule(writer, synchronizationRule = {}) {
    writer.writeBooleanValue("editable", synchronizationRule.editable);
    writer.writeStringValue("id", synchronizationRule.id);
    writer.writeCollectionOfObjectValuesFromMethod("metadata", synchronizationRule.metadata, serializeStringKeyStringValuePair);
    writer.writeStringValue("name", synchronizationRule.name);
    writer.writeCollectionOfObjectValuesFromMethod("objectMappings", synchronizationRule.objectMappings, serializeObjectMapping);
    writer.writeNumberValue("priority", synchronizationRule.priority);
    writer.writeStringValue("sourceDirectoryName", synchronizationRule.sourceDirectoryName);
    writer.writeStringValue("targetDirectoryName", synchronizationRule.targetDirectoryName);
}

function serializeSynchronizationSchema(writer, synchronizationSchema = {}) {
    serializeEntity(writer, synchronizationSchema);
    writer.writeCollectionOfObjectValuesFromMethod("directories", synchronizationSchema.directories, serializeDirectoryDefinition);
    writer.writeCollectionOfObjectValuesFromMethod("synchronizationRules", synchronizationSchema.synchronizationRules, serializeSynchronizationRule);
    writer.writeStringValue("version", synchronizationSchema.version);
}

function serializeStringKeyLongValuePair(writer, stringKeyLongValuePair = {}) {
    writer.writeStringValue("key", stringKeyLongValuePair.key);
    writer.writeNumberValue("value", stringKeyLongValuePair.value);
}

function serializeSynchronizationProgress(writer, synchronizationProgress = {}) {
    writer.writeNumberValue("completedUnits", synchronizationProgress.completedUnits);
    writer.writeDateValue("progressObservationDateTime", synchronizationProgress.progressObservationDateTime);
    writer.writeNumberValue("totalUnits", synchronizationProgress.totalUnits);
    writer.writeStringValue("units", synchronizationProgress.units);
}

function serializeSynchronizationError(writer, synchronizationError = {}) {
    writer.writeStringValue("code", synchronizationError.code);
    writer.writeStringValue("message", synchronizationError.message);
    writer.writeBooleanValue("tenantActionable", synchronizationError.tenantActionable);
}

function serializeSynchronizationQuarantine(writer, synchronizationQuarantine = {}) {
    writer.writeDateValue("currentBegan", synchronizationQuarantine.currentBegan);
    writer.writeObjectValueFromMethod("error_escaped", synchronizationQuarantine.error_escaped, serializeSynchronizationError);
    writer.writeDateValue("nextAttempt", synchronizationQuarantine.nextAttempt);
    writer.writeEnumValue("reason", synchronizationQuarantine.reason);
    writer.writeDateValue("seriesBegan", synchronizationQuarantine.seriesBegan);
    writer.writeNumberValue("seriesCount", synchronizationQuarantine.seriesCount);
}

function serializeSynchronizationTaskExecution(writer, synchronizationTaskExecution = {}) {
    writer.writeStringValue("activityIdentifier", synchronizationTaskExecution.activityIdentifier);
    writer.writeNumberValue("countEntitled", synchronizationTaskExecution.countEntitled);
    writer.writeNumberValue("countEntitledForProvisioning", synchronizationTaskExecution.countEntitledForProvisioning);
    writer.writeNumberValue("countEscrowed", synchronizationTaskExecution.countEscrowed);
    writer.writeNumberValue("countEscrowedRaw", synchronizationTaskExecution.countEscrowedRaw);
    writer.writeNumberValue("countExported", synchronizationTaskExecution.countExported);
    writer.writeNumberValue("countExports", synchronizationTaskExecution.countExports);
    writer.writeNumberValue("countImported", synchronizationTaskExecution.countImported);
    writer.writeNumberValue("countImportedDeltas", synchronizationTaskExecution.countImportedDeltas);
    writer.writeNumberValue("countImportedReferenceDeltas", synchronizationTaskExecution.countImportedReferenceDeltas);
    writer.writeObjectValueFromMethod("error_escaped", synchronizationTaskExecution.error_escaped, serializeSynchronizationError);
    writer.writeEnumValue("state", synchronizationTaskExecution.state);
    writer.writeDateValue("timeBegan", synchronizationTaskExecution.timeBegan);
    writer.writeDateValue("timeEnded", synchronizationTaskExecution.timeEnded);
}

function serializeSynchronizationStatus(writer, synchronizationStatus = {}) {
    writer.writeEnumValue("code", synchronizationStatus.code);
    writer.writeNumberValue("countSuccessiveCompleteFailures", synchronizationStatus.countSuccessiveCompleteFailures);
    writer.writeBooleanValue("escrowsPruned", synchronizationStatus.escrowsPruned);
    writer.writeObjectValueFromMethod("lastExecution", synchronizationStatus.lastExecution, serializeSynchronizationTaskExecution);
    writer.writeObjectValueFromMethod("lastSuccessfulExecution", synchronizationStatus.lastSuccessfulExecution, serializeSynchronizationTaskExecution);
    writer.writeObjectValueFromMethod("lastSuccessfulExecutionWithExports", synchronizationStatus.lastSuccessfulExecutionWithExports, serializeSynchronizationTaskExecution);
    writer.writeCollectionOfObjectValuesFromMethod("progress", synchronizationStatus.progress, serializeSynchronizationProgress);
    writer.writeObjectValueFromMethod("quarantine", synchronizationStatus.quarantine, serializeSynchronizationQuarantine);
    writer.writeDateValue("steadyStateFirstAchievedTime", synchronizationStatus.steadyStateFirstAchievedTime);
    writer.writeDateValue("steadyStateLastAchievedTime", synchronizationStatus.steadyStateLastAchievedTime);
    writer.writeCollectionOfObjectValuesFromMethod("synchronizedEntryCountByType", synchronizationStatus.synchronizedEntryCountByType, serializeStringKeyLongValuePair);
    writer.writeStringValue("troubleshootingUrl", synchronizationStatus.troubleshootingUrl);
}

function serializeSynchronizationJob(writer, synchronizationJob = {}) {
    serializeEntity(writer, synchronizationJob);
    writer.writeObjectValueFromMethod("schedule", synchronizationJob.schedule, serializeSynchronizationSchedule);
    writer.writeObjectValueFromMethod("schema", synchronizationJob.schema, serializeSynchronizationSchema);
    writer.writeObjectValueFromMethod("status", synchronizationJob.status, serializeSynchronizationStatus);
    writer.writeCollectionOfObjectValuesFromMethod("synchronizationJobSettings", synchronizationJob.synchronizationJobSettings, serializeKeyValuePair);
    writer.writeStringValue("templateId", synchronizationJob.templateId);
}

function serializeSynchronizationSecretKeyStringValuePair(writer, synchronizationSecretKeyStringValuePair = {}) {
    writer.writeEnumValue("key", synchronizationSecretKeyStringValuePair.key);
    writer.writeStringValue("value", synchronizationSecretKeyStringValuePair.value);
}

function serializeSynchronizationTemplate(writer, synchronizationTemplate = {}) {
    serializeEntity(writer, synchronizationTemplate);
    writer.writeStringValue("applicationId", synchronizationTemplate.applicationId);
    writer.writeBooleanValue("default", synchronizationTemplate.default_escaped);
    writer.writeStringValue("description", synchronizationTemplate.description);
    writer.writeBooleanValue("discoverable", synchronizationTemplate.discoverable);
    writer.writeStringValue("factoryTag", synchronizationTemplate.factoryTag);
    writer.writeCollectionOfObjectValuesFromMethod("metadata", synchronizationTemplate.metadata, serializeMetadataEntry);
    writer.writeObjectValueFromMethod("schema", synchronizationTemplate.schema, serializeSynchronizationSchema);
}

function serializeSynchronization(writer, synchronization = {}) {
    serializeEntity(writer, synchronization);
    writer.writeCollectionOfObjectValuesFromMethod("jobs", synchronization.jobs, serializeSynchronizationJob);
    writer.writeCollectionOfObjectValuesFromMethod("secrets", synchronization.secrets, serializeSynchronizationSecretKeyStringValuePair);
    writer.writeCollectionOfObjectValuesFromMethod("templates", synchronization.templates, serializeSynchronizationTemplate);
}

function serializeTokenIssuancePolicy(writer, tokenIssuancePolicy = {}) {
    serializeStsPolicy(writer, tokenIssuancePolicy);
}

function serializeTokenLifetimePolicy(writer, tokenLifetimePolicy = {}) {
    serializeStsPolicy(writer, tokenLifetimePolicy);
}

function serializeVerifiedPublisher(writer, verifiedPublisher = {}) {
    writer.writeDateValue("addedDateTime", verifiedPublisher.addedDateTime);
    writer.writeStringValue("displayName", verifiedPublisher.displayName);
    writer.writeStringValue("verifiedPublisherId", verifiedPublisher.verifiedPublisherId);
}

function serializeServicePrincipal(writer, servicePrincipal = {}) {
    serializeDirectoryObject(writer, servicePrincipal);
    writer.writeBooleanValue("accountEnabled", servicePrincipal.accountEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("addIns", servicePrincipal.addIns, serializeAddIn);
    writer.writeCollectionOfPrimitiveValues("alternativeNames", servicePrincipal.alternativeNames);
    writer.writeStringValue("appDescription", servicePrincipal.appDescription);
    writer.writeStringValue("appDisplayName", servicePrincipal.appDisplayName);
    writer.writeStringValue("appId", servicePrincipal.appId);
    writer.writeStringValue("applicationTemplateId", servicePrincipal.applicationTemplateId);
    writer.writeCollectionOfObjectValuesFromMethod("appManagementPolicies", servicePrincipal.appManagementPolicies, serializeAppManagementPolicy);
    writer.writeStringValue("appOwnerOrganizationId", servicePrincipal.appOwnerOrganizationId);
    writer.writeCollectionOfObjectValuesFromMethod("appRoleAssignedTo", servicePrincipal.appRoleAssignedTo, serializeAppRoleAssignment);
    writer.writeBooleanValue("appRoleAssignmentRequired", servicePrincipal.appRoleAssignmentRequired);
    writer.writeCollectionOfObjectValuesFromMethod("appRoleAssignments", servicePrincipal.appRoleAssignments, serializeAppRoleAssignment);
    writer.writeCollectionOfObjectValuesFromMethod("appRoles", servicePrincipal.appRoles, serializeAppRole);
    writer.writeCollectionOfObjectValuesFromMethod("claimsMappingPolicies", servicePrincipal.claimsMappingPolicies, serializeClaimsMappingPolicy);
    writer.writeCollectionOfObjectValuesFromMethod("createdObjects", servicePrincipal.createdObjects, serializeDirectoryObject);
    writer.writeObjectValueFromMethod("customSecurityAttributes", servicePrincipal.customSecurityAttributes, serializeCustomSecurityAttributeValue);
    writer.writeCollectionOfObjectValuesFromMethod("delegatedPermissionClassifications", servicePrincipal.delegatedPermissionClassifications, serializeDelegatedPermissionClassification);
    writer.writeStringValue("description", servicePrincipal.description);
    writer.writeStringValue("disabledByMicrosoftStatus", servicePrincipal.disabledByMicrosoftStatus);
    writer.writeStringValue("displayName", servicePrincipal.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("endpoints", servicePrincipal.endpoints, serializeEndpoint);
    writer.writeStringValue("errorUrl", servicePrincipal.errorUrl);
    writer.writeCollectionOfObjectValuesFromMethod("federatedIdentityCredentials", servicePrincipal.federatedIdentityCredentials, serializeFederatedIdentityCredential);
    writer.writeStringValue("homepage", servicePrincipal.homepage);
    writer.writeCollectionOfObjectValuesFromMethod("homeRealmDiscoveryPolicies", servicePrincipal.homeRealmDiscoveryPolicies, serializeHomeRealmDiscoveryPolicy);
    writer.writeObjectValueFromMethod("info", servicePrincipal.info, serializeInformationalUrl);
    writer.writeCollectionOfObjectValuesFromMethod("keyCredentials", servicePrincipal.keyCredentials, serializeKeyCredential);
    writer.writeCollectionOfObjectValuesFromMethod("licenseDetails", servicePrincipal.licenseDetails, serializeLicenseDetails);
    writer.writeStringValue("loginUrl", servicePrincipal.loginUrl);
    writer.writeStringValue("logoutUrl", servicePrincipal.logoutUrl);
    writer.writeCollectionOfObjectValuesFromMethod("memberOf", servicePrincipal.memberOf, serializeDirectoryObject);
    writer.writeStringValue("notes", servicePrincipal.notes);
    writer.writeCollectionOfPrimitiveValues("notificationEmailAddresses", servicePrincipal.notificationEmailAddresses);
    writer.writeCollectionOfObjectValuesFromMethod("oauth2PermissionGrants", servicePrincipal.oauth2PermissionGrants, serializeOAuth2PermissionGrant);
    writer.writeCollectionOfObjectValuesFromMethod("ownedObjects", servicePrincipal.ownedObjects, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("owners", servicePrincipal.owners, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("passwordCredentials", servicePrincipal.passwordCredentials, serializePasswordCredential);
    writer.writeObjectValueFromMethod("passwordSingleSignOnSettings", servicePrincipal.passwordSingleSignOnSettings, serializePasswordSingleSignOnSettings);
    writer.writeStringValue("preferredSingleSignOnMode", servicePrincipal.preferredSingleSignOnMode);
    writer.writeDateValue("preferredTokenSigningKeyEndDateTime", servicePrincipal.preferredTokenSigningKeyEndDateTime);
    writer.writeStringValue("preferredTokenSigningKeyThumbprint", servicePrincipal.preferredTokenSigningKeyThumbprint);
    writer.writeCollectionOfObjectValuesFromMethod("publishedPermissionScopes", servicePrincipal.publishedPermissionScopes, serializePermissionScope);
    writer.writeStringValue("publisherName", servicePrincipal.publisherName);
    writer.writeCollectionOfPrimitiveValues("replyUrls", servicePrincipal.replyUrls);
    writer.writeStringValue("samlMetadataUrl", servicePrincipal.samlMetadataUrl);
    writer.writeObjectValueFromMethod("samlSingleSignOnSettings", servicePrincipal.samlSingleSignOnSettings, serializeSamlSingleSignOnSettings);
    writer.writeCollectionOfPrimitiveValues("servicePrincipalNames", servicePrincipal.servicePrincipalNames);
    writer.writeStringValue("servicePrincipalType", servicePrincipal.servicePrincipalType);
    writer.writeStringValue("signInAudience", servicePrincipal.signInAudience);
    writer.writeObjectValueFromMethod("synchronization", servicePrincipal.synchronization, serializeSynchronization);
    writer.writeCollectionOfPrimitiveValues("tags", servicePrincipal.tags);
    writer.writeStringValue("tokenEncryptionKeyId", servicePrincipal.tokenEncryptionKeyId);
    writer.writeCollectionOfObjectValuesFromMethod("tokenIssuancePolicies", servicePrincipal.tokenIssuancePolicies, serializeTokenIssuancePolicy);
    writer.writeCollectionOfObjectValuesFromMethod("tokenLifetimePolicies", servicePrincipal.tokenLifetimePolicies, serializeTokenLifetimePolicy);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveMemberOf", servicePrincipal.transitiveMemberOf, serializeDirectoryObject);
    writer.writeObjectValueFromMethod("verifiedPublisher", servicePrincipal.verifiedPublisher, serializeVerifiedPublisher);
}

function serializeSignInActivity(writer, signInActivity = {}) {
    writer.writeDateValue("lastNonInteractiveSignInDateTime", signInActivity.lastNonInteractiveSignInDateTime);
    writer.writeStringValue("lastNonInteractiveSignInRequestId", signInActivity.lastNonInteractiveSignInRequestId);
    writer.writeDateValue("lastSignInDateTime", signInActivity.lastSignInDateTime);
    writer.writeStringValue("lastSignInRequestId", signInActivity.lastSignInRequestId);
}

function serializeAttachmentBase(writer, attachmentBase = {}) {
    serializeEntity(writer, attachmentBase);
    writer.writeStringValue("contentType", attachmentBase.contentType);
    writer.writeDateValue("lastModifiedDateTime", attachmentBase.lastModifiedDateTime);
    writer.writeStringValue("name", attachmentBase.name);
    writer.writeNumberValue("size", attachmentBase.size);
}

function serializeAttachmentSession(writer, attachmentSession = {}) {
    serializeEntity(writer, attachmentSession);
    writer.writeStringValue("content", attachmentSession.content);
    writer.writeDateValue("expirationDateTime", attachmentSession.expirationDateTime);
    writer.writeCollectionOfPrimitiveValues("nextExpectedRanges", attachmentSession.nextExpectedRanges);
}

function serializeChecklistItem(writer, checklistItem = {}) {
    serializeEntity(writer, checklistItem);
    writer.writeDateValue("checkedDateTime", checklistItem.checkedDateTime);
    writer.writeDateValue("createdDateTime", checklistItem.createdDateTime);
    writer.writeStringValue("displayName", checklistItem.displayName);
    writer.writeBooleanValue("isChecked", checklistItem.isChecked);
}

function serializeLinkedResource(writer, linkedResource = {}) {
    serializeEntity(writer, linkedResource);
    writer.writeStringValue("applicationName", linkedResource.applicationName);
    writer.writeStringValue("displayName", linkedResource.displayName);
    writer.writeStringValue("externalId", linkedResource.externalId);
    writer.writeStringValue("webUrl", linkedResource.webUrl);
}

function serializeTodoTask(writer, todoTask = {}) {
    serializeEntity(writer, todoTask);
    writer.writeCollectionOfObjectValuesFromMethod("attachments", todoTask.attachments, serializeAttachmentBase);
    writer.writeCollectionOfObjectValuesFromMethod("attachmentSessions", todoTask.attachmentSessions, serializeAttachmentSession);
    writer.writeObjectValueFromMethod("body", todoTask.body, serializeItemBody);
    writer.writeDateValue("bodyLastModifiedDateTime", todoTask.bodyLastModifiedDateTime);
    writer.writeCollectionOfPrimitiveValues("categories", todoTask.categories);
    writer.writeCollectionOfObjectValuesFromMethod("checklistItems", todoTask.checklistItems, serializeChecklistItem);
    writer.writeObjectValueFromMethod("completedDateTime", todoTask.completedDateTime, serializeDateTimeTimeZone);
    writer.writeDateValue("createdDateTime", todoTask.createdDateTime);
    writer.writeObjectValueFromMethod("dueDateTime", todoTask.dueDateTime, serializeDateTimeTimeZone);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", todoTask.extensions, serializeExtension);
    writer.writeBooleanValue("hasAttachments", todoTask.hasAttachments);
    writer.writeEnumValue("importance", todoTask.importance);
    writer.writeBooleanValue("isReminderOn", todoTask.isReminderOn);
    writer.writeDateValue("lastModifiedDateTime", todoTask.lastModifiedDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("linkedResources", todoTask.linkedResources, serializeLinkedResource);
    writer.writeObjectValueFromMethod("recurrence", todoTask.recurrence, serializePatternedRecurrence);
    writer.writeObjectValueFromMethod("reminderDateTime", todoTask.reminderDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValueFromMethod("startDateTime", todoTask.startDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue("status", todoTask.status);
    writer.writeStringValue("title", todoTask.title);
}

function serializeTodoTaskList(writer, todoTaskList = {}) {
    serializeEntity(writer, todoTaskList);
    writer.writeStringValue("displayName", todoTaskList.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", todoTaskList.extensions, serializeExtension);
    writer.writeBooleanValue("isOwner", todoTaskList.isOwner);
    writer.writeBooleanValue("isShared", todoTaskList.isShared);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", todoTaskList.tasks, serializeTodoTask);
    writer.writeEnumValue("wellknownListName", todoTaskList.wellknownListName);
}

function serializeTodo(writer, todo = {}) {
    serializeEntity(writer, todo);
    writer.writeCollectionOfObjectValuesFromMethod("lists", todo.lists, serializeTodoTaskList);
}

function serializeActivityHistoryItem(writer, activityHistoryItem = {}) {
    serializeEntity(writer, activityHistoryItem);
    writer.writeNumberValue("activeDurationSeconds", activityHistoryItem.activeDurationSeconds);
    writer.writeObjectValueFromMethod("activity", activityHistoryItem.activity, serializeUserActivity);
    writer.writeDateValue("createdDateTime", activityHistoryItem.createdDateTime);
    writer.writeDateValue("expirationDateTime", activityHistoryItem.expirationDateTime);
    writer.writeDateValue("lastActiveDateTime", activityHistoryItem.lastActiveDateTime);
    writer.writeDateValue("lastModifiedDateTime", activityHistoryItem.lastModifiedDateTime);
    writer.writeDateValue("startedDateTime", activityHistoryItem.startedDateTime);
    writer.writeEnumValue("status", activityHistoryItem.status);
    writer.writeStringValue("userTimezone", activityHistoryItem.userTimezone);
}

function serializeImageInfo(writer, imageInfo = {}) {
    writer.writeBooleanValue("addImageQuery", imageInfo.addImageQuery);
    writer.writeStringValue("alternateText", imageInfo.alternateText);
    writer.writeStringValue("alternativeText", imageInfo.alternativeText);
    writer.writeStringValue("iconUrl", imageInfo.iconUrl);
}

function serializeVisualInfo(writer, visualInfo = {}) {
    writer.writeObjectValueFromMethod("attribution", visualInfo.attribution, serializeImageInfo);
    writer.writeStringValue("backgroundColor", visualInfo.backgroundColor);
    writer.writeObjectValueFromMethod("content", visualInfo.content, serializeJson);
    writer.writeStringValue("description", visualInfo.description);
    writer.writeStringValue("displayText", visualInfo.displayText);
}

function serializeUserActivity(writer, userActivity = {}) {
    serializeEntity(writer, userActivity);
    writer.writeStringValue("activationUrl", userActivity.activationUrl);
    writer.writeStringValue("activitySourceHost", userActivity.activitySourceHost);
    writer.writeStringValue("appActivityId", userActivity.appActivityId);
    writer.writeStringValue("appDisplayName", userActivity.appDisplayName);
    writer.writeObjectValueFromMethod("contentInfo", userActivity.contentInfo, serializeJson);
    writer.writeStringValue("contentUrl", userActivity.contentUrl);
    writer.writeDateValue("createdDateTime", userActivity.createdDateTime);
    writer.writeDateValue("expirationDateTime", userActivity.expirationDateTime);
    writer.writeStringValue("fallbackUrl", userActivity.fallbackUrl);
    writer.writeCollectionOfObjectValuesFromMethod("historyItems", userActivity.historyItems, serializeActivityHistoryItem);
    writer.writeDateValue("lastModifiedDateTime", userActivity.lastModifiedDateTime);
    writer.writeEnumValue("status", userActivity.status);
    writer.writeStringValue("userTimezone", userActivity.userTimezone);
    writer.writeObjectValueFromMethod("visualElements", userActivity.visualElements, serializeVisualInfo);
}

function serializeActivityStatistics(writer, activityStatistics = {}) {
    serializeEntity(writer, activityStatistics);
    writer.writeEnumValue("activity", activityStatistics.activity);
    writer.writeDurationValue("duration", activityStatistics.duration);
    writer.writeDateOnlyValue("endDate", activityStatistics.endDate);
    writer.writeDateOnlyValue("startDate", activityStatistics.startDate);
    writer.writeStringValue("timeZoneUsed", activityStatistics.timeZoneUsed);
}

function serializeSettings(writer, settings = {}) {
    writer.writeBooleanValue("hasGraphMailbox", settings.hasGraphMailbox);
    writer.writeBooleanValue("hasLicense", settings.hasLicense);
    writer.writeBooleanValue("hasOptedOut", settings.hasOptedOut);
}

function serializeUserAnalytics(writer, userAnalytics = {}) {
    serializeEntity(writer, userAnalytics);
    writer.writeCollectionOfObjectValuesFromMethod("activityStatistics", userAnalytics.activityStatistics, serializeActivityStatistics);
    writer.writeObjectValueFromMethod("settings", userAnalytics.settings, serializeSettings);
}

function serializeDeviceHealth(writer, deviceHealth = {}) {
    writer.writeDateValue("lastConnectionTime", deviceHealth.lastConnectionTime);
}

function serializePrinterLocation(writer, printerLocation = {}) {
    writer.writeNumberValue("altitudeInMeters", printerLocation.altitudeInMeters);
    writer.writeStringValue("building", printerLocation.building);
    writer.writeStringValue("city", printerLocation.city);
    writer.writeStringValue("countryOrRegion", printerLocation.countryOrRegion);
    writer.writeStringValue("floor", printerLocation.floor);
    writer.writeStringValue("floorDescription", printerLocation.floorDescription);
    writer.writeNumberValue("floorNumber", printerLocation.floorNumber);
    writer.writeNumberValue("latitude", printerLocation.latitude);
    writer.writeNumberValue("longitude", printerLocation.longitude);
    writer.writeCollectionOfPrimitiveValues("organization", printerLocation.organization);
    writer.writeStringValue("postalCode", printerLocation.postalCode);
    writer.writeStringValue("roomDescription", printerLocation.roomDescription);
    writer.writeStringValue("roomName", printerLocation.roomName);
    writer.writeNumberValue("roomNumber", printerLocation.roomNumber);
    writer.writeStringValue("site", printerLocation.site);
    writer.writeStringValue("stateOrProvince", printerLocation.stateOrProvince);
    writer.writeStringValue("streetAddress", printerLocation.streetAddress);
    writer.writeCollectionOfPrimitiveValues("subdivision", printerLocation.subdivision);
    writer.writeCollectionOfPrimitiveValues("subunit", printerLocation.subunit);
}

function serializePrintConnector(writer, printConnector = {}) {
    serializeEntity(writer, printConnector);
    writer.writeStringValue("appVersion", printConnector.appVersion);
    writer.writeObjectValueFromMethod("deviceHealth", printConnector.deviceHealth, serializeDeviceHealth);
    writer.writeStringValue("displayName", printConnector.displayName);
    writer.writeStringValue("fullyQualifiedDomainName", printConnector.fullyQualifiedDomainName);
    writer.writeObjectValueFromMethod("location", printConnector.location, serializePrinterLocation);
    writer.writeStringValue("name", printConnector.name);
    writer.writeStringValue("operatingSystem", printConnector.operatingSystem);
    writer.writeDateValue("registeredDateTime", printConnector.registeredDateTime);
}

function serializePrinterCapabilities(writer, printerCapabilities = {}) {
    // writer.writeCollectionOfPrimitiveValues<number>("bottomMargins", printerCapabilities.bottomMargins);
    // writer.writeBooleanValue("collation", printerCapabilities.collation);
    // writer.writeEnumValue<PrintColorMode>("colorModes", printerCapabilities.colorModes);
    // writer.writeCollectionOfPrimitiveValues<string>("contentTypes", printerCapabilities.contentTypes);
    // writer.writeObjectValueFromMethod("copiesPerJob", printerCapabilities.copiesPerJob as any, serializeIntegerRange);
    // writer.writeCollectionOfPrimitiveValues<number>("dpis", printerCapabilities.dpis);
    // writer.writeEnumValue<PrintDuplexMode>("duplexModes", printerCapabilities.duplexModes);
    // writer.writeEnumValue<PrinterFeedDirection>("feedDirections", printerCapabilities.feedDirections);
    // writer.writeEnumValue<PrinterFeedOrientation>("feedOrientations", printerCapabilities.feedOrientations);
    // writer.writeEnumValue<PrintFinishing>("finishings", printerCapabilities.finishings);
    // writer.writeCollectionOfPrimitiveValues<string>("inputBins", printerCapabilities.inputBins);
    // writer.writeBooleanValue("isColorPrintingSupported", printerCapabilities.isColorPrintingSupported);
    // writer.writeBooleanValue("isPageRangeSupported", printerCapabilities.isPageRangeSupported);
    // writer.writeCollectionOfPrimitiveValues<number>("leftMargins", printerCapabilities.leftMargins);
    // writer.writeCollectionOfPrimitiveValues<string>("mediaColors", printerCapabilities.mediaColors);
    // writer.writeCollectionOfPrimitiveValues<string>("mediaSizes", printerCapabilities.mediaSizes);
    // writer.writeCollectionOfPrimitiveValues<string>("mediaTypes", printerCapabilities.mediaTypes);
    // writer.writeEnumValue<PrintMultipageLayout>("multipageLayouts", printerCapabilities.multipageLayouts);
    // writer.writeEnumValue<PrintOrientation>("orientations", printerCapabilities.orientations);
    // writer.writeCollectionOfPrimitiveValues<string>("outputBins", printerCapabilities.outputBins);
    // writer.writeCollectionOfPrimitiveValues<number>("pagesPerSheet", printerCapabilities.pagesPerSheet);
    // writer.writeEnumValue<PrintQuality>("qualities", printerCapabilities.qualities);
    // writer.writeCollectionOfPrimitiveValues<number>("rightMargins", printerCapabilities.rightMargins);
    // writer.writeEnumValue<PrintScaling>("scalings", printerCapabilities.scalings);
    // writer.writeEnumValue<PrintColorConfiguration>("supportedColorConfigurations", printerCapabilities.supportedColorConfigurations);
    // writer.writeObjectValueFromMethod("supportedCopiesPerJob", printerCapabilities.supportedCopiesPerJob as any, serializeIntegerRange);
    // writer.writeCollectionOfPrimitiveValues<string>("supportedDocumentMimeTypes", printerCapabilities.supportedDocumentMimeTypes);
    // writer.writeEnumValue<PrintDuplexConfiguration>("supportedDuplexConfigurations", printerCapabilities.supportedDuplexConfigurations);
    // writer.writeEnumValue<PrintFinishing>("supportedFinishings", printerCapabilities.supportedFinishings);
    // writer.writeCollectionOfPrimitiveValues<string>("supportedMediaColors", printerCapabilities.supportedMediaColors);
    // writer.writeCollectionOfPrimitiveValues<string>("supportedMediaSizes", printerCapabilities.supportedMediaSizes);
    // writer.writeEnumValue<PrintMediaType>("supportedMediaTypes", printerCapabilities.supportedMediaTypes);
    // writer.writeEnumValue<PrintOrientation>("supportedOrientations", printerCapabilities.supportedOrientations);
    // writer.writeCollectionOfPrimitiveValues<string>("supportedOutputBins", printerCapabilities.supportedOutputBins);
    // writer.writeObjectValueFromMethod("supportedPagesPerSheet", printerCapabilities.supportedPagesPerSheet as any, serializeIntegerRange);
    // writer.writeEnumValue<PrintPresentationDirection>("supportedPresentationDirections", printerCapabilities.supportedPresentationDirections);
    // writer.writeEnumValue<PrintQuality>("supportedPrintQualities", printerCapabilities.supportedPrintQualities);
    // writer.writeBooleanValue("supportsFitPdfToPage", printerCapabilities.supportsFitPdfToPage);
    // writer.writeCollectionOfPrimitiveValues<number>("topMargins", printerCapabilities.topMargins);
}

function serializePrinterDefaults(writer, printerDefaults = {}) {
    writer.writeEnumValue("colorMode", printerDefaults.colorMode);
    writer.writeStringValue("contentType", printerDefaults.contentType);
    writer.writeNumberValue("copiesPerJob", printerDefaults.copiesPerJob);
    writer.writeStringValue("documentMimeType", printerDefaults.documentMimeType);
    writer.writeNumberValue("dpi", printerDefaults.dpi);
    writer.writeEnumValue("duplexConfiguration", printerDefaults.duplexConfiguration);
    writer.writeEnumValue("duplexMode", printerDefaults.duplexMode);
    // writer.writeEnumValue<PrintFinishing>("finishings", printerDefaults.finishings);
    writer.writeBooleanValue("fitPdfToPage", printerDefaults.fitPdfToPage);
    writer.writeStringValue("inputBin", printerDefaults.inputBin);
    writer.writeStringValue("mediaColor", printerDefaults.mediaColor);
    writer.writeStringValue("mediaSize", printerDefaults.mediaSize);
    writer.writeStringValue("mediaType", printerDefaults.mediaType);
    writer.writeEnumValue("multipageLayout", printerDefaults.multipageLayout);
    writer.writeEnumValue("orientation", printerDefaults.orientation);
    writer.writeStringValue("outputBin", printerDefaults.outputBin);
    writer.writeNumberValue("pagesPerSheet", printerDefaults.pagesPerSheet);
    writer.writeBooleanValue("pdfFitToPage", printerDefaults.pdfFitToPage);
    writer.writeEnumValue("presentationDirection", printerDefaults.presentationDirection);
    writer.writeEnumValue("printColorConfiguration", printerDefaults.printColorConfiguration);
    writer.writeEnumValue("printQuality", printerDefaults.printQuality);
    writer.writeEnumValue("quality", printerDefaults.quality);
    writer.writeEnumValue("scaling", printerDefaults.scaling);
}

function serializePrinterStatus(writer, printerStatus = {}) {
    writer.writeStringValue("description", printerStatus.description);
    // writer.writeEnumValue<PrinterProcessingStateDetail>("details", printerStatus.details);
    writer.writeEnumValue("processingState", printerStatus.processingState);
    writer.writeStringValue("processingStateDescription", printerStatus.processingStateDescription);
    // writer.writeEnumValue<PrinterProcessingStateReason>("processingStateReasons", printerStatus.processingStateReasons);
    writer.writeEnumValue("state", printerStatus.state);
}

function serializeIntegerRange(writer, integerRange = {}) {
    writer.writeNumberValue("end", integerRange.end);
    writer.writeNumberValue("maximum", integerRange.maximum);
    writer.writeNumberValue("minimum", integerRange.minimum);
    writer.writeNumberValue("start", integerRange.start);
}

function serializePrintMargin(writer, printMargin = {}) {
    writer.writeNumberValue("bottom", printMargin.bottom);
    writer.writeNumberValue("left", printMargin.left);
    writer.writeNumberValue("right", printMargin.right);
    writer.writeNumberValue("top", printMargin.top);
}

function serializePrinterDocumentConfiguration(writer, printerDocumentConfiguration = {}) {
    writer.writeBooleanValue("collate", printerDocumentConfiguration.collate);
    writer.writeEnumValue("colorMode", printerDocumentConfiguration.colorMode);
    writer.writeNumberValue("copies", printerDocumentConfiguration.copies);
    writer.writeNumberValue("dpi", printerDocumentConfiguration.dpi);
    writer.writeEnumValue("duplexMode", printerDocumentConfiguration.duplexMode);
    writer.writeEnumValue("feedDirection", printerDocumentConfiguration.feedDirection);
    writer.writeEnumValue("feedOrientation", printerDocumentConfiguration.feedOrientation);
    // writer.writeEnumValue<PrintFinishing>("finishings", printerDocumentConfiguration.finishings);
    writer.writeBooleanValue("fitPdfToPage", printerDocumentConfiguration.fitPdfToPage);
    writer.writeStringValue("inputBin", printerDocumentConfiguration.inputBin);
    writer.writeObjectValueFromMethod("margin", printerDocumentConfiguration.margin, serializePrintMargin);
    writer.writeStringValue("mediaSize", printerDocumentConfiguration.mediaSize);
    writer.writeStringValue("mediaType", printerDocumentConfiguration.mediaType);
    writer.writeEnumValue("multipageLayout", printerDocumentConfiguration.multipageLayout);
    writer.writeEnumValue("orientation", printerDocumentConfiguration.orientation);
    writer.writeStringValue("outputBin", printerDocumentConfiguration.outputBin);
    writer.writeCollectionOfObjectValuesFromMethod("pageRanges", printerDocumentConfiguration.pageRanges, serializeIntegerRange);
    writer.writeNumberValue("pagesPerSheet", printerDocumentConfiguration.pagesPerSheet);
    writer.writeEnumValue("quality", printerDocumentConfiguration.quality);
    writer.writeEnumValue("scaling", printerDocumentConfiguration.scaling);
}

function serializePrintDocument(writer, printDocument = {}) {
    serializeEntity(writer, printDocument);
    writer.writeObjectValueFromMethod("configuration", printDocument.configuration, serializePrinterDocumentConfiguration);
    writer.writeStringValue("contentType", printDocument.contentType);
    writer.writeStringValue("displayName", printDocument.displayName);
    writer.writeDateValue("downloadedDateTime", printDocument.downloadedDateTime);
    writer.writeNumberValue("size", printDocument.size);
    writer.writeDateValue("uploadedDateTime", printDocument.uploadedDateTime);
}

function serializePrintJobConfiguration(writer, printJobConfiguration = {}) {
    writer.writeBooleanValue("collate", printJobConfiguration.collate);
    writer.writeEnumValue("colorMode", printJobConfiguration.colorMode);
    writer.writeNumberValue("copies", printJobConfiguration.copies);
    writer.writeNumberValue("dpi", printJobConfiguration.dpi);
    writer.writeEnumValue("duplexMode", printJobConfiguration.duplexMode);
    writer.writeEnumValue("feedOrientation", printJobConfiguration.feedOrientation);
    //writer.writeEnumValue<PrintFinishing>("finishings", printJobConfiguration.finishings);
    writer.writeBooleanValue("fitPdfToPage", printJobConfiguration.fitPdfToPage);
    writer.writeStringValue("inputBin", printJobConfiguration.inputBin);
    writer.writeObjectValueFromMethod("margin", printJobConfiguration.margin, serializePrintMargin);
    writer.writeStringValue("mediaSize", printJobConfiguration.mediaSize);
    writer.writeStringValue("mediaType", printJobConfiguration.mediaType);
    writer.writeEnumValue("multipageLayout", printJobConfiguration.multipageLayout);
    writer.writeEnumValue("orientation", printJobConfiguration.orientation);
    writer.writeStringValue("outputBin", printJobConfiguration.outputBin);
    writer.writeCollectionOfObjectValuesFromMethod("pageRanges", printJobConfiguration.pageRanges, serializeIntegerRange);
    writer.writeNumberValue("pagesPerSheet", printJobConfiguration.pagesPerSheet);
    writer.writeEnumValue("quality", printJobConfiguration.quality);
    writer.writeEnumValue("scaling", printJobConfiguration.scaling);
}

function serializePrintJobStatus(writer, printJobStatus = {}) {
    writer.writeBooleanValue("acquiredByPrinter", printJobStatus.acquiredByPrinter);
    writer.writeStringValue("description", printJobStatus.description);
    //writer.writeEnumValue<PrintJobStateDetail>("details", printJobStatus.details);
    writer.writeBooleanValue("isAcquiredByPrinter", printJobStatus.isAcquiredByPrinter);
    writer.writeEnumValue("processingState", printJobStatus.processingState);
    writer.writeStringValue("processingStateDescription", printJobStatus.processingStateDescription);
    writer.writeEnumValue("state", printJobStatus.state);
}

function serializeAppIdentity(writer, appIdentity = {}) {
    writer.writeStringValue("appId", appIdentity.appId);
    writer.writeStringValue("displayName", appIdentity.displayName);
    writer.writeStringValue("servicePrincipalId", appIdentity.servicePrincipalId);
    writer.writeStringValue("servicePrincipalName", appIdentity.servicePrincipalName);
}

function serializePrintTaskDefinition(writer, printTaskDefinition = {}) {
    serializeEntity(writer, printTaskDefinition);
    writer.writeObjectValueFromMethod("createdBy", printTaskDefinition.createdBy, serializeAppIdentity);
    writer.writeStringValue("displayName", printTaskDefinition.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", printTaskDefinition.tasks, serializePrintTask);
}

function serializePrintTaskStatus(writer, printTaskStatus = {}) {
    writer.writeStringValue("description", printTaskStatus.description);
    writer.writeEnumValue("state", printTaskStatus.state);
}

function serializePrintTaskTrigger(writer, printTaskTrigger = {}) {
    serializeEntity(writer, printTaskTrigger);
    writer.writeObjectValueFromMethod("definition", printTaskTrigger.definition, serializePrintTaskDefinition);
    writer.writeEnumValue("event", printTaskTrigger.event);
}

function serializePrintTask(writer, printTask = {}) {
    serializeEntity(writer, printTask);
    writer.writeObjectValueFromMethod("definition", printTask.definition, serializePrintTaskDefinition);
    writer.writeStringValue("parentUrl", printTask.parentUrl);
    writer.writeObjectValueFromMethod("status", printTask.status, serializePrintTaskStatus);
    writer.writeObjectValueFromMethod("trigger", printTask.trigger, serializePrintTaskTrigger);
}

function serializePrintJob(writer, printJob = {}) {
    serializeEntity(writer, printJob);
    writer.writeDateValue("acknowledgedDateTime", printJob.acknowledgedDateTime);
    writer.writeDateValue("completedDateTime", printJob.completedDateTime);
    writer.writeObjectValueFromMethod("configuration", printJob.configuration, serializePrintJobConfiguration);
    writer.writeObjectValueFromMethod("createdBy", printJob.createdBy, serializeUserIdentity);
    writer.writeDateValue("createdDateTime", printJob.createdDateTime);
    writer.writeStringValue("displayName", printJob.displayName);
    writer.writeCollectionOfObjectValuesFromMethod("documents", printJob.documents, serializePrintDocument);
    writer.writeNumberValue("errorCode", printJob.errorCode);
    writer.writeBooleanValue("isFetchable", printJob.isFetchable);
    writer.writeStringValue("redirectedFrom", printJob.redirectedFrom);
    writer.writeStringValue("redirectedTo", printJob.redirectedTo);
    writer.writeObjectValueFromMethod("status", printJob.status, serializePrintJobStatus);
    writer.writeCollectionOfObjectValuesFromMethod("tasks", printJob.tasks, serializePrintTask);
}

function serializePrinterBase(writer, printerBase = {}) {
    serializeEntity(writer, printerBase);
    writer.writeObjectValueFromMethod("capabilities", printerBase.capabilities, serializePrinterCapabilities);
    writer.writeObjectValueFromMethod("defaults", printerBase.defaults, serializePrinterDefaults);
    writer.writeStringValue("displayName", printerBase.displayName);
    writer.writeBooleanValue("isAcceptingJobs", printerBase.isAcceptingJobs);
    writer.writeCollectionOfObjectValuesFromMethod("jobs", printerBase.jobs, serializePrintJob);
    writer.writeObjectValueFromMethod("location", printerBase.location, serializePrinterLocation);
    writer.writeStringValue("manufacturer", printerBase.manufacturer);
    writer.writeStringValue("model", printerBase.model);
    writer.writeStringValue("name", printerBase.name);
    writer.writeObjectValueFromMethod("status", printerBase.status, serializePrinterStatus);
}

function serializePrinter(writer, printer = {}) {
    serializePrinterBase(writer, printer);
    writer.writeBooleanValue("acceptingJobs", printer.acceptingJobs);
    writer.writeCollectionOfObjectValuesFromMethod("connectors", printer.connectors, serializePrintConnector);
    writer.writeBooleanValue("hasPhysicalDevice", printer.hasPhysicalDevice);
    writer.writeBooleanValue("isShared", printer.isShared);
    writer.writeDateValue("lastSeenDateTime", printer.lastSeenDateTime);
    writer.writeDateValue("registeredDateTime", printer.registeredDateTime);
    writer.writeObjectValueFromMethod("share", printer.share, serializePrinterShare);
    writer.writeCollectionOfObjectValuesFromMethod("shares", printer.shares, serializePrinterShare);
    writer.writeCollectionOfObjectValuesFromMethod("taskTriggers", printer.taskTriggers, serializePrintTaskTrigger);
}

function serializePrinterShareViewpoint(writer, printerShareViewpoint = {}) {
    writer.writeDateValue("lastUsedDateTime", printerShareViewpoint.lastUsedDateTime);
}

function serializePrinterShare(writer, printerShare = {}) {
    serializePrinterBase(writer, printerShare);
    writer.writeBooleanValue("allowAllUsers", printerShare.allowAllUsers);
    writer.writeCollectionOfObjectValuesFromMethod("allowedGroups", printerShare.allowedGroups, serializeGroup);
    writer.writeCollectionOfObjectValuesFromMethod("allowedUsers", printerShare.allowedUsers, serializeUser);
    writer.writeDateValue("createdDateTime", printerShare.createdDateTime);
    writer.writeObjectValueFromMethod("printer", printerShare.printer, serializePrinter);
    writer.writeObjectValueFromMethod("viewPoint", printerShare.viewPoint, serializePrinterShareViewpoint);
}

function serializeUserPrint(writer, userPrint = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("recentPrinterShares", userPrint.recentPrinterShares, serializePrinterShare);
}

function serializeContactMergeSuggestions(writer, contactMergeSuggestions = {}) {
    serializeEntity(writer, contactMergeSuggestions);
    writer.writeBooleanValue("isEnabled", contactMergeSuggestions.isEnabled);
}

function serializeRegionalFormatOverrides(writer, regionalFormatOverrides = {}) {
    writer.writeStringValue("calendar", regionalFormatOverrides.calendar);
    writer.writeStringValue("firstDayOfWeek", regionalFormatOverrides.firstDayOfWeek);
    writer.writeStringValue("longDateFormat", regionalFormatOverrides.longDateFormat);
    writer.writeStringValue("longTimeFormat", regionalFormatOverrides.longTimeFormat);
    writer.writeStringValue("shortDateFormat", regionalFormatOverrides.shortDateFormat);
    writer.writeStringValue("shortTimeFormat", regionalFormatOverrides.shortTimeFormat);
    writer.writeStringValue("timeZone", regionalFormatOverrides.timeZone);
}

function serializeTranslationLanguageOverride(writer, translationLanguageOverride = {}) {
    writer.writeStringValue("languageTag", translationLanguageOverride.languageTag);
    writer.writeEnumValue("translationBehavior", translationLanguageOverride.translationBehavior);
}

function serializeTranslationPreferences(writer, translationPreferences = {}) {
    writer.writeCollectionOfObjectValuesFromMethod("languageOverrides", translationPreferences.languageOverrides, serializeTranslationLanguageOverride);
    writer.writeEnumValue("translationBehavior", translationPreferences.translationBehavior);
    writer.writeCollectionOfPrimitiveValues("untranslatedLanguages", translationPreferences.untranslatedLanguages);
}

function serializeRegionalAndLanguageSettings(writer, regionalAndLanguageSettings = {}) {
    serializeEntity(writer, regionalAndLanguageSettings);
    writer.writeCollectionOfObjectValuesFromMethod("authoringLanguages", regionalAndLanguageSettings.authoringLanguages, serializeLocaleInfo);
    writer.writeObjectValueFromMethod("defaultDisplayLanguage", regionalAndLanguageSettings.defaultDisplayLanguage, serializeLocaleInfo);
    writer.writeObjectValueFromMethod("defaultRegionalFormat", regionalAndLanguageSettings.defaultRegionalFormat, serializeLocaleInfo);
    writer.writeObjectValueFromMethod("defaultSpeechInputLanguage", regionalAndLanguageSettings.defaultSpeechInputLanguage, serializeLocaleInfo);
    writer.writeObjectValueFromMethod("defaultTranslationLanguage", regionalAndLanguageSettings.defaultTranslationLanguage, serializeLocaleInfo);
    writer.writeObjectValueFromMethod("regionalFormatOverrides", regionalAndLanguageSettings.regionalFormatOverrides, serializeRegionalFormatOverrides);
    writer.writeObjectValueFromMethod("translationPreferences", regionalAndLanguageSettings.translationPreferences, serializeTranslationPreferences);
}

function serializeTimeRange(writer, timeRange = {}) {
    writer.writeTimeOnlyValue("endTime", timeRange.endTime);
    writer.writeTimeOnlyValue("startTime", timeRange.startTime);
}

function serializeShiftAvailability(writer, shiftAvailability = {}) {
    writer.writeObjectValueFromMethod("recurrence", shiftAvailability.recurrence, serializePatternedRecurrence);
    writer.writeCollectionOfObjectValuesFromMethod("timeSlots", shiftAvailability.timeSlots, serializeTimeRange);
    writer.writeStringValue("timeZone", shiftAvailability.timeZone);
}

function serializeShiftPreferences(writer, shiftPreferences = {}) {
    serializeChangeTrackedEntity(writer, shiftPreferences);
    writer.writeCollectionOfObjectValuesFromMethod("availability", shiftPreferences.availability, serializeShiftAvailability);
}

function serializeUserInsightsSettings(writer, userInsightsSettings = {}) {
    serializeEntity(writer, userInsightsSettings);
    writer.writeBooleanValue("isEnabled", userInsightsSettings.isEnabled);
}

function serializeUserSettings(writer, userSettings = {}) {
    serializeEntity(writer, userSettings);
    writer.writeObjectValueFromMethod("contactMergeSuggestions", userSettings.contactMergeSuggestions, serializeContactMergeSuggestions);
    writer.writeBooleanValue("contributionToContentDiscoveryAsOrganizationDisabled", userSettings.contributionToContentDiscoveryAsOrganizationDisabled);
    writer.writeBooleanValue("contributionToContentDiscoveryDisabled", userSettings.contributionToContentDiscoveryDisabled);
    writer.writeObjectValueFromMethod("itemInsights", userSettings.itemInsights, serializeUserInsightsSettings);
    writer.writeObjectValueFromMethod("regionalAndLanguageSettings", userSettings.regionalAndLanguageSettings, serializeRegionalAndLanguageSettings);
    writer.writeObjectValueFromMethod("shiftPreferences", userSettings.shiftPreferences, serializeShiftPreferences);
}

function serializeAssociatedTeamInfo(writer, associatedTeamInfo = {}) {
    serializeTeamInfo(writer, associatedTeamInfo);
}

function serializeUserScopeTeamsAppInstallation(writer, userScopeTeamsAppInstallation = {}) {
    serializeTeamsAppInstallation(writer, userScopeTeamsAppInstallation);
    writer.writeObjectValueFromMethod("chat", userScopeTeamsAppInstallation.chat, serializeChat);
}

function serializeUserTeamwork(writer, userTeamwork = {}) {
    serializeEntity(writer, userTeamwork);
    writer.writeCollectionOfObjectValuesFromMethod("associatedTeams", userTeamwork.associatedTeams, serializeAssociatedTeamInfo);
    writer.writeCollectionOfObjectValuesFromMethod("installedApps", userTeamwork.installedApps, serializeUserScopeTeamsAppInstallation);
}

function serializeWindowsInformationProtectionDeviceRegistration(writer, windowsInformationProtectionDeviceRegistration = {}) {
    serializeEntity(writer, windowsInformationProtectionDeviceRegistration);
    writer.writeStringValue("deviceMacAddress", windowsInformationProtectionDeviceRegistration.deviceMacAddress);
    writer.writeStringValue("deviceName", windowsInformationProtectionDeviceRegistration.deviceName);
    writer.writeStringValue("deviceRegistrationId", windowsInformationProtectionDeviceRegistration.deviceRegistrationId);
    writer.writeStringValue("deviceType", windowsInformationProtectionDeviceRegistration.deviceType);
    writer.writeDateValue("lastCheckInDateTime", windowsInformationProtectionDeviceRegistration.lastCheckInDateTime);
    writer.writeStringValue("userId", windowsInformationProtectionDeviceRegistration.userId);
}

function serializeUser(writer, user = {}) {
    serializeDirectoryObject(writer, user);
    writer.writeStringValue("aboutMe", user.aboutMe);
    writer.writeBooleanValue("accountEnabled", user.accountEnabled);
    writer.writeCollectionOfObjectValuesFromMethod("activities", user.activities, serializeUserActivity);
    writer.writeStringValue("ageGroup", user.ageGroup);
    writer.writeCollectionOfObjectValuesFromMethod("agreementAcceptances", user.agreementAcceptances, serializeAgreementAcceptance);
    writer.writeObjectValueFromMethod("analytics", user.analytics, serializeUserAnalytics);
    writer.writeCollectionOfObjectValuesFromMethod("appConsentRequestsForApproval", user.appConsentRequestsForApproval, serializeAppConsentRequest);
    writer.writeCollectionOfObjectValuesFromMethod("appRoleAssignedResources", user.appRoleAssignedResources, serializeServicePrincipal);
    writer.writeCollectionOfObjectValuesFromMethod("appRoleAssignments", user.appRoleAssignments, serializeAppRoleAssignment);
    writer.writeCollectionOfObjectValuesFromMethod("approvals", user.approvals, serializeApproval);
    writer.writeCollectionOfObjectValuesFromMethod("assignedLicenses", user.assignedLicenses, serializeAssignedLicense);
    writer.writeCollectionOfObjectValuesFromMethod("assignedPlans", user.assignedPlans, serializeAssignedPlan);
    writer.writeObjectValueFromMethod("authentication", user.authentication, serializeAuthentication);
    writer.writeObjectValueFromMethod("authorizationInfo", user.authorizationInfo, serializeAuthorizationInfo);
    writer.writeDateValue("birthday", user.birthday);
    writer.writeCollectionOfPrimitiveValues("businessPhones", user.businessPhones);
    writer.writeObjectValueFromMethod("calendar", user.calendar, serializeCalendar);
    writer.writeCollectionOfObjectValuesFromMethod("calendarGroups", user.calendarGroups, serializeCalendarGroup);
    writer.writeCollectionOfObjectValuesFromMethod("calendars", user.calendars, serializeCalendar);
    writer.writeCollectionOfObjectValuesFromMethod("calendarView", user.calendarView, serializeEvent);
    writer.writeCollectionOfObjectValuesFromMethod("chats", user.chats, serializeChat);
    writer.writeStringValue("city", user.city);
    writer.writeCollectionOfObjectValuesFromMethod("cloudPCs", user.cloudPCs, serializeCloudPC);
    writer.writeStringValue("companyName", user.companyName);
    writer.writeStringValue("consentProvidedForMinor", user.consentProvidedForMinor);
    writer.writeCollectionOfObjectValuesFromMethod("contactFolders", user.contactFolders, serializeContactFolder);
    writer.writeCollectionOfObjectValuesFromMethod("contacts", user.contacts, serializeContact);
    writer.writeStringValue("country", user.country);
    writer.writeDateValue("createdDateTime", user.createdDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("createdObjects", user.createdObjects, serializeDirectoryObject);
    writer.writeStringValue("creationType", user.creationType);
    writer.writeObjectValueFromMethod("customSecurityAttributes", user.customSecurityAttributes, serializeCustomSecurityAttributeValue);
    writer.writeStringValue("department", user.department);
    writer.writeCollectionOfObjectValuesFromMethod("deviceEnrollmentConfigurations", user.deviceEnrollmentConfigurations, serializeDeviceEnrollmentConfiguration);
    writer.writeNumberValue("deviceEnrollmentLimit", user.deviceEnrollmentLimit);
    writer.writeCollectionOfObjectValuesFromMethod("deviceKeys", user.deviceKeys, serializeDeviceKey);
    writer.writeCollectionOfObjectValuesFromMethod("deviceManagementTroubleshootingEvents", user.deviceManagementTroubleshootingEvents, serializeDeviceManagementTroubleshootingEvent);
    writer.writeCollectionOfObjectValuesFromMethod("devices", user.devices, serializeDevice);
    writer.writeCollectionOfObjectValuesFromMethod("directReports", user.directReports, serializeDirectoryObject);
    writer.writeStringValue("displayName", user.displayName);
    writer.writeObjectValueFromMethod("drive", user.drive, serializeDrive);
    writer.writeCollectionOfObjectValuesFromMethod("drives", user.drives, serializeDrive);
    writer.writeDateValue("employeeHireDate", user.employeeHireDate);
    writer.writeStringValue("employeeId", user.employeeId);
    writer.writeDateValue("employeeLeaveDateTime", user.employeeLeaveDateTime);
    writer.writeObjectValueFromMethod("employeeOrgData", user.employeeOrgData, serializeEmployeeOrgData);
    writer.writeStringValue("employeeType", user.employeeType);
    writer.writeCollectionOfObjectValuesFromMethod("events", user.events, serializeEvent);
    writer.writeCollectionOfObjectValuesFromMethod("extensions", user.extensions, serializeExtension);
    writer.writeStringValue("externalUserState", user.externalUserState);
    writer.writeStringValue("externalUserStateChangeDateTime", user.externalUserStateChangeDateTime);
    writer.writeStringValue("faxNumber", user.faxNumber);
    writer.writeCollectionOfObjectValuesFromMethod("followedSites", user.followedSites, serializeSite);
    writer.writeStringValue("givenName", user.givenName);
    writer.writeDateValue("hireDate", user.hireDate);
    writer.writeCollectionOfObjectValuesFromMethod("identities", user.identities, serializeObjectIdentity);
    writer.writeCollectionOfPrimitiveValues("imAddresses", user.imAddresses);
    writer.writeObjectValueFromMethod("inferenceClassification", user.inferenceClassification, serializeInferenceClassification);
    writer.writeCollectionOfPrimitiveValues("infoCatalogs", user.infoCatalogs);
    writer.writeObjectValueFromMethod("informationProtection", user.informationProtection, serializeInformationProtection);
    writer.writeObjectValueFromMethod("insights", user.insights, serializeItemInsights);
    writer.writeCollectionOfPrimitiveValues("interests", user.interests);
    writer.writeBooleanValue("isManagementRestricted", user.isManagementRestricted);
    writer.writeBooleanValue("isResourceAccount", user.isResourceAccount);
    writer.writeStringValue("jobTitle", user.jobTitle);
    writer.writeCollectionOfObjectValuesFromMethod("joinedGroups", user.joinedGroups, serializeGroup);
    writer.writeCollectionOfObjectValuesFromMethod("joinedTeams", user.joinedTeams, serializeTeam);
    writer.writeDateValue("lastPasswordChangeDateTime", user.lastPasswordChangeDateTime);
    writer.writeStringValue("legalAgeGroupClassification", user.legalAgeGroupClassification);
    writer.writeCollectionOfObjectValuesFromMethod("licenseAssignmentStates", user.licenseAssignmentStates, serializeLicenseAssignmentState);
    writer.writeCollectionOfObjectValuesFromMethod("licenseDetails", user.licenseDetails, serializeLicenseDetails);
    writer.writeStringValue("mail", user.mail);
    writer.writeObjectValueFromMethod("mailboxSettings", user.mailboxSettings, serializeMailboxSettings);
    writer.writeCollectionOfObjectValuesFromMethod("mailFolders", user.mailFolders, serializeMailFolder);
    writer.writeStringValue("mailNickname", user.mailNickname);
    writer.writeCollectionOfObjectValuesFromMethod("managedAppRegistrations", user.managedAppRegistrations, serializeManagedAppRegistration);
    writer.writeCollectionOfObjectValuesFromMethod("managedDevices", user.managedDevices, serializeManagedDevice);
    writer.writeObjectValueFromMethod("manager", user.manager, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("memberOf", user.memberOf, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("messages", user.messages, serializeMessage);
    writer.writeCollectionOfObjectValuesFromMethod("mobileAppIntentAndStates", user.mobileAppIntentAndStates, serializeMobileAppIntentAndState);
    writer.writeCollectionOfObjectValuesFromMethod("mobileAppTroubleshootingEvents", user.mobileAppTroubleshootingEvents, serializeMobileAppTroubleshootingEvent);
    writer.writeStringValue("mobilePhone", user.mobilePhone);
    writer.writeStringValue("mySite", user.mySite);
    writer.writeCollectionOfObjectValuesFromMethod("notifications", user.notifications, serializeNotification);
    writer.writeCollectionOfObjectValuesFromMethod("oauth2PermissionGrants", user.oauth2PermissionGrants, serializeOAuth2PermissionGrant);
    writer.writeStringValue("officeLocation", user.officeLocation);
    writer.writeObjectValueFromMethod("onenote", user.onenote, serializeOnenote);
    writer.writeCollectionOfObjectValuesFromMethod("onlineMeetings", user.onlineMeetings, serializeOnlineMeeting);
    writer.writeStringValue("onPremisesDistinguishedName", user.onPremisesDistinguishedName);
    writer.writeStringValue("onPremisesDomainName", user.onPremisesDomainName);
    writer.writeObjectValueFromMethod("onPremisesExtensionAttributes", user.onPremisesExtensionAttributes, serializeOnPremisesExtensionAttributes);
    writer.writeStringValue("onPremisesImmutableId", user.onPremisesImmutableId);
    writer.writeDateValue("onPremisesLastSyncDateTime", user.onPremisesLastSyncDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("onPremisesProvisioningErrors", user.onPremisesProvisioningErrors, serializeOnPremisesProvisioningError);
    writer.writeStringValue("onPremisesSamAccountName", user.onPremisesSamAccountName);
    writer.writeStringValue("onPremisesSecurityIdentifier", user.onPremisesSecurityIdentifier);
    writer.writeBooleanValue("onPremisesSyncEnabled", user.onPremisesSyncEnabled);
    writer.writeStringValue("onPremisesUserPrincipalName", user.onPremisesUserPrincipalName);
    writer.writeCollectionOfPrimitiveValues("otherMails", user.otherMails);
    writer.writeObjectValueFromMethod("outlook", user.outlook, serializeOutlookUser);
    writer.writeCollectionOfObjectValuesFromMethod("ownedDevices", user.ownedDevices, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("ownedObjects", user.ownedObjects, serializeDirectoryObject);
    writer.writeStringValue("passwordPolicies", user.passwordPolicies);
    writer.writeObjectValueFromMethod("passwordProfile", user.passwordProfile, serializePasswordProfile);
    writer.writeCollectionOfPrimitiveValues("pastProjects", user.pastProjects);
    writer.writeCollectionOfObjectValuesFromMethod("pendingAccessReviewInstances", user.pendingAccessReviewInstances, serializeAccessReviewInstance);
    writer.writeCollectionOfObjectValuesFromMethod("people", user.people, serializePerson);
    writer.writeObjectValueFromMethod("photo", user.photo, serializeProfilePhoto);
    writer.writeCollectionOfObjectValuesFromMethod("photos", user.photos, serializeProfilePhoto);
    writer.writeObjectValueFromMethod("planner", user.planner, serializePlannerUser);
    writer.writeStringValue("postalCode", user.postalCode);
    writer.writeStringValue("preferredDataLocation", user.preferredDataLocation);
    writer.writeStringValue("preferredLanguage", user.preferredLanguage);
    writer.writeStringValue("preferredName", user.preferredName);
    writer.writeObjectValueFromMethod("presence", user.presence, serializePresence);
    writer.writeObjectValueFromMethod("print", user.print, serializeUserPrint);
    writer.writeObjectValueFromMethod("profile", user.profile, serializeProfile);
    writer.writeCollectionOfObjectValuesFromMethod("provisionedPlans", user.provisionedPlans, serializeProvisionedPlan);
    writer.writeCollectionOfPrimitiveValues("proxyAddresses", user.proxyAddresses);
    writer.writeDateValue("refreshTokensValidFromDateTime", user.refreshTokensValidFromDateTime);
    writer.writeCollectionOfObjectValuesFromMethod("registeredDevices", user.registeredDevices, serializeDirectoryObject);
    writer.writeCollectionOfPrimitiveValues("responsibilities", user.responsibilities);
    writer.writeCollectionOfPrimitiveValues("schools", user.schools);
    writer.writeCollectionOfObjectValuesFromMethod("scopedRoleMemberOf", user.scopedRoleMemberOf, serializeScopedRoleMembership);
    writer.writeObjectValueFromMethod("security", user.security, serializeSecurity);
    writer.writeStringValue("securityIdentifier", user.securityIdentifier);
    writer.writeObjectValueFromMethod("settings", user.settings, serializeUserSettings);
    writer.writeBooleanValue("showInAddressList", user.showInAddressList);
    writer.writeObjectValueFromMethod("signInActivity", user.signInActivity, serializeSignInActivity);
    writer.writeDateValue("signInSessionsValidFromDateTime", user.signInSessionsValidFromDateTime);
    writer.writeCollectionOfPrimitiveValues("skills", user.skills);
    writer.writeStringValue("state", user.state);
    writer.writeStringValue("streetAddress", user.streetAddress);
    writer.writeStringValue("surname", user.surname);
    writer.writeObjectValueFromMethod("teamwork", user.teamwork, serializeUserTeamwork);
    writer.writeObjectValueFromMethod("todo", user.todo, serializeTodo);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveMemberOf", user.transitiveMemberOf, serializeDirectoryObject);
    writer.writeCollectionOfObjectValuesFromMethod("transitiveReports", user.transitiveReports, serializeDirectoryObject);
    writer.writeStringValue("usageLocation", user.usageLocation);
    writer.writeCollectionOfObjectValuesFromMethod("usageRights", user.usageRights, serializeUsageRight);
    writer.writeStringValue("userPrincipalName", user.userPrincipalName);
    writer.writeStringValue("userType", user.userType);
    writer.writeCollectionOfObjectValuesFromMethod("windowsInformationProtectionDeviceRegistrations", user.windowsInformationProtectionDeviceRegistrations, serializeWindowsInformationProtectionDeviceRegistration);
}

function deserializeIntoDirectoryObjectCollectionResponse(directoryObjectCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { directoryObjectCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { directoryObjectCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoDirectoryObject); },
    };
}

/**
 * This factory holds a list of all the registered factories for the various types of nodes.
 */
class ParseNodeFactoryRegistry {
    constructor() {
        /** List of factories that are registered by content type. */
        this.contentTypeAssociatedFactories = new Map();
    }
    getValidContentType() {
        throw new Error("The registry supports multiple content types. Get the registered factory instead.");
    }
    getRootParseNode(contentType, content) {
        if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        if (!content) {
            throw new Error("content cannot be undefined or empty");
        }
        const vendorSpecificContentType = contentType.split(";")[0];
        let factory = this.contentTypeAssociatedFactories.get(vendorSpecificContentType);
        if (factory) {
            return factory.getRootParseNode(vendorSpecificContentType, content);
        }
        const cleanedContentType = vendorSpecificContentType.replace(/[^/]+\+/gi, "");
        factory = this.contentTypeAssociatedFactories.get(cleanedContentType);
        if (factory) {
            return factory.getRootParseNode(cleanedContentType, content);
        }
        throw new Error(`Content type ${cleanedContentType} does not have a factory registered to be parsed`);
    }
}
/** Default singleton instance of the registry to be used when registring new factories that should be available by default. */
ParseNodeFactoryRegistry.defaultInstance = new ParseNodeFactoryRegistry();

/** Proxy factory that allows the composition of before and after callbacks on existing factories. */
class ParseNodeProxyFactory {
    /**
     * Creates a new proxy factory that wraps the specified concrete factory while composing the before and after callbacks.
     * @param _concrete the concrete factory to wrap
     * @param _onBefore the callback to invoke before the deserialization of any model object.
     * @param _onAfter the callback to invoke after the deserialization of any model object.
     */
    constructor(_concrete, _onBefore, _onAfter) {
        this._concrete = _concrete;
        this._onBefore = _onBefore;
        this._onAfter = _onAfter;
        if (!_concrete) {
            throw new Error("_concrete cannot be undefined");
        }
    }
    getValidContentType() {
        return this._concrete.getValidContentType();
    }
    getRootParseNode(contentType, content) {
        const node = this._concrete.getRootParseNode(contentType, content);
        const originalBefore = node.onBeforeAssignFieldValues;
        const originalAfter = node.onAfterAssignFieldValues;
        node.onBeforeAssignFieldValues = (value) => {
            this._onBefore && this._onBefore(value);
            originalBefore && originalBefore(value);
        };
        node.onAfterAssignFieldValues = (value) => {
            this._onAfter && this._onAfter(value);
            originalAfter && originalAfter(value);
        };
        return node;
    }
}

/** This factory holds a list of all the registered factories for the various types of nodes. */
class SerializationWriterFactoryRegistry {
    constructor() {
        /** List of factories that are registered by content type. */
        this.contentTypeAssociatedFactories = new Map();
    }
    getValidContentType() {
        throw new Error("The registry supports multiple content types. Get the registered factory instead.");
    }
    getSerializationWriter(contentType) {
        if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        const vendorSpecificContentType = contentType.split(";")[0];
        let factory = this.contentTypeAssociatedFactories.get(vendorSpecificContentType);
        if (factory) {
            return factory.getSerializationWriter(vendorSpecificContentType);
        }
        const cleanedContentType = vendorSpecificContentType.replace(/[^/]+\+/gi, "");
        factory = this.contentTypeAssociatedFactories.get(cleanedContentType);
        if (factory) {
            return factory.getSerializationWriter(cleanedContentType);
        }
        throw new Error(`Content type ${cleanedContentType} does not have a factory registered to be serialized`);
    }
}
/** Default singleton instance of the registry to be used when registring new factories that should be available by default. */
SerializationWriterFactoryRegistry.defaultInstance = new SerializationWriterFactoryRegistry();

/** Proxy factory that allows the composition of before and after callbacks on existing factories. */
class SerializationWriterProxyFactory {
    /**
     * Creates a new proxy factory that wraps the specified concrete factory while composing the before and after callbacks.
     * @param _concrete the concrete factory to wrap
     * @param _onBefore the callback to invoke before the serialization of any model object.
     * @param _onAfter the callback to invoke after the serialization of any model object.
     * @param _onStart the callback to invoke when the serialization of a model object starts
     */
    constructor(_concrete, _onBefore, _onAfter, _onStart) {
        this._concrete = _concrete;
        this._onBefore = _onBefore;
        this._onAfter = _onAfter;
        this._onStart = _onStart;
        if (!_concrete) {
            throw new Error("_concrete cannot be undefined");
        }
    }
    getValidContentType() {
        return this._concrete.getValidContentType();
    }
    getSerializationWriter(contentType) {
        const writer = this._concrete.getSerializationWriter(contentType);
        const originalBefore = writer.onBeforeObjectSerialization;
        const originalAfter = writer.onAfterObjectSerialization;
        const originalStart = writer.onStartObjectSerialization;
        writer.onBeforeObjectSerialization = (value) => {
            this._onBefore && this._onBefore(value);
            originalBefore && originalBefore(value);
        };
        writer.onAfterObjectSerialization = (value) => {
            this._onAfter && this._onAfter(value);
            originalAfter && originalAfter(value);
        };
        writer.onStartObjectSerialization = (value, writer) => {
            this._onStart && this._onStart(value, writer);
            originalStart && originalStart(value, writer);
        };
        return writer;
    }
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/** In-memory implementation of the backing store. Allows for dirty tracking of changes. */
class InMemoryBackingStore {
    constructor() {
        this.subscriptions = new Map();
        this.store = new Map();
        this.returnOnlyChangedValues = false;
        this._initializationCompleted = true;
    }
    get(key) {
        const wrapper = this.store.get(key);
        if (wrapper &&
            ((this.returnOnlyChangedValues && wrapper.changed) ||
                !this.returnOnlyChangedValues)) {
            return wrapper.value;
        }
        return undefined;
    }
    set(key, value) {
        const oldValueWrapper = this.store.get(key);
        const oldValue = oldValueWrapper === null || oldValueWrapper === void 0 ? void 0 : oldValueWrapper.value;
        if (oldValueWrapper) {
            oldValueWrapper.value = value;
            oldValueWrapper.changed = this.initializationCompleted;
        }
        else {
            this.store.set(key, {
                changed: this.initializationCompleted,
                value,
            });
        }
        this.subscriptions.forEach((sub) => {
            sub(key, oldValue, value);
        });
    }
    enumerate() {
        let filterableArray = [...this.store.entries()];
        if (this.returnOnlyChangedValues) {
            filterableArray = filterableArray.filter(([_, v]) => v.changed);
        }
        return filterableArray.map(([key, value]) => {
            return { key, value };
        });
    }
    enumerateKeysForValuesChangedToNull() {
        const keys = [];
        for (const [key, entry] of this.store) {
            if (entry.changed && !entry.value) {
                keys.push(key);
            }
        }
        return keys;
    }
    subscribe(callback, subscriptionId) {
        if (!callback) {
            throw new Error("callback cannot be undefined");
        }
        subscriptionId = subscriptionId !== null && subscriptionId !== void 0 ? subscriptionId : v4();
        this.subscriptions.set(subscriptionId, callback);
        return subscriptionId;
    }
    unsubscribe(subscriptionId) {
        this.subscriptions.delete(subscriptionId);
    }
    clear() {
        this.store.clear();
    }
    set initializationCompleted(value) {
        this._initializationCompleted = value;
        this.store.forEach((v) => {
            v.changed = !value;
        });
    }
    get initializationCompleted() {
        return this._initializationCompleted;
    }
}

/** This class is used to create instances of InMemoryBackingStore */
class InMemoryBackingStoreFactory {
    createBackingStore() {
        return new InMemoryBackingStore();
    }
}

class BackingStoreFactorySingleton {
}
BackingStoreFactorySingleton.instance = new InMemoryBackingStoreFactory();

/** Proxy implementation of ParseNodeFactory for the backing store that automatically sets the state of the backing store when deserializing. */
class BackingStoreParseNodeFactory extends ParseNodeProxyFactory {
    /**
     * Initializes a new instance of the BackingStoreParseNodeFactory class given the concrete implementation.
     * @param concrete the concrete implementation of the ParseNodeFactory
     */
    constructor(concrete) {
        super(concrete, (value) => {
            const backedModel = value;
            if (backedModel && backedModel.backingStore) {
                backedModel.backingStore.initializationCompleted = false;
            }
        }, (value) => {
            const backedModel = value;
            if (backedModel && backedModel.backingStore) {
                backedModel.backingStore.initializationCompleted = true;
            }
        });
    }
}

/**Proxy implementation of SerializationWriterFactory for the backing store that automatically sets the state of the backing store when serializing. */
class BackingStoreSerializationWriterProxyFactory extends SerializationWriterProxyFactory {
    /**
     * Initializes a new instance of the BackingStoreSerializationWriterProxyFactory class given a concrete implementation of SerializationWriterFactory.
     * @param concrete a concrete implementation of SerializationWriterFactory to wrap.
     */
    constructor(concrete) {
        super(concrete, (value) => {
            const backedModel = value;
            if (backedModel && backedModel.backingStore) {
                backedModel.backingStore.returnOnlyChangedValues = true;
            }
        }, (value) => {
            const backedModel = value;
            if (backedModel && backedModel.backingStore) {
                backedModel.backingStore.returnOnlyChangedValues = false;
                backedModel.backingStore.initializationCompleted = true;
            }
        }, (value, writer) => {
            const backedModel = value;
            if (backedModel && backedModel.backingStore) {
                const keys = backedModel.backingStore.enumerateKeysForValuesChangedToNull();
                for (const key of keys) {
                    writer.writeNullValue(key);
                }
            }
        });
    }
}

/**
 * Registers the default serializer to the registry.
 * @param type the class of the factory to be registered.
 */
function registerDefaultSerializer(type) {
    if (!type)
        throw new Error("Type is required");
    const serializer = new type();
    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.set(serializer.getValidContentType(), serializer);
}
/**
 * Registers the default deserializer to the registry.
 * @param type the class of the factory to be registered.
 */
function registerDefaultDeserializer(type) {
    if (!type)
        throw new Error("Type is required");
    const deserializer = new type();
    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.set(deserializer.getValidContentType(), deserializer);
}
/**
 * Enables the backing store on default serialization writers and the given serialization writer.
 * @param original The serialization writer to enable the backing store on.
 * @return A new serialization writer with the backing store enabled.
 */
function enableBackingStoreForSerializationWriterFactory(original) {
    if (!original)
        throw new Error("Original must be specified");
    let result = original;
    if (original instanceof SerializationWriterFactoryRegistry) {
        enableBackingStoreForSerializationRegistry(original);
    }
    else {
        result = new BackingStoreSerializationWriterProxyFactory(original);
    }
    enableBackingStoreForSerializationRegistry(SerializationWriterFactoryRegistry.defaultInstance);
    enableBackingStoreForParseNodeRegistry(ParseNodeFactoryRegistry.defaultInstance);
    return result;
}
/**
 * Enables the backing store on default parse node factories and the given parse node factory.
 * @param original The parse node factory to enable the backing store on.
 * @return A new parse node factory with the backing store enabled.
 */
function enableBackingStoreForParseNodeFactory(original) {
    if (!original)
        throw new Error("Original must be specified");
    let result = original;
    if (original instanceof ParseNodeFactoryRegistry) {
        enableBackingStoreForParseNodeRegistry(original);
    }
    else {
        result = new BackingStoreParseNodeFactory(original);
    }
    enableBackingStoreForParseNodeRegistry(ParseNodeFactoryRegistry.defaultInstance);
    return result;
}
function enableBackingStoreForParseNodeRegistry(registry) {
    for (const [k, v] of registry.contentTypeAssociatedFactories) {
        if (!(v instanceof BackingStoreParseNodeFactory ||
            v instanceof ParseNodeFactoryRegistry)) {
            registry.contentTypeAssociatedFactories.set(k, new BackingStoreParseNodeFactory(v));
        }
    }
}
function enableBackingStoreForSerializationRegistry(registry) {
    for (const [k, v] of registry.contentTypeAssociatedFactories) {
        if (!(v instanceof BackingStoreSerializationWriterProxyFactory ||
            v instanceof SerializationWriterFactoryRegistry)) {
            registry.contentTypeAssociatedFactories.set(k, new BackingStoreSerializationWriterProxyFactory(v));
        }
    }
}

/** Parent interface for errors thrown by the client when receiving failed responses to its requests. */
class ApiError extends Error {
    constructor(message) {
        super(message);
    }
}

/** Maintains a list of valid hosts and allows authentication providers to check whether a host is valid before authenticating a request */
class AllowedHostsValidator {
    /**
     * Creates a new AllowedHostsValidator object with provided values.
     * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    constructor(allowedHosts = new Set()) {
        this.allowedHosts = allowedHosts !== null && allowedHosts !== void 0 ? allowedHosts : new Set();
    }
    /**
     * Gets the list of valid hosts.  If the list is empty, all hosts are valid.
     * @returns A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    getAllowedHosts() {
        return Array.from(this.allowedHosts);
    }
    /**
     * Sets the list of valid hosts.  If the list is empty, all hosts are valid.
     * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    setAllowedHosts(allowedHosts) {
        this.allowedHosts = allowedHosts;
    }
    /**
     * Checks whether the provided host is valid.
     * @param url The url to check.
     */
    isUrlHostValid(url) {
        var _a;
        if (!url)
            return false;
        if (this.allowedHosts.size === 0)
            return true;
        const schemeAndRest = url.split("://");
        if (schemeAndRest.length >= 2) {
            const rest = schemeAndRest[1];
            if (rest) {
                return this.isHostAndPathValid(rest);
            }
        }
        else if (!url.startsWith("http")) {
            // protocol relative URL domain.tld/path
            return this.isHostAndPathValid(url);
        }
        //@ts-ignore
        if (window && window.location && window.location.host) {
            // we're in a browser, and we're using paths only ../path, ./path, /path, etc.
            //@ts-ignore
            return this.allowedHosts.has((_a = window.location.host) === null || _a === void 0 ? void 0 : _a.toLowerCase());
        }
        return false;
    }
    isHostAndPathValid(rest) {
        const hostAndRest = rest.split("/");
        if (hostAndRest.length >= 2) {
            const host = hostAndRest[0];
            if (host) {
                return this.allowedHosts.has(host.toLowerCase());
            }
        }
        return false;
    }
}

function validateProtocol(url) {
    if (!url.toLocaleLowerCase().startsWith('https://') && !windowUrlStartsWithHttps()) {
        throw new Error('Authentication scheme can only be used with https requests');
    }
}
function windowUrlStartsWithHttps() {
    // @ts-ignore
    return window && window.location && window.location.protocol.toLowerCase() !== 'https:';
}

/** Authenticate a request by using an API Key */
class ApiKeyAuthenticationProvider {
    /**
     * @constructor Creates an instance of ApiKeyAuthenticationProvider
     * @param apiKey The API Key to use for authentication
     * @param parameterName The name of the parameter to use for authentication
     * @param location The location of the parameter to use for authentication
     * @param validHosts The hosts that are allowed to use this authentication provider
     */
    constructor(apiKey, parameterName, location, validHosts) {
        this.apiKey = apiKey;
        this.parameterName = parameterName;
        this.location = location;
        if (apiKey === undefined || apiKey === "") {
            throw new Error("apiKey cannot be null or empty");
        }
        if (parameterName === undefined || parameterName === "") {
            throw new Error("parameterName cannot be null or empty");
        }
        if (location !== ApiKeyLocation.QueryParameter &&
            location !== ApiKeyLocation.Header) {
            throw new Error("location must be either QueryParameter or Header");
        }
        this.validator = new AllowedHostsValidator(validHosts);
    }
    authenticateRequest(request, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    additionalAuthenticationContext) {
        const url = request.URL;
        if (!url || !this.validator.isUrlHostValid(url)) {
            return Promise.resolve();
        }
        validateProtocol(url);
        switch (this.location) {
            case ApiKeyLocation.QueryParameter:
                request.URL +=
                    (url.indexOf("?") === -1 ? "?" : "&") +
                        this.parameterName +
                        "=" +
                        this.apiKey;
                break;
            case ApiKeyLocation.Header:
                request.headers[this.parameterName] = this.apiKey;
                break;
        }
        return Promise.resolve();
    }
}
/** The location for the API key */
var ApiKeyLocation;
(function (ApiKeyLocation) {
    /** The API key is in the query parameters */
    ApiKeyLocation[ApiKeyLocation["QueryParameter"] = 0] = "QueryParameter";
    /** The API key is in the headers */
    ApiKeyLocation[ApiKeyLocation["Header"] = 1] = "Header";
})(ApiKeyLocation || (ApiKeyLocation = {}));

/** This authentication provider does not perform any authentication.   */
class AnonymousAuthenticationProvider {
    constructor() {
        this.authenticateRequest = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _2) => {
            return Promise.resolve();
        };
    }
}

/** Provides a base class for implementing AuthenticationProvider for Bearer token scheme. */
class BaseBearerTokenAuthenticationProvider {
    /**
     *
     * @param accessTokenProvider
     */
    constructor(accessTokenProvider) {
        this.accessTokenProvider = accessTokenProvider;
        this.authenticateRequest = async (request, additionalAuthenticationContext) => {
            if (!request) {
                throw new Error("request info cannot be null");
            }
            if (additionalAuthenticationContext &&
                additionalAuthenticationContext["claims"] &&
                request.headers[BaseBearerTokenAuthenticationProvider.authorizationHeaderKey]) {
                delete request.headers[BaseBearerTokenAuthenticationProvider.authorizationHeaderKey];
            }
            if (!request.headers ||
                !request.headers[BaseBearerTokenAuthenticationProvider.authorizationHeaderKey]) {
                const token = await this.accessTokenProvider.getAuthorizationToken(request.URL, additionalAuthenticationContext);
                if (!request.headers) {
                    request.headers = {};
                }
                if (token) {
                    request.headers[BaseBearerTokenAuthenticationProvider.authorizationHeaderKey] = `Bearer ${token}`;
                }
            }
        };
    }
}
BaseBearerTokenAuthenticationProvider.authorizationHeaderKey = "Authorization";

/**
 * Represents a date only. ISO 8601.
 */
class DateOnly {
    /**
     * Creates a new DateOnly from the given string.
     * @returns The new DateOnly
     * @throws An error if the year is invalid
     * @throws An error if the month is invalid
     * @throws An error if the day is invalid
     */
    constructor({ year = 0, month = 1, day = 1, }) {
        this.date = new Date(year, month - 1, day);
    }
    get year() {
        return this.date.getFullYear();
    }
    set year(value) {
        this.date.setFullYear(value);
    }
    get month() {
        return this.date.getMonth() + 1;
    }
    set month(value) {
        this.date.setMonth(value - 1);
    }
    get day() {
        return this.date.getDate();
    }
    set day(value) {
        this.date.setDate(value);
    }
    /**
     * Creates a new DateOnly from the given date.
     * @param date The date
     * @returns The new DateOnly
     * @throws An error if the date is invalid
     */
    static fromDate(date) {
        if (!date) {
            throw new Error("Date cannot be undefined");
        }
        const result = new DateOnly({});
        result.date = new Date(date);
        return result;
    }
    /**
     * Parses a string into a DateOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.
     * @param value The value to parse
     * @returns The parsed DateOnly.
     * @throws An error if the value is invalid
     */
    static parse(value) {
        var _a, _b, _c, _d, _e, _f;
        if (!value || value.length === 0) {
            return undefined;
        }
        const ticks = Date.parse(value);
        if (isNaN(ticks)) {
            const exec = /^(?<year>\d{4,})-(?<month>0[1-9]|1[012])-(?<day>0[1-9]|[12]\d|3[01])$/gi.exec(value);
            if (exec) {
                const year = parseInt((_b = (_a = exec.groups) === null || _a === void 0 ? void 0 : _a.year) !== null && _b !== void 0 ? _b : "");
                const month = parseInt((_d = (_c = exec.groups) === null || _c === void 0 ? void 0 : _c.month) !== null && _d !== void 0 ? _d : "");
                const day = parseInt((_f = (_e = exec.groups) === null || _e === void 0 ? void 0 : _e.day) !== null && _f !== void 0 ? _f : "");
                return new DateOnly({ year, month, day });
            }
            else {
                throw new Error("Value is not a valid date-only representation");
            }
        }
        else {
            const date = new Date(ticks);
            return this.fromDate(date);
        }
    }
    /**
     *  Returns a string representation of the date in the format YYYY-MM-DD
     * @returns The date in the format YYYY-MM-DD ISO 8601
     */
    toString() {
        return `${formatSegment(this.year, 4)}-${formatSegment(this.month)}-${formatSegment(this.day)}`;
    }
}
function formatSegment(segment, digits = 2) {
    return segment.toString().padStart(digits, "0");
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function () {
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var dist = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.serialize = exports.parse = exports.InvalidDurationError = void 0;
	const units = [
	    { unit: 'years', symbol: 'Y' },
	    { unit: 'months', symbol: 'M' },
	    { unit: 'weeks', symbol: 'W' },
	    { unit: 'days', symbol: 'D' },
	    { unit: 'hours', symbol: 'H' },
	    { unit: 'minutes', symbol: 'M' },
	    { unit: 'seconds', symbol: 'S' },
	];
	// Construction of the duration regex
	const r = (name, unit) => `((?<${name}>-?\\d*[\\.,]?\\d+)${unit})?`;
	const durationRegex = new RegExp([
	    '(?<negative>-)?P',
	    r('years', 'Y'),
	    r('months', 'M'),
	    r('weeks', 'W'),
	    r('days', 'D'),
	    '(T',
	    r('hours', 'H'),
	    r('minutes', 'M'),
	    r('seconds', 'S'),
	    ')?', // end optional time
	].join(''));
	function parseNum(s) {
	    if (s === '' || s === undefined || s === null) {
	        return undefined;
	    }
	    return parseFloat(s.replace(',', '.'));
	}
	exports.InvalidDurationError = new Error('Invalid duration');
	function parse(durationStr) {
	    const match = durationRegex.exec(durationStr);
	    if (!match || !match.groups) {
	        throw exports.InvalidDurationError;
	    }
	    let empty = true;
	    const values = {};
	    for (const { unit } of units) {
	        if (match.groups[unit]) {
	            empty = false;
	            values[unit] = parseNum(match.groups[unit]);
	        }
	    }
	    if (empty) {
	        throw exports.InvalidDurationError;
	    }
	    const duration = values;
	    if (match.groups.negative) {
	        duration.negative = true;
	    }
	    return duration;
	}
	exports.parse = parse;
	const s = (number, component) => {
	    if (!number) {
	        return undefined;
	    }
	    let numberAsString = number.toString();
	    const exponentIndex = numberAsString.indexOf('e');
	    if (exponentIndex > -1) {
	        const magnitude = parseInt(numberAsString.slice(exponentIndex + 2), 10);
	        numberAsString = number.toFixed(magnitude + exponentIndex - 2);
	    }
	    return numberAsString + component;
	};
	function serialize(duration) {
	    if (!duration.years &&
	        !duration.months &&
	        !duration.weeks &&
	        !duration.days &&
	        !duration.hours &&
	        !duration.minutes &&
	        !duration.seconds) {
	        return 'PT0S';
	    }
	    return [
	        duration.negative && '-',
	        'P',
	        s(duration.years, 'Y'),
	        s(duration.months, 'M'),
	        s(duration.weeks, 'W'),
	        s(duration.days, 'D'),
	        (duration.hours || duration.minutes || duration.seconds) && 'T',
	        s(duration.hours, 'H'),
	        s(duration.minutes, 'M'),
	        s(duration.seconds, 'S'),
	    ]
	        .filter(Boolean)
	        .join('');
	}
	exports.serialize = serialize;
	
} (dist));

/**
 * Represents a duration value. ISO 8601.
 */
class Duration {
    /**
     * Creates a new Duration value from the given parameters.
     * @returns The new Duration
     * @throws An error if years is invalid
     * @throws An error if months is invalid
     * @throws An error if weeks is invalid
     * @throws An error if days is invalid
     * @throws An error if hours is invalid
     * @throws An error if minutes is invalid
     * @throws An error if seconds is invalid
     * @throws An error if weeks is used in combination with years or months
     */
    constructor({ years = 0, months = 0, weeks = 0, days = 0, hours = 0, minutes = 0, seconds = 0, negative = false, }) {
        if (years < 0 || years > 9999) {
            throw new Error("Year must be between 0 and 9999");
        }
        if (months < 0 || months > 11) {
            throw new Error("Month must be between 0 and 11");
        }
        if (weeks < 0 || weeks > 53) {
            throw new Error("Week must be between 0 and 53");
        }
        if (days < 0 || days > 6) {
            throw new Error("Day must be between 0 and 6");
        }
        if (hours < 0 || hours > 23) {
            throw new Error("Hour must be between 0 and 23");
        }
        if (minutes < 0 || minutes > 59) {
            throw new Error("Minute must be between 0 and 59");
        }
        if (seconds < 0 || seconds > 59) {
            throw new Error("Second must be between 0 and 59");
        }
        if ((years > 0 || months > 0) && weeks > 0) {
            throw new Error("Cannot have weeks and months or weeks and years");
        }
        this.years = years;
        this.months = months;
        this.weeks = weeks;
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.negative = negative;
    }
    /**
     * Parses a string into a Duration. The string can be of the ISO 8601 duration format.
     * @param value The value to parse
     * @returns The parsed Duration.
     * @throws An error if the value is invalid
     */
    static parse(value) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (!value || value.length === 0) {
            return undefined;
        }
        const duration = dist.parse(value);
        return new Duration({
            years: (_a = duration.years) !== null && _a !== void 0 ? _a : 0,
            months: (_b = duration.months) !== null && _b !== void 0 ? _b : 0,
            weeks: (_c = duration.weeks) !== null && _c !== void 0 ? _c : 0,
            days: (_d = duration.days) !== null && _d !== void 0 ? _d : 0,
            hours: (_e = duration.hours) !== null && _e !== void 0 ? _e : 0,
            minutes: (_f = duration.minutes) !== null && _f !== void 0 ? _f : 0,
            seconds: (_g = duration.seconds) !== null && _g !== void 0 ? _g : 0,
            negative: (_h = duration.negative) !== null && _h !== void 0 ? _h : false,
        });
    }
    /**
     * Serializes the duration to a string in the ISO 8601 duration format.
     * @returns The serialized duration.
     */
    toString() {
        return dist.serialize(this);
    }
}

var uriTemplateLite = {};

/**
 * @version    20.5.0
 * @author     Lauri Rooden <lauri@rooden.ee>
 * @license    MIT License
 */



!function(URI) {

	/**
	 * URI Template
	 * @see http://tools.ietf.org/html/rfc6570
	 */

	var RESERVED = /[!'()]/g
	// /[[\]:\/!#$&()*+,;='?@]/g
	, SEPARATORS = {"": ",", "+": ",", "#": ",", "?": "&"}
	, escapeRe = /[$-/?[-^{|}]/g
	, expandRe = /\{([#&+./;?]?)((?:[-\w%.]+(\*|:\d+)?(?:,|(?=})))+)\}/g
	, parseRe  = RegExp(expandRe.source + "|.[^{]*?", "g");

	URI.encoder = encodeURIComponent;
	URI.decoder = decodeURIComponent;

	/*** EXPAND ***/
	function encodeNormal(val) {
		return URI.encoder(val).replace(RESERVED, escape)
	}

	function notNull(s) {
		return s != null
	}

	function mapCleanJoin(arr, mapFn, joinStr) {
		arr = arr.map(mapFn).filter(notNull);
		return arr.length && arr.join(joinStr)
	}

	function expand(template, data) {
		return template.replace(expandRe, function(_, op, vals) {
			var sep = SEPARATORS[op] || op
			, named = sep == ";" || sep == "&"
			, enc = op && sep == "," ? encodeURI : encodeNormal
			, out = mapCleanJoin(vals.split(","), function(_name) {
				var mod = _name.split(/[*:]/)
				, name = mod[0]
				, val = data[name];

				if (val == null) return

				if (typeof val == "object") {
					mod = name != _name;
					if (Array.isArray(val)) {
						val = mapCleanJoin(val, enc, mod ? named ? sep + name + "=" : sep : "," );
					} else {
						val = mapCleanJoin(Object.keys(val), function(key) {
							return enc(key) + (mod ? "=" : ",") + enc(val[key])
						}, mod && (named || sep == "/") ? sep : ",");
						if (mod) named = 0;
					}
					if (!val) return
				} else {
					val = enc(mod[1] ? val.slice(0, mod[1]) : val);
				}

				return (
					named ?
					name + (val || sep == "&" ? "=" + val : val) :
					val
				)
			}, sep);

			return out || out === "" ? (op != "+" ? op + out : out) : ""
		}
	)}

	URI.expand = expand;
	/**/

	URI.Template = function Template(template) {
		var self = this
		//if (!(self instanceof Template)) return new Template(template)
		/*** PARSE ***/
		, pos = 0
		, lengths = {}
		, fnStr = ""
		, reStr = "^" + template.replace(parseRe, function(_, op, vals) {
			if (!vals) return escapeRegExp(_)

			var sep = SEPARATORS[op] || op
			, named = sep == ";" || sep == "&";
			return vals.split(",").map(function(_name, i) {
				var mod = _name.split(/[*:]/)
				, name = mod[0]
				, re = (lengths[name] || "(") + ".*?)";

				pos++;
				if (mod[1]) {
					re = "((?:%..|.){1," + mod[1] + "})";
					lengths[name] = "(\\" + pos;
				}
				fnStr += "t=($[" + pos + "]||'').split('" + (mod ? named ? sep + name + "=" : sep : ",") + "').map(d);";
				fnStr += "o[\"" + name + "\"]=" + (mod[1] === "" ? "t;" : "t.length>1?t:t[0];");
				re = escapeRegExp(i === 0 ? op === "+" ? "" : op : sep) + (
					named ?
					escapeRegExp(name) + "(?:=" + re + ")?" :
					sep == "&" ?
					escapeRegExp(name + "=") + re :
					re
				);
				return mod[1] === "" ? "(?:" + re + ")?" : re
			}).join("")
		}) + "$"
		, re = RegExp(reStr)
		, fn = Function("$,d", "var t,o={};" + fnStr + "return o");

		self.template = template;
		self.match = function(uri) {
			var match = re.exec(uri);
			return match && fn(match, URI.decoder)
		};

		function escapeRegExp(string) {
			return string.replace(escapeRe, "\\$&")
		}
		/**/
		/*** EXPAND ***/
		self.expand = expand.bind(self, template);
		/**/
	};

// `this` is `exports` in NodeJS and `window` in browser.
}(commonjsGlobal.URI || (commonjsGlobal.URI = {})); // jshint ignore:line

/*
 * Represents a time only. ISO 8601.
 */
class TimeOnly {
    /**
     * Creates a new TimeOnly from the given parameters.
     * @returns The new TimeOnly
     * @throws An error if the milliseconds are invalid
     * @throws An error if the seconds are invalid
     * @throws An error if the minutes are invalid
     * @throws An error if the hours are invalid
     * @throws An error if the milliseconds are invalid
     */
    constructor({ hours = 0, minutes = 0, seconds = 0, picoseconds = 0, }) {
        if (hours < 0 || hours > 23) {
            throw new Error("Hour must be between 0 and 23");
        }
        if (minutes < 0 || minutes > 59) {
            throw new Error("Minute must be between 0 and 59");
        }
        if (seconds < 0 || seconds > 59) {
            throw new Error("Second must be between 0 and 59");
        }
        if (picoseconds < 0 || picoseconds > 999999999999) {
            throw new Error("Millisecond must be between 0 and 999999999999");
        }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.picoseconds = picoseconds;
    }
    /**
     * Creates a new TimeOnly from the given date.
     * @param date The date
     * @returns The new TimeOnly
     * @throws An error if the date is invalid
     */
    static fromDate(date) {
        if (!date) {
            throw new Error("Date cannot be undefined");
        }
        return new TimeOnly({
            hours: date.getHours(),
            minutes: date.getMinutes(),
            seconds: date.getSeconds(),
            picoseconds: date.getMilliseconds() * 1000000000,
        });
    }
    /**
     * Parses a string into a TimeOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.
     * @param value The value to parse
     * @returns The parsed TimeOnly.
     * @throws An error if the value is invalid
     */
    static parse(value) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (!value || value.length === 0) {
            return undefined;
        }
        const ticks = Date.parse(value);
        if (isNaN(ticks)) {
            const exec = /^(?<hours>[01]\d|2[0-3]):(?<minutes>[0-5]\d):(?<seconds>[0-5]\d)(?:[.](?<milliseconds>\d{1,12}))?$/gi.exec(value);
            if (exec) {
                const hours = parseInt((_b = (_a = exec.groups) === null || _a === void 0 ? void 0 : _a.hours) !== null && _b !== void 0 ? _b : "");
                const minutes = parseInt((_d = (_c = exec.groups) === null || _c === void 0 ? void 0 : _c.minutes) !== null && _d !== void 0 ? _d : "");
                const seconds = parseInt((_f = (_e = exec.groups) === null || _e === void 0 ? void 0 : _e.seconds) !== null && _f !== void 0 ? _f : "");
                const milliseconds = parseInt((_h = (_g = exec.groups) === null || _g === void 0 ? void 0 : _g.milliseconds) !== null && _h !== void 0 ? _h : "0");
                return new TimeOnly({
                    hours,
                    minutes,
                    seconds,
                    picoseconds: milliseconds,
                });
            }
            else {
                throw new Error("Value is not a valid time-only representation");
            }
        }
        else {
            const date = new Date(ticks);
            return this.fromDate(date);
        }
    }
    /**
     * Returns a string representation of the time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @returns The time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @throws An error if the time is invalid
     */
    toString() {
        return `${formatSegment(this.hours, 2)}:${formatSegment(this.minutes, 2)}:${formatSegment(this.seconds, 2)}.${formatSegment(this.picoseconds, 12)}`;
    }
}

/** This class represents an abstract HTTP request. */
class RequestInformation {
    constructor() {
        /** The path parameters for the request. */
        this.pathParameters = {};
        /** The Query Parameters of the request. */
        this.queryParameters = {}; //TODO: case insensitive
        /** The Request Headers. */
        this.headers = {}; //TODO: case insensitive
        this._requestOptions = {}; //TODO: case insensitive
        /**
         * Sets the request body from a model with the specified content type.
         * @param value the models.
         * @param contentType the content type.
         * @param requestAdapter The adapter service to get the serialization writer from.
         * @typeParam T the model type.
         */
        this.setContentFromParsable = (requestAdapter, contentType, value, serializerMethod) => {
            const writer = this.getSerializationWriter(requestAdapter, contentType, value);
            if (!this.headers) {
                this.headers = {};
            }
            if (Array.isArray(value)) {
                writer.writeCollectionOfObjectValuesFromMethod(undefined, value, 
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                serializerMethod);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                writer.writeObjectValueFromMethod(undefined, value, serializerMethod);
            }
            this.setContentAndContentType(writer, contentType);
        };
        this.setContentAndContentType = (writer, contentType) => {
            if (contentType) {
                this.headers[RequestInformation.contentTypeHeader] = contentType;
            }
            this.content = writer.getSerializedContent();
        };
        this.getSerializationWriter = (requestAdapter, contentType, ...values) => {
            if (!requestAdapter)
                throw new Error("httpCore cannot be undefined");
            if (!contentType)
                throw new Error("contentType cannot be undefined");
            if (!values || values.length === 0) {
                throw new Error("values cannot be undefined or empty");
            }
            return requestAdapter
                .getSerializationWriterFactory()
                .getSerializationWriter(contentType);
        };
        /**
         * Sets the request body from a model with the specified content type.
         * @param value the scalar values to serialize.
         * @param contentType the content type.
         * @param requestAdapter The adapter service to get the serialization writer from.
         * @typeParam T the model type.
         */
        this.setContentFromScalar = (requestAdapter, contentType, value) => {
            const writer = this.getSerializationWriter(requestAdapter, contentType, value);
            if (!this.headers) {
                this.headers = {};
            }
            if (Array.isArray(value)) {
                writer.writeCollectionOfPrimitiveValues(undefined, value);
            }
            else {
                const valueType = typeof value;
                if (!value) {
                    writer.writeNullValue(undefined);
                }
                else if (valueType === "boolean") {
                    writer.writeBooleanValue(undefined, value);
                }
                else if (valueType === "string") {
                    writer.writeStringValue(undefined, value);
                }
                else if (value instanceof Date) {
                    writer.writeDateValue(undefined, value);
                }
                else if (value instanceof DateOnly) {
                    writer.writeDateOnlyValue(undefined, value);
                }
                else if (value instanceof TimeOnly) {
                    writer.writeTimeOnlyValue(undefined, value);
                }
                else if (value instanceof Duration) {
                    writer.writeDurationValue(undefined, value);
                }
                else if (valueType === "number") {
                    writer.writeNumberValue(undefined, value);
                }
                else if (Array.isArray(value)) {
                    writer.writeCollectionOfPrimitiveValues(undefined, value);
                }
                else {
                    throw new Error(`encountered unknown value type during serialization ${valueType}`);
                }
            }
            this.setContentAndContentType(writer, contentType);
        };
        /**
         * Sets the request body to be a binary stream.
         * @param value the binary stream
         */
        this.setStreamContent = (value) => {
            this.headers[RequestInformation.contentTypeHeader] =
                RequestInformation.binaryContentType;
            this.content = value;
        };
        /**
         * Sets the query string parameters from a raw object.
         * @param parameters the parameters.
         */
        this.setQueryStringParametersFromRawObject = (q) => {
            if (!q)
                return;
            Object.entries(q).forEach(([k, v]) => {
                let key = k;
                if (q.getQueryParameter) {
                    const serializationKey = q.getQueryParameter(key);
                    if (serializationKey) {
                        key = serializationKey;
                    }
                }
                this.queryParameters[key] = v;
            });
        };
    }
    /** Gets the URL of the request  */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    get URL() {
        const rawUrl = this.pathParameters[RequestInformation.raw_url_key];
        if (this.uri) {
            return this.uri;
        }
        else if (rawUrl) {
            this.URL = rawUrl;
            return rawUrl;
        }
        else if (!this.queryParameters) {
            throw new Error("queryParameters cannot be undefined");
        }
        else if (!this.pathParameters) {
            throw new Error("pathParameters cannot be undefined");
        }
        else if (!this.urlTemplate) {
            throw new Error("urlTemplate cannot be undefined");
        }
        else {
            const template = new uriTemplateLite.URI.Template(this.urlTemplate);
            const data = {};
            for (const key in this.queryParameters) {
                if (this.queryParameters[key]) {
                    data[key] = this.queryParameters[key];
                }
            }
            for (const key in this.pathParameters) {
                if (this.pathParameters[key]) {
                    data[key] = this.pathParameters[key];
                }
            }
            return template.expand(data);
        }
    }
    /** Sets the URL of the request */
    set URL(url) {
        if (!url)
            throw new Error("URL cannot be undefined");
        this.uri = url;
        this.queryParameters = {};
        this.pathParameters = {};
    }
    /** Gets the request options for the request. */
    getRequestOptions() {
        return this._requestOptions;
    }
    /** Adds the headers for the request. */
    addRequestHeaders(source) {
        if (!source)
            return;
        for (const key in source) {
            this.headers[key] = source[key];
        }
    }
    /** Adds the request options for the request. */
    addRequestOptions(options) {
        if (!options || options.length === 0)
            return;
        options.forEach((option) => {
            this._requestOptions[option.getKey()] = option;
        });
    }
    /** Removes the request options for the request. */
    removeRequestOptions(...options) {
        if (!options || options.length === 0)
            return;
        options.forEach((option) => {
            delete this._requestOptions[option.getKey()];
        });
    }
}
RequestInformation.raw_url_key = "request-raw-url";
RequestInformation.binaryContentType = "application/octet-stream";
RequestInformation.contentTypeHeader = "Content-Type";

function getPathParameters(parameters) {
    const result = {};
    if (typeof parameters === "string") {
        result[RequestInformation.raw_url_key] = parameters;
    }
    else if (parameters) {
        for (const key in parameters) {
            result[key] = parameters[key];
        }
    }
    return result;
}

/**
 * Represents the HTTP method used by a request.
 */
var HttpMethod;
(function (HttpMethod) {
    /** The HTTP GET method */
    HttpMethod["GET"] = "GET";
    /** The HTTP POST method */
    HttpMethod["POST"] = "POST";
    /** The HTTP PATCH method */
    HttpMethod["PATCH"] = "PATCH";
    /** The HTTP DELETE method */
    HttpMethod["DELETE"] = "DELETE";
    /** The HTTP OPTIONS method */
    HttpMethod["OPTIONS"] = "OPTIONS";
    /** The HTTP CONNECT method */
    HttpMethod["CONNECT"] = "CONNECT";
    /** The HTTP TRACE method */
    HttpMethod["TRACE"] = "TRACE";
    /** The HTTP HEAD method */
    HttpMethod["HEAD"] = "HEAD";
    /** The HTTP PUT method */
    HttpMethod["PUT"] = "PUT";
})(HttpMethod || (HttpMethod = {}));

/** Default response handler to access the native response object. */
class NativeResponseHandler {
    handleResponseAsync(response, errorMappings) {
        this.value = response;
        this.errorMappings = errorMappings;
        return Promise.resolve(undefined);
    }
}

/** This class can be used to wrap a request using the fluent API and get the native response object in return. */
class NativeResponseWrapper {
}
NativeResponseWrapper.CallAndGetNative = async (originalCall, q, h, o) => {
    const responseHandler = new NativeResponseHandler();
    await originalCall(q, h, o, responseHandler);
    return responseHandler.value;
};
NativeResponseWrapper.CallAndGetNativeWithBody = async (originalCall, requestBody, q, h, o) => {
    const responseHandler = new NativeResponseHandler();
    await originalCall(requestBody, q, h, o, responseHandler);
    return responseHandler.value;
};

function toFirstCharacterUpper(source) {
    if (source && source.length > 0) {
        return source.substring(0, 1).toLocaleUpperCase() + source.substring(1);
    }
    else {
        return "";
    }
}

var src$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    registerDefaultSerializer: registerDefaultSerializer,
    registerDefaultDeserializer: registerDefaultDeserializer,
    enableBackingStoreForSerializationWriterFactory: enableBackingStoreForSerializationWriterFactory,
    enableBackingStoreForParseNodeFactory: enableBackingStoreForParseNodeFactory,
    ApiError: ApiError,
    AllowedHostsValidator: AllowedHostsValidator,
    ApiKeyAuthenticationProvider: ApiKeyAuthenticationProvider,
    get ApiKeyLocation () { return ApiKeyLocation; },
    AnonymousAuthenticationProvider: AnonymousAuthenticationProvider,
    BaseBearerTokenAuthenticationProvider: BaseBearerTokenAuthenticationProvider,
    validateProtocol: validateProtocol,
    DateOnly: DateOnly,
    formatSegment: formatSegment,
    Duration: Duration,
    getPathParameters: getPathParameters,
    get HttpMethod () { return HttpMethod; },
    NativeResponseHandler: NativeResponseHandler,
    NativeResponseWrapper: NativeResponseWrapper,
    RequestInformation: RequestInformation,
    ParseNodeFactoryRegistry: ParseNodeFactoryRegistry,
    ParseNodeProxyFactory: ParseNodeProxyFactory,
    SerializationWriterFactoryRegistry: SerializationWriterFactoryRegistry,
    SerializationWriterProxyFactory: SerializationWriterProxyFactory,
    BackingStoreFactorySingleton: BackingStoreFactorySingleton,
    BackingStoreParseNodeFactory: BackingStoreParseNodeFactory,
    BackingStoreSerializationWriterProxyFactory: BackingStoreSerializationWriterProxyFactory,
    InMemoryBackingStore: InMemoryBackingStore,
    InMemoryBackingStoreFactory: InMemoryBackingStoreFactory,
    TimeOnly: TimeOnly,
    toFirstCharacterUpper: toFirstCharacterUpper
});

/** Builds and executes requests for operations under /users/{user-id}/createdObjects */
class CreatedObjectsRequestBuilder {
    /**
     * Instantiates a new CreatedObjectsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/createdObjects{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get a list of directory objects that were created by the user. This API returns only those directory objects that were created by a user who isn't in any administrator role; otherwise, it returns an empty object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get a list of directory objects that were created by the user. This API returns only those directory objects that were created by a user who isn't in any administrator role; otherwise, it returns an empty object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of DirectoryObjectCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoDirectoryObjectCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id} */
class UserItemRequestBuilder {
    /**
     * Instantiates a new UserItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    create(f) {
        return new f(this.pathParameters, this.requestAdapter);
    }
    /** The createdObjects property */
    get createdObjects() {
        return new CreatedObjectsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Delete user.   When deleted, user resources are moved to a temporary container and can be restored within 30 days.  After that time, they are permanently deleted.  To learn more, see deletedItems.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.createdObjects.item collection
     * @param id Unique identifier of the item
     * @returns a DirectoryObjectItemRequestBuilder
     */
    // public createdObjectsById(id: string) : i5eed8585f0e3283348246e245da2a8062b886f11233fe02158dc2fd851fa5cb1 {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["directoryObject%2Did"] = id
    //     return new i5eed8585f0e3283348246e245da2a8062b886f11233fe02158dc2fd851fa5cb1(urlTplParams, this.requestAdapter);
    // };
    /**
     * Retrieve the properties and relationships of user object. This operation returns by default only a subset of the more commonly used properties for each user. These _default_ properties are noted in the Properties section. To get properties that are _not_ returned by default, do a GET operation for the user and specify the properties in a `$select` OData query option. Because the **user** resource supports extensions, you can also use the `GET` operation to get custom properties and extension data in a **user** instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the properties of a user object. Not all properties can be updated by Member or Guest users with their default permissions without Administrator roles. Compare member and guest default permissions to see properties they can manage.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUser);
        return requestInfo;
    }
    ;
    /**
     * Delete user.   When deleted, user resources are moved to a temporary container and can be restored within 30 days.  After that time, they are permanently deleted.  To learn more, see deletedItems.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    // /**
    //  * Gets an item from the ApiSdk.users.item.directReports.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a DirectoryObjectItemRequestBuilder
    //  */
    // public directReportsById(id: string) : i0c1a1b9376bd00b00f88b35ac4319ad248e61a7d2f339705d240a7e2553a7f56 {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["directoryObject%2Did"] = id
    //     return new i0c1a1b9376bd00b00f88b35ac4319ad248e61a7d2f339705d240a7e2553a7f56(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.extensions.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a ExtensionItemRequestBuilder
    //  */
    // public extensionsById(id: string) : ExtensionItemRequestBuilder {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["extension%2Did"] = id
    //     return new ExtensionItemRequestBuilder(urlTplParams, this.requestAdapter);
    // };
    /**
     * Retrieve the properties and relationships of user object. This operation returns by default only a subset of the more commonly used properties for each user. These _default_ properties are noted in the Properties section. To get properties that are _not_ returned by default, do a GET operation for the user and specify the properties in a `$select` OData query option. Because the **user** resource supports extensions, you can also use the `GET` operation to get custom properties and extension data in a **user** instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of User
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoUser, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.licenseDetails.item collection
     * @param id Unique identifier of the item
     * @returns a LicenseDetailsItemRequestBuilder
     */
    // public licenseDetailsById(id: string) : LicenseDetailsItemRequestBuilder {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["licenseDetails%2Did"] = id
    //     return new LicenseDetailsItemRequestBuilder(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.memberOf.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a DirectoryObjectItemRequestBuilder
    //  */
    // public memberOfById(id: string) : ia6e9e43a5ea33c64071b78c19e38c5c691aae47e6d98d4a7524d77f8337441c1 {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["directoryObject%2Did"] = id
    //     return new ia6e9e43a5ea33c64071b78c19e38c5c691aae47e6d98d4a7524d77f8337441c1(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.notifications.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a NotificationItemRequestBuilder
    //  */
    // public notificationsById(id: string) : NotificationItemRequestBuilder {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["notification%2Did"] = id
    //     return new NotificationItemRequestBuilder(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.oauth2PermissionGrants.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a OAuth2PermissionGrantItemRequestBuilder
    //  */
    // public oauth2PermissionGrantsById(id: string) : OAuth2PermissionGrantItemRequestBuilder {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["oAuth2PermissionGrant%2Did"] = id
    //     return new OAuth2PermissionGrantItemRequestBuilder(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.ownedDevices.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a DirectoryObjectItemRequestBuilder
    //  */
    // public ownedDevicesById(id: string) : ibb1775edc8b00d6847216de6125761519cda46437475647d9e60f76954f077ae {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["directoryObject%2Did"] = id
    //     return new ibb1775edc8b00d6847216de6125761519cda46437475647d9e60f76954f077ae(urlTplParams, this.requestAdapter);
    // };
    // /**
    //  * Gets an item from the ApiSdk.users.item.ownedObjects.item collection
    //  * @param id Unique identifier of the item
    //  * @returns a DirectoryObjectItemRequestBuilder
    //  */
    // public ownedObjectsById(id: string) : i98442ed3c02b04c2ea2cc3066430c127966655dd1b8dca84cb0f918302ae7194 {
    //     if(!id) throw new Error("id cannot be undefined");
    //     const urlTplParams = getPathParameters(this.pathParameters);
    //     urlTplParams["directoryObject%2Did"] = id
    //     return new i98442ed3c02b04c2ea2cc3066430c127966655dd1b8dca84cb0f918302ae7194(urlTplParams, this.requestAdapter);
    // };
    /**
     * Update the properties of a user object. Not all properties can be updated by Member or Guest users with their default permissions without Administrator roles. Compare member and guest default permissions to see properties they can manage.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

function deserializeIntoUserCollectionResponse(userCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { userCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { userCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoUser); },
    };
}

/** Builds and executes requests for operations under /users */
class UsersRequestBuilder {
    /**
     * Instantiates a new UsersRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Retrieve a list of user objects. This operation returns by default only a subset of the more commonly used properties for each user. These _default_ properties are noted in the Properties section. To get properties that are _not_ returned by default, do a GET operation for the user and specify the properties in a `$select` OData query option.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create a new user.The request body contains the user to create. At a minimum, you must specify the required properties for the user. You can optionally specify any other writable properties. This operation returns by default only a subset of the properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation and specify the properties in a `$select` OData query option.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUser);
        return requestInfo;
    }
    ;
    /**
     * Retrieve a list of user objects. This operation returns by default only a subset of the more commonly used properties for each user. These _default_ properties are noted in the Properties section. To get properties that are _not_ returned by default, do a GET operation for the user and specify the properties in a `$select` OData query option.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of UserCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoUserCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create a new user.The request body contains the user to create. At a minimum, you must specify the required properties for the user. You can optionally specify any other writable properties. This operation returns by default only a subset of the properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation and specify the properties in a `$select` OData query option.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of User
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoUser, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

class JsonParseNode {
    /**
     *
     */
    constructor(_jsonNode) {
        this._jsonNode = _jsonNode;
        this.getStringValue = () => this._jsonNode;
        this.getChildNode = (identifier) => new JsonParseNode(this._jsonNode[identifier]);
        this.getBooleanValue = () => this._jsonNode;
        this.getNumberValue = () => this._jsonNode;
        this.getGuidValue = () => this._jsonNode;
        this.getDateValue = () => this._jsonNode;
        this.getDateOnlyValue = () => DateOnly.parse(this.getStringValue());
        this.getTimeOnlyValue = () => TimeOnly.parse(this.getStringValue());
        this.getDurationValue = () => Duration.parse(this.getStringValue());
        this.getCollectionOfPrimitiveValues = () => {
            return this._jsonNode.map((x) => {
                const currentParseNode = new JsonParseNode(x);
                const typeOfX = typeof x;
                if (typeOfX === "boolean") {
                    return currentParseNode.getBooleanValue();
                }
                else if (typeOfX === "string") {
                    return currentParseNode.getStringValue();
                }
                else if (typeOfX === "number") {
                    return currentParseNode.getNumberValue();
                }
                else if (x instanceof Date) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof DateOnly) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof TimeOnly) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof Duration) {
                    return currentParseNode.getDateValue();
                }
                else {
                    throw new Error(`encountered an unknown type during deserialization ${typeof x}`);
                }
            });
        };
        this.getCollectionOfObjectValues = (type) => {
            return this._jsonNode
                .map((x) => new JsonParseNode(x))
                .map((x) => x.getObjectValue(type));
        };
        this.getObjectValue = (type) => {
            const result = type(this);
            if (this.onBeforeAssignFieldValues) {
                this.onBeforeAssignFieldValues(result);
            }
            this.assignFieldValues(result);
            if (this.onAfterAssignFieldValues) {
                this.onAfterAssignFieldValues(result);
            }
            return result;
        };
        this.getCollectionOfObjectValuesFromMethod = (method) => {
            return this._jsonNode
                .map((x) => new JsonParseNode(x))
                .map((x) => x.getObject(method)); // test this
        };
        this.getObject = (deserializerFunction) => {
            const model = {};
            // if (this.onBeforeAssignFieldValues) {
            //   this.onBeforeAssignFieldValues(result);
            // }
            this.aF(model, deserializerFunction);
            // if (this.onAfterAssignFieldValues) {
            //   this.onAfterAssignFieldValues(result);
            // }
            return model;
        };
        this.aF = (model, deserializerFunction) => {
            const fields = deserializerFunction(model);
            // const holder = item as unknown as AdditionalDataHolder;
            // if (holder && holder.additionalData) {
            //   itemAdditionalData = holder.additionalData;
            // }
            if (!this._jsonNode)
                return;
            Object.entries(this._jsonNode).forEach(([k, v]) => {
                const deserializer = fields[k];
                if (deserializer) {
                    deserializer(new JsonParseNode(v));
                }
            });
        };
        this.getEnumValues = (type) => {
            const rawValues = this.getStringValue();
            if (!rawValues) {
                return [];
            }
            return rawValues.split(",").map((x) => type[toFirstCharacterUpper(x)]);
        };
        this.getEnumValue = (type) => {
            const values = this.getEnumValues(type);
            if (values.length > 0) {
                return values[0];
            }
            else {
                return undefined;
            }
        };
        this.assignFieldValues = (item) => {
            const fields = item.getFieldDeserializers();
            let itemAdditionalData;
            const holder = item;
            if (holder && holder.additionalData) {
                itemAdditionalData = holder.additionalData;
            }
            if (!this._jsonNode)
                return;
            Object.entries(this._jsonNode).forEach(([k, v]) => {
                const deserializer = fields[k];
                if (deserializer) {
                    deserializer(new JsonParseNode(v));
                }
                else if (itemAdditionalData) {
                    itemAdditionalData[k] = v;
                }
            });
        };
    }
}

/* eslint-disable @typescript-eslint/no-unused-expressions */
class JsonSerializationWriter {
    constructor() {
        this.writer = [];
        this.writeStringValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writePropertyName = (key) => {
            this.writer.push(`"${key}":`);
        };
        this.writeBooleanValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`${value}`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeNumberValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`${value}`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeGuidValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeDateValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value.toISOString()}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeDateOnlyValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value.toString()}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeTimeOnlyValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value.toString()}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeDurationValue = (key, value) => {
            key && value && this.writePropertyName(key);
            value && this.writer.push(`"${value.toString()}"`);
            key && value && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeNullValue = (key) => {
            key && this.writePropertyName(key);
            this.writer.push(`null`);
            key && this.writer.push(JsonSerializationWriter.propertySeparator);
        };
        this.writeCollectionOfPrimitiveValues = (key, values) => {
            if (values) {
                key && this.writePropertyName(key);
                this.writer.push(`[`);
                values.forEach((v, idx) => {
                    this.writeAnyValue(undefined, v);
                    idx + 1 < values.length &&
                        this.writer.push(JsonSerializationWriter.propertySeparator);
                });
                this.writer.push(`]`);
                key && this.writer.push(JsonSerializationWriter.propertySeparator);
            }
        };
        this.writeCollectionOfObjectValuesFromMethod = (key, values, serializerMethod) => {
            if (values) {
                key && this.writePropertyName(key);
                this.writer.push(`[`);
                values.forEach((v) => {
                    this.writeObjectValueFromMethod(undefined, v, serializerMethod);
                    this.writer.push(JsonSerializationWriter.propertySeparator);
                });
                if (values.length > 0) {
                    //removing the last separator
                    this.writer.pop();
                }
                this.writer.push(`]`);
                key && this.writer.push(JsonSerializationWriter.propertySeparator);
            }
        };
        this.writeCollectionOfObjectValues = (key, values) => {
            if (values) {
                key && this.writePropertyName(key);
                this.writer.push(`[`);
                values.forEach((v) => {
                    this.writeObjectValue(undefined, v);
                    this.writer.push(JsonSerializationWriter.propertySeparator);
                });
                if (values.length > 0) {
                    //removing the last separator
                    this.writer.pop();
                }
                this.writer.push(`]`);
                key && this.writer.push(JsonSerializationWriter.propertySeparator);
            }
        };
        this.writeObjectValue = (key, value) => {
            if (value) {
                if (key) {
                    this.writePropertyName(key);
                }
                this.onBeforeObjectSerialization &&
                    this.onBeforeObjectSerialization(value);
                this.writer.push(`{`);
                this.onStartObjectSerialization &&
                    this.onStartObjectSerialization(value, this);
                value.serialize(this);
                this.onAfterObjectSerialization && this.onAfterObjectSerialization(value);
                if (this.writer.length > 0 &&
                    this.writer[this.writer.length - 1] ===
                        JsonSerializationWriter.propertySeparator) {
                    //removing the last separator
                    this.writer.pop();
                }
                this.writer.push(`}`);
                key && this.writer.push(JsonSerializationWriter.propertySeparator);
            }
        };
        this.writeEnumValue = (key, ...values) => {
            if (values.length > 0) {
                const rawValues = values
                    .filter((x) => x !== undefined)
                    .map((x) => `${x}`);
                if (rawValues.length > 0) {
                    this.writeStringValue(key, rawValues.reduce((x, y) => `${x}, ${y}`));
                }
            }
        };
        this.getSerializedContent = () => {
            console.log("this.writer");
            console.log(this.writer);
            console.log("this.writer");
            return this.convertStringToArrayBuffer(this.writer.join(``));
        };
        this.convertStringToArrayBuffer = (str) => {
            const arrayBuffer = new ArrayBuffer(str.length);
            const uint8Array = new Uint8Array(arrayBuffer);
            for (let i = 0; i < str.length; i++) {
                uint8Array[i] = str.charCodeAt(i);
            }
            return arrayBuffer;
        };
        this.writeAdditionalData = (value) => {
            if (!value)
                return;
            for (const key in value) {
                this.writeAnyValue(key, value[key]);
            }
        };
        this.writeNonParsableObjectValue = (key, value) => {
            if (key) {
                this.writePropertyName(key);
            }
            this.writer.push(JSON.stringify(value), JsonSerializationWriter.propertySeparator);
        };
        this.writeAnyValue = (key, value) => {
            if (value) {
                const valueType = typeof value;
                if (!value) {
                    this.writeNullValue(key);
                }
                else if (valueType === "boolean") {
                    this.writeBooleanValue(key, value);
                }
                else if (valueType === "string") {
                    this.writeStringValue(key, value);
                }
                else if (value instanceof Date) {
                    this.writeDateValue(key, value);
                }
                else if (value instanceof DateOnly) {
                    this.writeDateOnlyValue(key, value);
                }
                else if (value instanceof TimeOnly) {
                    this.writeTimeOnlyValue(key, value);
                }
                else if (value instanceof Duration) {
                    this.writeDurationValue(key, value);
                }
                else if (valueType === "number") {
                    this.writeNumberValue(key, value);
                }
                else if (Array.isArray(value)) {
                    this.writeCollectionOfPrimitiveValues(key, value);
                }
                else if (valueType === "object") {
                    this.writeNonParsableObjectValue(key, value);
                }
                else {
                    throw new Error(`encountered unknown value type during serialization ${valueType}`);
                }
            }
            else {
                if (key)
                    this.writePropertyName(key);
                this.writer.push("null");
            }
        };
    }
    writeObjectValueFromMethod(key, value, serializerMethod) {
        this.onBeforeObjectSerialization &&
            this.onBeforeObjectSerialization(value);
        this.writer.push(`{`);
        this.onStartObjectSerialization &&
            this.onStartObjectSerialization(value, this);
        serializerMethod(this, value);
        this.onAfterObjectSerialization &&
            this.onAfterObjectSerialization(value);
        if (this.writer.length > 0 &&
            this.writer[this.writer.length - 1] ===
                JsonSerializationWriter.propertySeparator) {
            //removing the last separator
            this.writer.pop();
        }
        this.writer.push(`}`);
        key && this.writer.push(JsonSerializationWriter.propertySeparator);
    }
}
JsonSerializationWriter.propertySeparator = `,`;

class JsonParseNodeFactory {
    getValidContentType() {
        return "application/json";
    }
    getRootParseNode(contentType, content) {
        if (!content) {
            throw new Error("content cannot be undefined of empty");
        }
        else if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        else if (this.getValidContentType() !== contentType) {
            throw new Error(`expected a ${this.getValidContentType()} content type`);
        }
        return new JsonParseNode(this.convertArrayBufferToJson(content));
    }
    convertArrayBufferToJson(content) {
        const decoder = new TextDecoder();
        const contentAsStr = decoder.decode(content);
        return JSON.parse(contentAsStr);
    }
}

class JsonSerializationWriterFactory {
    getValidContentType() {
        return "application/json";
    }
    getSerializationWriter(contentType) {
        if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        else if (this.getValidContentType() !== contentType) {
            throw new Error(`expected a ${this.getValidContentType()} content type`);
        }
        return new JsonSerializationWriter();
    }
}

/* eslint-disable @typescript-eslint/no-unused-vars */
class TextParseNode {
    /**
     *
     */
    constructor(text) {
        this.text = text;
        this.getStringValue = () => this.text;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.getChildNode = (identifier) => {
            throw new Error(TextParseNode.noStructuredDataMessage);
        };
        this.getBooleanValue = () => (this.text && this.text.toLowerCase() === "true") || this.text === "1";
        this.getNumberValue = () => Number(this.text);
        this.getGuidValue = () => this.text;
        this.getDateValue = () => new Date(Date.parse(this.text));
        this.getDateOnlyValue = () => DateOnly.parse(this.getStringValue());
        this.getTimeOnlyValue = () => TimeOnly.parse(this.getStringValue());
        this.getDurationValue = () => Duration.parse(this.getStringValue());
        this.getCollectionOfPrimitiveValues = () => {
            throw new Error(TextParseNode.noStructuredDataMessage);
        };
        this.getCollectionOfObjectValues = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        type) => {
            throw new Error(TextParseNode.noStructuredDataMessage);
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.getObjectValue = (type) => {
            throw new Error(TextParseNode.noStructuredDataMessage);
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.getEnumValues = (type) => {
            throw new Error(TextParseNode.noStructuredDataMessage);
        };
        this.getEnumValue = (type) => {
            return type[toFirstCharacterUpper(this.text)];
        };
        this.text =
            this.text &&
                this.text.length > 1 &&
                this.text.charAt(0) === '"' &&
                this.text.charAt(this.text.length - 1) === '"'
                ? this.text.substring(1, this.text.length - 2)
                : this.text;
    }
    getCollectionOfObjectValuesFromMethod(method) {
        throw new Error(TextParseNode.noStructuredDataMessage);
    }
    getObject(deserializerFunction) {
        throw new Error(TextParseNode.noStructuredDataMessage);
    }
}
TextParseNode.noStructuredDataMessage = "text does not support structured data";

class TextSerializationWriter {
    constructor() {
        this.writer = [];
        this.writeStringValue = (key, value) => {
            if (key || key !== "") {
                throw new Error(TextSerializationWriter.noStructuredDataMessage);
            }
            if (value) {
                if (this.writer.length > 0) {
                    throw new Error("a value was already written for this serialization writer, text content only supports a single value");
                }
                else {
                    this.writer.push(value);
                }
            }
        };
        this.writeBooleanValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `${value}`);
            }
        };
        this.writeNumberValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `${value}`);
            }
        };
        this.writeGuidValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value}"`);
            }
        };
        this.writeDateValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toISOString()}"`);
            }
        };
        this.writeDateOnlyValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeTimeOnlyValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeDurationValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeNullValue = (key) => {
            this.writeStringValue(key, `null`);
        };
        this.writeCollectionOfPrimitiveValues = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        values) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeCollectionOfObjectValues = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        values) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeObjectValue = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        value) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeEnumValue = (key, ...values) => {
            if (values.length > 0) {
                const rawValues = values
                    .filter((x) => x !== undefined)
                    .map((x) => `${x}`);
                if (rawValues.length > 0) {
                    this.writeStringValue(key, rawValues.reduce((x, y) => `${x}, ${y}`));
                }
            }
        };
        this.getSerializedContent = () => {
            return this.convertStringToArrayBuffer(this.writer.join(``));
        };
        this.convertStringToArrayBuffer = (str) => {
            const arrayBuffer = new ArrayBuffer(str.length);
            const uint8Array = new Uint8Array(arrayBuffer);
            for (let i = 0; i < str.length; i++) {
                uint8Array[i] = str.charCodeAt(i);
            }
            return arrayBuffer;
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.writeAdditionalData = (value) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    writeObjectValueFromMethod(key, value, serializerMethod) {
        throw new Error("Method not implemented.");
    }
    writeCollectionOfObjectValuesFromMethod(key, values, serializerMethod) {
        throw new Error("Method not implemented.");
    }
}
TextSerializationWriter.noStructuredDataMessage = "text does not support structured data";

class TextParseNodeFactory {
    getValidContentType() {
        return "text/plain";
    }
    getRootParseNode(contentType, content) {
        if (!content) {
            throw new Error("content cannot be undefined of empty");
        }
        else if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        else if (this.getValidContentType() !== contentType) {
            throw new Error(`expected a ${this.getValidContentType()} content type`);
        }
        return new TextParseNode(this.convertArrayBufferToText(content));
    }
    convertArrayBufferToText(arrayBuffer) {
        const decoder = new TextDecoder();
        return decoder.decode(arrayBuffer);
    }
}

class TextSerializationWriterFactory {
    getValidContentType() {
        return "text/plain";
    }
    getSerializationWriter(contentType) {
        if (!contentType) {
            throw new Error("content type cannot be undefined or empty");
        }
        else if (this.getValidContentType() !== contentType) {
            throw new Error(`expected a ${this.getValidContentType()} content type`);
        }
        return new TextSerializationWriter();
    }
}

/** The main entry point of the SDK, exposes the configuration and the fluent API. */
class ApiClient {
    /**
     * Instantiates a new ApiClient and sets the default values.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(requestAdapter) {
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.pathParameters = {};
        this.urlTemplate = "{+baseurl}";
        this.requestAdapter = requestAdapter;
        registerDefaultSerializer(JsonSerializationWriterFactory);
        registerDefaultSerializer(TextSerializationWriterFactory);
        registerDefaultDeserializer(JsonParseNodeFactory);
        registerDefaultDeserializer(TextParseNodeFactory);
        if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === "") {
            requestAdapter.baseUrl = "https://graph.microsoft.com/beta";
        }
    }
    /** The users property */
    get users() {
        return new UsersRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item collection
     * @param id Unique identifier of the item
     * @returns a UserItemRequestBuilder
     */
    usersById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["user%2Did"] = id;
        return new UserItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
}

var src = {};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}
var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

var tslib_es6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __extends: __extends,
    get __assign () { return __assign; },
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

var fetchRequestAdapter$1 = {};

var require$$1 = /*@__PURE__*/getAugmentedNamespace(src$1);

var httpClient = {};

var customFetchHandler = {};

var hasRequiredCustomFetchHandler;

function requireCustomFetchHandler () {
	if (hasRequiredCustomFetchHandler) return customFetchHandler;
	hasRequiredCustomFetchHandler = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(customFetchHandler, "__esModule", { value: true });
	customFetchHandler.CustomFetchHandler = void 0;
	const tslib_1 = require$$0;
	/**
	 * @class
	 * @implements Middleware
	 * Class for FetchHandler
	 */
	class CustomFetchHandler {
	    constructor(customFetch) {
	        this.customFetch = customFetch;
	    }
	    /**
	     * @public
	     * @async
	     * To execute the current middleware
	     * @param {Context} context - The request context object
	     * @returns A promise that resolves to nothing
	     */
	    execute(url, requestInit) {
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const response = yield this.customFetch(url, requestInit);
	            console.log(response);
	            return response;
	        });
	    }
	}
	customFetchHandler.CustomFetchHandler = CustomFetchHandler;
	return customFetchHandler;
}

var middlewareFactory = {};

var browser = {exports: {}};

var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser.exports;
	hasRequiredBrowser = 1;
	(function (module, exports) {

		// ref: https://github.com/tc39/proposal-global
		var getGlobal = function () {
			// the only reliable means to get the global object is
			// `Function('return this')()`
			// However, this causes CSP violations in Chrome apps.
			if (typeof self !== 'undefined') { return self; }
			if (typeof window !== 'undefined') { return window; }
			if (typeof global !== 'undefined') { return global; }
			throw new Error('unable to locate global object');
		};

		var global = getGlobal();

		module.exports = exports = global.fetch;

		// Needed for TypeScript and Webpack.
		if (global.fetch) {
			exports.default = global.fetch.bind(global);
		}

		exports.Headers = global.Headers;
		exports.Request = global.Request;
		exports.Response = global.Response;
} (browser, browser.exports));
	return browser.exports;
}

var parametersNameDecodingHandler = {};

var parametersNameDecodingOptions = {};

var hasRequiredParametersNameDecodingOptions;

function requireParametersNameDecodingOptions () {
	if (hasRequiredParametersNameDecodingOptions) return parametersNameDecodingOptions;
	hasRequiredParametersNameDecodingOptions = 1;
	(function (exports) {
		/**
		 * -------------------------------------------------------------------------------------------
		 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
		 * See License in the project root for license information.
		 * -------------------------------------------------------------------------------------------
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ParametersNameDecodingHandlerOptions = exports.ParametersNameDecodingHandlerOptionsKey = void 0;
		exports.ParametersNameDecodingHandlerOptionsKey = "RetryHandlerOptionKey";
		/** The ParametersNameDecodingOptions request class */
		class ParametersNameDecodingHandlerOptions {
		    /**
		     * @public
		     * @constructor
		     * To create an instance of ParametersNameDecodingHandlerOptions
		     * @param {boolean} [enable = true] - Whether to decode the specified characters in the request query parameters names
		     * @param {string[]} [charactersToDecode = [".", "-", "~", "$"]] - The characters to decode
		     */
		    constructor(enable = true, charactersToDecode = [".", "-", "~", "$"]) {
		        this.enable = enable;
		        this.charactersToDecode = charactersToDecode;
		    }
		    getKey() {
		        return exports.ParametersNameDecodingHandlerOptionsKey;
		    }
		}
		exports.ParametersNameDecodingHandlerOptions = ParametersNameDecodingHandlerOptions;
} (parametersNameDecodingOptions));
	return parametersNameDecodingOptions;
}

var hasRequiredParametersNameDecodingHandler;

function requireParametersNameDecodingHandler () {
	if (hasRequiredParametersNameDecodingHandler) return parametersNameDecodingHandler;
	hasRequiredParametersNameDecodingHandler = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(parametersNameDecodingHandler, "__esModule", { value: true });
	parametersNameDecodingHandler.ParametersNameDecodingHandler = void 0;
	const parametersNameDecodingOptions_1 = requireParametersNameDecodingOptions();
	/**
	 * @module ParametersNameDecodingHandler
	 */
	class ParametersNameDecodingHandler {
	    /**
	     * @public
	     * @constructor
	     * To create an instance of ParametersNameDecodingHandler
	     * @param {ParametersNameDecodingHandlerOptions} [options = new ParametersNameDecodingHandlerOptions()] - The parameters name decoding handler options value
	     */
	    constructor(options = new parametersNameDecodingOptions_1.ParametersNameDecodingHandlerOptions()) {
	        this.options = options;
	        if (!options) {
	            throw new Error("The options parameter is required.");
	        }
	    }
	    /**
	     * @public
	     * @async
	     * To execute the current middleware
	     * @param {string} url - The url to be fetched
	     * @param {FetchRequestInit} requestInit - The request init object
	     * @param {Record<string, RequestOption>} [requestOptions] - The request options
	     * @returns A Promise that resolves to nothing
	     */
	    execute(url, requestInit, requestOptions) {
	        var _a, _b;
	        let currentOptions = this.options;
	        if (requestOptions && requestOptions[parametersNameDecodingOptions_1.ParametersNameDecodingHandlerOptionsKey]) {
	            currentOptions = requestOptions[parametersNameDecodingOptions_1.ParametersNameDecodingHandlerOptionsKey];
	        }
	        let updatedUrl = url;
	        if (currentOptions && currentOptions.enable && url.indexOf("%") > -1 && currentOptions.charactersToDecode && currentOptions.charactersToDecode.length > 0) {
	            currentOptions.charactersToDecode.forEach((character) => {
	                updatedUrl = updatedUrl.replace(new RegExp(`%${character.charCodeAt(0).toString(16)}`, "gi"), character);
	            });
	        }
	        return (_b = (_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(updatedUrl, requestInit, requestOptions)) !== null && _b !== void 0 ? _b : Promise.reject(new Error("The next middleware is not set."));
	    }
	}
	parametersNameDecodingHandler.ParametersNameDecodingHandler = ParametersNameDecodingHandler;
	return parametersNameDecodingHandler;
}

var redirectHandler = {};

var redirectHandlerOptions = {};

var hasRequiredRedirectHandlerOptions;

function requireRedirectHandlerOptions () {
	if (hasRequiredRedirectHandlerOptions) return redirectHandlerOptions;
	hasRequiredRedirectHandlerOptions = 1;
	(function (exports) {
		/**
		 * -------------------------------------------------------------------------------------------
		 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
		 * See License in the project root for license information.
		 * -------------------------------------------------------------------------------------------
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.RedirectHandlerOptions = exports.RedirectHandlerOptionKey = void 0;
		exports.RedirectHandlerOptionKey = "RedirectHandlerOption";
		/**
		 * @class
		 * @implements MiddlewareOptions
		 * A class representing RedirectHandlerOptions
		 */
		class RedirectHandlerOptions {
		    /**
		     * @public
		     * @constructor
		     * To create an instance of RedirectHandlerOptions
		     * @param {number} [maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS] - The max redirects value
		     * @param {ShouldRedirect} [shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY] - The should redirect callback
		     * @returns An instance of RedirectHandlerOptions
		     */
		    constructor(maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS, shouldRedirect = RedirectHandlerOptions.defaultShouldRetry) {
		        this.maxRedirects = maxRedirects;
		        this.shouldRedirect = shouldRedirect;
		        if (maxRedirects > RedirectHandlerOptions.MAX_MAX_REDIRECTS) {
		            const error = new Error(`MaxRedirects should not be more than ${RedirectHandlerOptions.MAX_MAX_REDIRECTS}`);
		            error.name = "MaxLimitExceeded";
		            throw error;
		        }
		        if (maxRedirects < 0) {
		            const error = new Error(`MaxRedirects should not be negative`);
		            error.name = "MinExpectationNotMet";
		            throw error;
		        }
		        this.maxRedirects = maxRedirects;
		        this.shouldRedirect = shouldRedirect;
		    }
		    getKey() {
		        return exports.RedirectHandlerOptionKey;
		    }
		}
		exports.RedirectHandlerOptions = RedirectHandlerOptions;
		/**
		 * @private
		 * @static
		 * A member holding default max redirects value
		 */
		RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS = 5;
		/**
		 * @private
		 * @static
		 * A member holding maximum max redirects value
		 */
		RedirectHandlerOptions.MAX_MAX_REDIRECTS = 20;
		/**
		 * @private
		 * A member holding default shouldRedirect callback
		 */
		RedirectHandlerOptions.defaultShouldRetry = () => true;
} (redirectHandlerOptions));
	return redirectHandlerOptions;
}

var hasRequiredRedirectHandler;

function requireRedirectHandler () {
	if (hasRequiredRedirectHandler) return redirectHandler;
	hasRequiredRedirectHandler = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(redirectHandler, "__esModule", { value: true });
	redirectHandler.RedirectHandler = void 0;
	const tslib_1 = require$$0;
	/**
	 * @module RedirectHandler
	 */
	const kiota_abstractions_1 = require$$1;
	const redirectHandlerOptions_1 = requireRedirectHandlerOptions();
	/**
	 * @class
	 * Class
	 * @implements Middleware
	 * Class representing RedirectHandler
	 */
	class RedirectHandler {
	    /**
	     *
	     * @public
	     * @constructor
	     * To create an instance of RedirectHandler
	     * @param {RedirectHandlerOptions} [options = new RedirectHandlerOptions()] - The redirect handler options instance
	     * @returns An instance of RedirectHandler
	     */
	    constructor(options = new redirectHandlerOptions_1.RedirectHandlerOptions()) {
	        this.options = options;
	        if (!options) {
	            throw new Error("The options parameter is required.");
	        }
	    }
	    /**
	     * @private
	     * To check whether the response has the redirect status code or not
	     * @param {Response} response - The response object
	     * @returns A boolean representing whether the response contains the redirect status code or not
	     */
	    isRedirect(response) {
	        return RedirectHandler.REDIRECT_STATUS_CODES.has(response.status);
	    }
	    /**
	     * @private
	     * To check whether the response has location header or not
	     * @param {Response} response - The response object
	     * @returns A boolean representing the whether the response has location header or not
	     */
	    hasLocationHeader(response) {
	        return response.headers.has(RedirectHandler.LOCATION_HEADER);
	    }
	    /**
	     * @private
	     * To get the redirect url from location header in response object
	     * @param {Response} response - The response object
	     * @returns A redirect url from location header
	     */
	    getLocationHeader(response) {
	        return response.headers.get(RedirectHandler.LOCATION_HEADER);
	    }
	    /**
	     * @private
	     * To check whether the given url is a relative url or not
	     * @param {string} url - The url string value
	     * @returns A boolean representing whether the given url is a relative url or not
	     */
	    isRelativeURL(url) {
	        return url.indexOf("://") === -1;
	    }
	    /**
	     * @private
	     * To check whether the authorization header in the request should be dropped for consequent redirected requests
	     * @param {string} requestUrl - The request url value
	     * @param {string} redirectUrl - The redirect url value
	     * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests
	     */
	    shouldDropAuthorizationHeader(requestUrl, redirectUrl) {
	        const schemeHostRegex = /^[A-Za-z].+?:\/\/.+?(?=\/|$)/;
	        const requestMatches = schemeHostRegex.exec(requestUrl);
	        let requestAuthority;
	        let redirectAuthority;
	        if (requestMatches !== null) {
	            requestAuthority = requestMatches[0];
	        }
	        const redirectMatches = schemeHostRegex.exec(redirectUrl);
	        if (redirectMatches !== null) {
	            redirectAuthority = redirectMatches[0];
	        }
	        return typeof requestAuthority !== "undefined" && typeof redirectAuthority !== "undefined" && requestAuthority !== redirectAuthority;
	    }
	    /**
	     * @private
	     * @async
	     * To execute the next middleware and to handle in case of redirect response returned by the server
	     * @param {Context} context - The context object
	     * @param {number} redirectCount - The redirect count value
	     * @param {Record<string, RequestOption>} [requestOptions = {}] - The request options
	     * @param {RedirectHandlerOptions} currentOptions - The redirect handler options instance
	     * @returns A promise that resolves to nothing
	     */
	    executeWithRedirect(url, fetchRequestInit, redirectCount, currentOptions, requestOptions) {
	        var _a;
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const response = yield ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, fetchRequestInit, requestOptions));
	            if (!response) {
	                throw new Error("Response is undefined");
	            }
	            if (redirectCount < currentOptions.maxRedirects && this.isRedirect(response) && this.hasLocationHeader(response) && currentOptions.shouldRedirect(response)) {
	                ++redirectCount;
	                if (response.status === RedirectHandler.STATUS_CODE_SEE_OTHER) {
	                    fetchRequestInit["method"] = kiota_abstractions_1.HttpMethod.GET;
	                    delete fetchRequestInit.body;
	                }
	                else {
	                    const redirectUrl = this.getLocationHeader(response);
	                    if (redirectUrl) {
	                        if (fetchRequestInit.headers && !this.isRelativeURL(redirectUrl) && this.shouldDropAuthorizationHeader(url, redirectUrl)) {
	                            delete fetchRequestInit.headers[RedirectHandler.AUTHORIZATION_HEADER];
	                        }
	                        url = redirectUrl;
	                    }
	                }
	                return yield this.executeWithRedirect(url, fetchRequestInit, redirectCount, currentOptions, requestOptions);
	            }
	            else {
	                return response;
	            }
	        });
	    }
	    /**
	     * @public
	     * @async
	     * To execute the current middleware
	     * @param {Context} context - The context object of the request
	     * @returns A Promise that resolves to nothing
	     */
	    execute(url, requestInit, requestOptions) {
	        const redirectCount = 0;
	        let currentOptions = this.options;
	        if (requestOptions && requestOptions[redirectHandlerOptions_1.RedirectHandlerOptionKey]) {
	            currentOptions = requestOptions[redirectHandlerOptions_1.RedirectHandlerOptionKey];
	        }
	        requestInit.redirect = RedirectHandler.MANUAL_REDIRECT;
	        return this.executeWithRedirect(url, requestInit, redirectCount, currentOptions, requestOptions);
	    }
	}
	redirectHandler.RedirectHandler = RedirectHandler;
	/**
	 * @private
	 * @static
	 * A member holding the array of redirect status codes
	 */
	RedirectHandler.REDIRECT_STATUS_CODES = new Set([
	    301,
	    302,
	    303,
	    307,
	    308, // Moved Permanently
	]);
	/**
	 * @private
	 * @static
	 * A member holding SeeOther status code
	 */
	RedirectHandler.STATUS_CODE_SEE_OTHER = 303;
	/**
	 * @private
	 * @static
	 * A member holding the name of the location header
	 */
	RedirectHandler.LOCATION_HEADER = "Location";
	/**
	 * @private
	 * @static
	 * A member representing the authorization header name
	 */
	RedirectHandler.AUTHORIZATION_HEADER = "Authorization";
	/**
	 * @private
	 * @static
	 * A member holding the manual redirect value
	 */
	RedirectHandler.MANUAL_REDIRECT = "manual";
	return redirectHandler;
}

var retryHandler = {};

var headersUtil = {};

var hasRequiredHeadersUtil;

function requireHeadersUtil () {
	if (hasRequiredHeadersUtil) return headersUtil;
	hasRequiredHeadersUtil = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(headersUtil, "__esModule", { value: true });
	headersUtil.appendRequestHeader = headersUtil.setRequestHeader = headersUtil.getRequestHeader = void 0;
	/**
	 * @module MiddlewareUtil
	 */
	/**
	 * @constant
	 * To get the request header from the request
	 * @param {RequestInfo} request - The request object or the url string
	 * @param {FetchOptions|undefined} options - The request options object
	 * @param {string} key - The header key string
	 * @returns A header value for the given key from the request
	 */
	const getRequestHeader = (options, key) => {
	    if (options && options.headers) {
	        return options.headers[key];
	    }
	    return undefined;
	};
	headersUtil.getRequestHeader = getRequestHeader;
	/**
	 * @constant
	 * To set the header value to the given request
	 * @param {RequestInfo} request - The request object or the url string
	 * @param {FetchOptions|undefined} options - The request options object
	 * @param {string} key - The header key string
	 * @param {string } value - The header value string
	 * @returns Nothing
	 */
	const setRequestHeader = (options, key, value) => {
	    if (options) {
	        if (!options.headers) {
	            options.headers = {};
	        }
	        options.headers[key] = value;
	    }
	};
	headersUtil.setRequestHeader = setRequestHeader;
	/**
	 * @constant
	 * To append the header value to the given request
	 * @param {RequestInfo} request - The request object or the url string
	 * @param {FetchOptions|undefined} options - The request options object
	 * @param {string} key - The header key string
	 * @param {string } value - The header value string
	 * @returns Nothing
	 */
	const appendRequestHeader = (options, key, value) => {
	    if (options) {
	        if (!options.headers) {
	            options.headers = {};
	        }
	        if (!options.headers[key]) {
	            options.headers[key] = value;
	        }
	        else {
	            options.headers[key] += `, ${value}`;
	        }
	    }
	};
	headersUtil.appendRequestHeader = appendRequestHeader;
	return headersUtil;
}

var retryHandlerOptions = {};

var hasRequiredRetryHandlerOptions;

function requireRetryHandlerOptions () {
	if (hasRequiredRetryHandlerOptions) return retryHandlerOptions;
	hasRequiredRetryHandlerOptions = 1;
	(function (exports) {
		/**
		 * -------------------------------------------------------------------------------------------
		 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
		 * See License in the project root for license information.
		 * -------------------------------------------------------------------------------------------
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.RetryHandlerOptions = exports.RetryHandlerOptionKey = void 0;
		exports.RetryHandlerOptionKey = "RetryHandlerOptionKey";
		/**
		 * @class
		 * @implements Middleware
		 * Options
		 * Class for RetryHandlerOptions
		 */
		class RetryHandlerOptions {
		    /**
		     * @public
		     * @constructor
		     * To create an instance of RetryHandlerOptions
		     * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds
		     * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value
		     * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function
		     * @returns An instance of RetryHandlerOptions
		     */
		    constructor(delay = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.defaultShouldRetry) {
		        this.delay = delay;
		        this.maxRetries = maxRetries;
		        this.shouldRetry = shouldRetry;
		        if (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {
		            const error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);
		            error.name = "MaxLimitExceeded";
		            throw error;
		        }
		        else if (delay > RetryHandlerOptions.MAX_DELAY) {
		            const error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);
		            error.name = "MaxLimitExceeded";
		            throw error;
		        }
		        else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {
		            const error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);
		            error.name = "MaxLimitExceeded";
		            throw error;
		        }
		        else if (delay < 0 && maxRetries < 0) {
		            const error = new Error(`Delay and MaxRetries should not be negative`);
		            error.name = "MinExpectationNotMet";
		            throw error;
		        }
		        else if (delay < 0) {
		            const error = new Error(`Delay should not be negative`);
		            error.name = "MinExpectationNotMet";
		            throw error;
		        }
		        else if (maxRetries < 0) {
		            const error = new Error(`MaxRetries should not be negative`);
		            error.name = "MinExpectationNotMet";
		            throw error;
		        }
		        this.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);
		        this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);
		        this.shouldRetry = shouldRetry;
		    }
		    /**
		     * @public
		     * To get the maximum delay
		     * @returns A maximum delay
		     */
		    getMaxDelay() {
		        return RetryHandlerOptions.MAX_DELAY;
		    }
		    getKey() {
		        return exports.RetryHandlerOptionKey;
		    }
		}
		exports.RetryHandlerOptions = RetryHandlerOptions;
		/**
		 * @private
		 * @static
		 * A member holding default delay value in seconds
		 */
		RetryHandlerOptions.DEFAULT_DELAY = 3;
		/**
		 * @private
		 * @static
		 * A member holding default maxRetries value
		 */
		RetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;
		/**
		 * @private
		 * @static
		 * A member holding maximum delay value in seconds
		 */
		RetryHandlerOptions.MAX_DELAY = 180;
		/**
		 * @private
		 * @static
		 * A member holding maximum maxRetries value
		 */
		RetryHandlerOptions.MAX_MAX_RETRIES = 10;
		/**
		 * @private
		 * A member holding default shouldRetry callback
		 */
		RetryHandlerOptions.defaultShouldRetry = () => true;
} (retryHandlerOptions));
	return retryHandlerOptions;
}

var hasRequiredRetryHandler;

function requireRetryHandler () {
	if (hasRequiredRetryHandler) return retryHandler;
	hasRequiredRetryHandler = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(retryHandler, "__esModule", { value: true });
	retryHandler.RetryHandler = void 0;
	const tslib_1 = require$$0;
	/**
	 * @module RetryHandler
	 */
	const kiota_abstractions_1 = require$$1;
	const headersUtil_1 = requireHeadersUtil();
	const retryHandlerOptions_1 = requireRetryHandlerOptions();
	/**
	 * @class
	 * @implements Middleware
	 * Class for RetryHandler
	 */
	class RetryHandler {
	    /**
	     * @public
	     * @constructor
	     * To create an instance of RetryHandler
	     * @param {RetryHandlerOptions} [options = new RetryHandlerOptions()] - The retry handler options value
	     * @returns An instance of RetryHandler
	     */
	    constructor(options = new retryHandlerOptions_1.RetryHandlerOptions()) {
	        this.options = options;
	        if (!options) {
	            throw new Error("The options parameter is required.");
	        }
	    }
	    /**
	     *
	     * @private
	     * To check whether the response has the retry status code
	     * @param {Response} response - The response object
	     * @returns Whether the response has retry status code or not
	     */
	    isRetry(response) {
	        return RetryHandler.RETRY_STATUS_CODES.has(response.status);
	    }
	    /**
	     * @private
	     * To check whether the payload is buffered or not
	     * @param {RequestInit} options - The options of a request
	     * @returns Whether the payload is buffered or not
	     */
	    isBuffered(options) {
	        var _a;
	        const method = options.method;
	        const isPutPatchOrPost = method === kiota_abstractions_1.HttpMethod.PUT || method === kiota_abstractions_1.HttpMethod.PATCH || method === kiota_abstractions_1.HttpMethod.POST;
	        if (isPutPatchOrPost) {
	            const isStream = ((_a = (0, headersUtil_1.getRequestHeader)(options, "content-type")) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "application/octet-stream";
	            if (isStream) {
	                return false;
	            }
	        }
	        return true;
	    }
	    /**
	     * @private
	     * To get the delay for a retry
	     * @param {Response} response - The response object
	     * @param {number} retryAttempts - The current attempt count
	     * @param {number} delay - The delay value in seconds
	     * @returns A delay for a retry
	     */
	    getDelay(response, retryAttempts, delay) {
	        const getRandomness = () => Number(Math.random().toFixed(3));
	        const retryAfter = response.headers !== undefined ? response.headers.get(RetryHandler.RETRY_AFTER_HEADER) : null;
	        let newDelay;
	        if (retryAfter !== null) {
	            // Retry-After: <http-date>
	            if (Number.isNaN(Number(retryAfter))) {
	                newDelay = Math.round((new Date(retryAfter).getTime() - Date.now()) / 1000);
	            }
	            else {
	                // Retry-After: <delay-seconds>
	                newDelay = Number(retryAfter);
	            }
	        }
	        else {
	            // Adding randomness to avoid retrying at a same
	            newDelay = retryAttempts >= 2 ? this.getExponentialBackOffTime(retryAttempts) + delay + getRandomness() : delay + getRandomness();
	        }
	        return Math.min(newDelay, this.options.getMaxDelay() + getRandomness());
	    }
	    /**
	     * @private
	     * To get an exponential back off value
	     * @param {number} attempts - The current attempt count
	     * @returns An exponential back off value
	     */
	    getExponentialBackOffTime(attempts) {
	        return Math.round((1 / 2) * (Math.pow(2, attempts) - 1));
	    }
	    /**
	     * @private
	     * @async
	     * To add delay for the execution
	     * @param {number} delaySeconds - The delay value in seconds
	     * @returns Nothing
	     */
	    sleep(delaySeconds) {
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const delayMilliseconds = delaySeconds * 1000;
	            return new Promise((resolve) => setTimeout(resolve, delayMilliseconds)); // browser or node
	        });
	    }
	    /**
	     * @private
	     * @async
	     * To execute the middleware with retries
	     * @param {Context} context - The context object
	     * @param {number} retryAttempts - The current attempt count
	     * @param {Record<string, RequestOption>} [requestOptions = {}] - The request options
	     * @param {RetryHandlerOptions} currentOptions - The retry middleware options instance
	     * @returns A Promise that resolves to nothing
	     */
	    executeWithRetry(url, fetchRequestInit, retryAttempts, currentOptions, requestOptions) {
	        var _a;
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const response = yield ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, fetchRequestInit, requestOptions));
	            if (!response) {
	                throw new Error("Response is undefined");
	            }
	            if (retryAttempts < currentOptions.maxRetries && this.isRetry(response) && this.isBuffered(fetchRequestInit) && currentOptions.shouldRetry(currentOptions.delay, retryAttempts, url, fetchRequestInit, response)) {
	                ++retryAttempts;
	                (0, headersUtil_1.setRequestHeader)(fetchRequestInit, RetryHandler.RETRY_ATTEMPT_HEADER, retryAttempts.toString());
	                if (response) {
	                    const delay = this.getDelay(response, retryAttempts, currentOptions.delay);
	                    yield this.sleep(delay);
	                }
	                return yield this.executeWithRetry(url, fetchRequestInit, retryAttempts, currentOptions, requestOptions);
	            }
	            else {
	                return response;
	            }
	        });
	    }
	    /**
	     * @public
	     * @async
	     * To execute the current middleware
	     * @param {Context} context - The context object of the request
	     * @returns A Promise that resolves to nothing
	     */
	    execute(url, requestInit, requestOptions) {
	        const retryAttempts = 0;
	        let currentOptions = this.options;
	        if (requestOptions && requestOptions[retryHandlerOptions_1.RetryHandlerOptionKey]) {
	            currentOptions = requestOptions[retryHandlerOptions_1.RetryHandlerOptionKey];
	        }
	        return this.executeWithRetry(url, requestInit, retryAttempts, currentOptions, requestOptions);
	    }
	}
	retryHandler.RetryHandler = RetryHandler;
	/**
	 * @private
	 * @static
	 * A list of status codes that needs to be retried
	 */
	RetryHandler.RETRY_STATUS_CODES = new Set([
	    429,
	    503,
	    504, // Gateway timeout
	]);
	/**
	 * @private
	 * @static
	 * A member holding the name of retry attempt header
	 */
	RetryHandler.RETRY_ATTEMPT_HEADER = "Retry-Attempt";
	/**
	 * @private
	 * @static
	 * A member holding the name of retry after header
	 */
	RetryHandler.RETRY_AFTER_HEADER = "Retry-After";
	return retryHandler;
}

var hasRequiredMiddlewareFactory;

function requireMiddlewareFactory () {
	if (hasRequiredMiddlewareFactory) return middlewareFactory;
	hasRequiredMiddlewareFactory = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(middlewareFactory, "__esModule", { value: true });
	middlewareFactory.MiddlewareFactory = void 0;
	/**
	 * @module MiddlewareFactory
	 */
	const node_fetch_1 = requireBrowser();
	const customFetchHandler_1 = requireCustomFetchHandler();
	const parametersNameDecodingHandler_1 = requireParametersNameDecodingHandler();
	const redirectHandler_1 = requireRedirectHandler();
	const retryHandler_1 = requireRetryHandler();
	/**
	 * @class
	 * Class containing function(s) related to the middleware pipelines.
	 */
	class MiddlewareFactory {
	    /**
	     * @public
	     * @static
	     * Returns the default middleware chain an array with the  middleware handlers
	     * @param {AuthenticationProvider} authProvider - The authentication provider instance
	     * @returns an array of the middleware handlers of the default middleware chain
	     */
	    static getDefaultMiddlewareChain(customFetch = node_fetch_1.default) {
	        const middlewareArray = [new retryHandler_1.RetryHandler(), new redirectHandler_1.RedirectHandler(), new parametersNameDecodingHandler_1.ParametersNameDecodingHandler(), new customFetchHandler_1.CustomFetchHandler(customFetch)];
	        return middlewareArray;
	    }
	}
	middlewareFactory.MiddlewareFactory = MiddlewareFactory;
	return middlewareFactory;
}

var hasRequiredHttpClient;

function requireHttpClient () {
	if (hasRequiredHttpClient) return httpClient;
	hasRequiredHttpClient = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(httpClient, "__esModule", { value: true });
	httpClient.HttpClient = void 0;
	const tslib_1 = require$$0;
	const customFetchHandler_1 = requireCustomFetchHandler();
	const middlewareFactory_1 = requireMiddlewareFactory();
	class HttpClient {
	    /**
	     * @public
	     * @constructor
	     * Creates an instance of a HttpClient which contains the middlewares and fetch implementation for request execution.
	     * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers
	     * If middlewares param is undefined, the httpClient instance will use the default array of middlewares.
	     * Set middlewares to `null` if you do not wish to use middlewares.
	     * If custom fetch is undefined, the httpClient instance uses the `DefaultFetchHandler`
	     * @param {(request: string, init?: RequestInit) => Promise < Response >} custom fetch function - a Fetch API implementation
	     *
	     */
	    constructor(customFetch, ...middlewares) {
	        this.customFetch = customFetch;
	        // Use default middleware chain if middlewares and custom fetch function are  undefined
	        if (!middlewares.length || !middlewares[0]) {
	            this.setMiddleware(...middlewareFactory_1.MiddlewareFactory.getDefaultMiddlewareChain(customFetch));
	        }
	        else {
	            if (this.customFetch) {
	                this.setMiddleware(...middlewares, new customFetchHandler_1.CustomFetchHandler(customFetch));
	            }
	            else {
	                this.setMiddleware(...middlewares);
	            }
	        }
	    }
	    /**
	     * @private
	     * Processes the middleware parameter passed to set this.middleware property
	     * The calling function should validate if middleware is not undefined or not empty.
	     * @param {...Middleware} middleware - The middleware passed
	     * @returns Nothing
	     */
	    setMiddleware(...middleware) {
	        middleware.forEach((element, index) => {
	            if (index < middleware.length - 1) {
	                element.next = middleware[index + 1];
	            }
	        });
	        this.middleware = middleware[0];
	    }
	    /**
	     * Executes a request and returns a promise resolving the response.
	     * @param url the request url.
	     * @param options request options.
	     * @returns the promise resolving the response.
	     */
	    executeFetch(url, requestInit, requestOptions) {
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (this.customFetch && !this.middleware) {
	                return this.customFetch(url, requestInit);
	            }
	            if (this.middleware) {
	                return yield this.middleware.execute(url, requestInit, requestOptions);
	            }
	            else {
	                throw new Error("Please provide middlewares or a custom fetch function to execute the request");
	            }
	        });
	    }
	}
	httpClient.HttpClient = HttpClient;
	return httpClient;
}

var hasRequiredFetchRequestAdapter;

function requireFetchRequestAdapter () {
	if (hasRequiredFetchRequestAdapter) return fetchRequestAdapter$1;
	hasRequiredFetchRequestAdapter = 1;
	Object.defineProperty(fetchRequestAdapter$1, "__esModule", { value: true });
	fetchRequestAdapter$1.FetchRequestAdapter = void 0;
	const tslib_1 = require$$0;
	const kiota_abstractions_1 = require$$1;
	const httpClient_1 = requireHttpClient();
	class FetchRequestAdapter {
	    /**
	     * Instantiates a new http core service
	     * @param authenticationProvider the authentication provider to use.
	     * @param parseNodeFactory the parse node factory to deserialize responses.
	     * @param serializationWriterFactory the serialization writer factory to use to serialize request bodies.
	     * @param httpClient the http client to use to execute requests.
	     */
	    constructor(authenticationProvider, parseNodeFactory = kiota_abstractions_1.ParseNodeFactoryRegistry.defaultInstance, serializationWriterFactory = kiota_abstractions_1.SerializationWriterFactoryRegistry.defaultInstance, httpClient = new httpClient_1.HttpClient()) {
	        this.authenticationProvider = authenticationProvider;
	        this.parseNodeFactory = parseNodeFactory;
	        this.serializationWriterFactory = serializationWriterFactory;
	        this.httpClient = httpClient;
	        /** The base url for every request. */
	        this.baseUrl = "";
	        this.getResponseContentType = (response) => {
	            var _a;
	            const header = (_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.toLowerCase();
	            if (!header)
	                return undefined;
	            const segments = header.split(";");
	            if (segments.length === 0)
	                return undefined;
	            else
	                return segments[0];
	        };
	        this.sendCollectionOfPrimitiveAsync = (requestInfo, responseType, responseHandler, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            const response = yield this.getHttpResponseMessage(requestInfo);
	            if (responseHandler) {
	                return yield responseHandler.handleResponseAsync(response, errorMappings);
	            }
	            else {
	                try {
	                    yield this.throwFailedResponses(response, errorMappings);
	                    if (this.shouldReturnUndefined(response))
	                        return undefined;
	                    switch (responseType) {
	                        case "string":
	                        case "number":
	                        case "boolean":
	                        case "Date":
	                            // eslint-disable-next-line no-case-declarations
	                            const rootNode = yield this.getRootParseNode(response);
	                            if (responseType === "string") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "number") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "boolean") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "Date") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "Duration") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "DateOnly") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else if (responseType === "TimeOnly") {
	                                return rootNode.getCollectionOfPrimitiveValues();
	                            }
	                            else {
	                                throw new Error("unexpected type to deserialize");
	                            }
	                    }
	                }
	                finally {
	                    yield this.purgeResponseBody(response);
	                }
	            }
	        });
	        this.sendCollectionAsync = (requestInfo, deserialization, responseHandler, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            const response = yield this.getHttpResponseMessage(requestInfo);
	            if (responseHandler) {
	                return yield responseHandler.handleResponseAsync(response, errorMappings);
	            }
	            else {
	                try {
	                    yield this.throwFailedResponses(response, errorMappings);
	                    if (this.shouldReturnUndefined(response))
	                        return undefined;
	                    const rootNode = yield this.getRootParseNode(response);
	                    const result = rootNode.getCollectionOfObjectValuesFromMethod(deserialization);
	                    return result;
	                }
	                finally {
	                    yield this.purgeResponseBody(response);
	                }
	            }
	        });
	        this.sendAsync = (requestInfo, deserializer, responseHandler, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            const response = yield this.getHttpResponseMessage(requestInfo);
	            if (responseHandler) {
	                return yield responseHandler.handleResponseAsync(response, errorMappings);
	            }
	            else {
	                try {
	                    yield this.throwFailedResponses(response, errorMappings);
	                    if (this.shouldReturnUndefined(response))
	                        return undefined;
	                    const rootNode = yield this.getRootParseNode(response);
	                    const result = rootNode.getObject(deserializer);
	                    return result;
	                }
	                finally {
	                    yield this.purgeResponseBody(response);
	                }
	            }
	        });
	        this.sendPrimitiveAsync = (requestInfo, responseType, responseHandler, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            const response = yield this.getHttpResponseMessage(requestInfo);
	            if (responseHandler) {
	                return yield responseHandler.handleResponseAsync(response, errorMappings);
	            }
	            else {
	                try {
	                    yield this.throwFailedResponses(response, errorMappings);
	                    if (this.shouldReturnUndefined(response))
	                        return undefined;
	                    switch (responseType) {
	                        case "ArrayBuffer":
	                            // eslint-disable-next-line no-case-declarations
	                            if (!response.body) {
	                                return undefined;
	                            }
	                            return (yield response.arrayBuffer());
	                        case "string":
	                        case "number":
	                        case "boolean":
	                        case "Date":
	                            // eslint-disable-next-line no-case-declarations
	                            const rootNode = yield this.getRootParseNode(response);
	                            if (responseType === "string") {
	                                return rootNode.getStringValue();
	                            }
	                            else if (responseType === "number") {
	                                return rootNode.getNumberValue();
	                            }
	                            else if (responseType === "boolean") {
	                                return rootNode.getBooleanValue();
	                            }
	                            else if (responseType === "Date") {
	                                return rootNode.getDateValue();
	                            }
	                            else if (responseType === "Duration") {
	                                return rootNode.getDurationValue();
	                            }
	                            else if (responseType === "DateOnly") {
	                                return rootNode.getDateOnlyValue();
	                            }
	                            else if (responseType === "TimeOnly") {
	                                return rootNode.getTimeOnlyValue();
	                            }
	                            else {
	                                throw new Error("unexpected type to deserialize");
	                            }
	                    }
	                }
	                finally {
	                    yield this.purgeResponseBody(response);
	                }
	            }
	        });
	        this.sendNoResponseContentAsync = (requestInfo, responseHandler, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            const response = yield this.getHttpResponseMessage(requestInfo);
	            if (responseHandler) {
	                return yield responseHandler.handleResponseAsync(response, errorMappings);
	            }
	            try {
	                yield this.throwFailedResponses(response, errorMappings);
	            }
	            finally {
	                yield this.purgeResponseBody(response);
	            }
	        });
	        this.enableBackingStore = (backingStoreFactory) => {
	            this.parseNodeFactory = (0, kiota_abstractions_1.enableBackingStoreForParseNodeFactory)(this.parseNodeFactory);
	            this.serializationWriterFactory = (0, kiota_abstractions_1.enableBackingStoreForSerializationWriterFactory)(this.serializationWriterFactory);
	            if (!this.serializationWriterFactory || !this.parseNodeFactory)
	                throw new Error("unable to enable backing store");
	            if (backingStoreFactory) {
	                kiota_abstractions_1.BackingStoreFactorySingleton.instance = backingStoreFactory;
	            }
	        };
	        this.getRootParseNode = (response) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const payload = yield response.arrayBuffer();
	            const responseContentType = this.getResponseContentType(response);
	            if (!responseContentType)
	                throw new Error("no response content type found for deserialization");
	            return this.parseNodeFactory.getRootParseNode(responseContentType, payload);
	        });
	        this.shouldReturnUndefined = (response) => {
	            return response.status === 204 || !response.body;
	        };
	        /** purges the response body if it hasn't been read to release the connection to the server */
	        this.purgeResponseBody = (response) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!response.bodyUsed && response.body) {
	                yield response.arrayBuffer();
	            }
	        });
	        this.throwFailedResponses = (response, errorMappings) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            var _a, _b;
	            if (response.ok)
	                return;
	            const statusCode = response.status;
	            const statusCodeAsString = statusCode.toString();
	            if (!errorMappings || (!errorMappings[statusCodeAsString] && !(statusCode >= 400 && statusCode < 500 && errorMappings["4XX"]) && !(statusCode >= 500 && statusCode < 600 && errorMappings["5XX"])))
	                throw new kiota_abstractions_1.ApiError("the server returned an unexpected status code and no error class is registered for this code " + statusCode);
	            const factory = (_b = (_a = errorMappings[statusCodeAsString]) !== null && _a !== void 0 ? _a : (statusCode >= 400 && statusCode < 500 ? errorMappings["4XX"] : undefined)) !== null && _b !== void 0 ? _b : (statusCode >= 500 && statusCode < 600 ? errorMappings["5XX"] : undefined);
	            const rootNode = yield this.getRootParseNode(response);
	            const error = rootNode.getObjectValue(factory);
	            if (error)
	                throw error;
	            else
	                throw new kiota_abstractions_1.ApiError("unexpected error type" + typeof error);
	        });
	        this.getHttpResponseMessage = (requestInfo, claims) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (!requestInfo) {
	                throw new Error("requestInfo cannot be null");
	            }
	            this.setBaseUrlForRequestInformation(requestInfo);
	            const additionalContext = {};
	            if (claims) {
	                additionalContext["claims"] = claims;
	            }
	            yield this.authenticationProvider.authenticateRequest(requestInfo, additionalContext);
	            const request = this.getRequestFromRequestInformation(requestInfo);
	            const response = yield this.httpClient.executeFetch(requestInfo.URL, request, requestInfo.getRequestOptions());
	            return yield this.retryCAEResponseIfRequired(requestInfo, response, claims);
	        });
	        this.retryCAEResponseIfRequired = (requestInfo, response, claims) => tslib_1.__awaiter(this, void 0, void 0, function* () {
	            const responseClaims = this.getClaimsFromResponse(response, claims);
	            if (responseClaims) {
	                yield this.purgeResponseBody(response);
	                return yield this.getHttpResponseMessage(requestInfo, responseClaims);
	            }
	            return response;
	        });
	        this.getClaimsFromResponse = (response, claims) => {
	            if (response.status === 401 && !claims) {
	                // avoid infinite loop, we only retry once
	                // no need to check for the content since it's an array and it doesn't need to be rewound
	                const rawAuthenticateHeader = response.headers.get("WWW-Authenticate");
	                if (rawAuthenticateHeader && /^Bearer /gi.test(rawAuthenticateHeader)) {
	                    const rawParameters = rawAuthenticateHeader.replace(/^Bearer /gi, "").split(",");
	                    for (const rawParameter of rawParameters) {
	                        const trimmedParameter = rawParameter.trim();
	                        if (/claims="[^"]+"/gi.test(trimmedParameter)) {
	                            return trimmedParameter.replace(/claims="([^"]+)"/gi, "$1");
	                        }
	                    }
	                }
	            }
	            return undefined;
	        };
	        this.setBaseUrlForRequestInformation = (requestInfo) => {
	            requestInfo.pathParameters["baseurl"] = this.baseUrl;
	        };
	        this.getRequestFromRequestInformation = (requestInfo) => {
	            var _a;
	            const request = {
	                method: (_a = requestInfo.httpMethod) === null || _a === void 0 ? void 0 : _a.toString(),
	                headers: requestInfo.headers,
	                body: requestInfo.content,
	            };
	            return request;
	        };
	        if (!authenticationProvider) {
	            throw new Error("authentication provider cannot be null");
	        }
	        if (!parseNodeFactory) {
	            throw new Error("parse node factory cannot be null");
	        }
	        if (!serializationWriterFactory) {
	            throw new Error("serialization writer factory cannot be null");
	        }
	        if (!httpClient) {
	            throw new Error("http client cannot be null");
	        }
	    }
	    getSerializationWriterFactory() {
	        return this.serializationWriterFactory;
	    }
	}
	fetchRequestAdapter$1.FetchRequestAdapter = FetchRequestAdapter;
	return fetchRequestAdapter$1;
}

var middleware = {};

var hasRequiredMiddleware;

function requireMiddleware () {
	if (hasRequiredMiddleware) return middleware;
	hasRequiredMiddleware = 1;
	Object.defineProperty(middleware, "__esModule", { value: true });
	return middleware;
}

var chaosHandler = {};

var ChaosHandlerData = {};

var hasRequiredChaosHandlerData;

function requireChaosHandlerData () {
	if (hasRequiredChaosHandlerData) return ChaosHandlerData;
	hasRequiredChaosHandlerData = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(ChaosHandlerData, "__esModule", { value: true });
	ChaosHandlerData.httpStatusCode = ChaosHandlerData.methodStatusCode = void 0;
	/**
	 * Contains RequestMethod to corresponding array of possible status codes, used for Random mode
	 */
	ChaosHandlerData.methodStatusCode = {
	    GET: [429, 500, 502, 503, 504],
	    POST: [429, 500, 502, 503, 504, 507],
	    PUT: [429, 500, 502, 503, 504, 507],
	    PATCH: [429, 500, 502, 503, 504],
	    DELETE: [429, 500, 502, 503, 504, 507],
	};
	/**
	 * Contains statusCode to statusMessage map
	 */
	ChaosHandlerData.httpStatusCode = {
	    100: "Continue",
	    101: "Switching Protocols",
	    102: "Processing",
	    103: "Early Hints",
	    200: "OK",
	    201: "Created",
	    202: "Accepted",
	    203: "Non-Authoritative Information",
	    204: "No Content",
	    205: "Reset Content",
	    206: "Partial Content",
	    207: "Multi-Status",
	    208: "Already Reported",
	    226: "IM Used",
	    300: "Multiple Choices",
	    301: "Moved Permanently",
	    302: "Found",
	    303: "See Other",
	    304: "Not Modified",
	    305: "Use Proxy",
	    307: "Temporary Redirect",
	    308: "Permanent Redirect",
	    400: "Bad Request",
	    401: "Unauthorized",
	    402: "Payment Required",
	    403: "Forbidden",
	    404: "Not Found",
	    405: "Method Not Allowed",
	    406: "Not Acceptable",
	    407: "Proxy Authentication Required",
	    408: "Request Timeout",
	    409: "Conflict",
	    410: "Gone",
	    411: "Length Required",
	    412: "Precondition Failed",
	    413: "Payload Too Large",
	    414: "URI Too Long",
	    415: "Unsupported Media Type",
	    416: "Range Not Satisfiable",
	    417: "Expectation Failed",
	    421: "Misdirected Request",
	    422: "Unprocessable Entity",
	    423: "Locked",
	    424: "Failed Dependency",
	    425: "Too Early",
	    426: "Upgrade Required",
	    428: "Precondition Required",
	    429: "Too Many Requests",
	    431: "Request Header Fields Too Large",
	    451: "Unavailable For Legal Reasons",
	    500: "Internal Server Error",
	    501: "Not Implemented",
	    502: "Bad Gateway",
	    503: "Service Unavailable",
	    504: "Gateway Timeout",
	    505: "HTTP Version Not Supported",
	    506: "Variant Also Negotiates",
	    507: "Insufficient Storage",
	    508: "Loop Detected",
	    510: "Not Extended",
	    511: "Network Authentication Required",
	};
	return ChaosHandlerData;
}

var chaosStrategy = {};

var hasRequiredChaosStrategy;

function requireChaosStrategy () {
	if (hasRequiredChaosStrategy) return chaosStrategy;
	hasRequiredChaosStrategy = 1;
	(function (exports) {
		/**
		 * -------------------------------------------------------------------------------------------
		 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
		 * See License in the project root for license information.
		 * -------------------------------------------------------------------------------------------
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ChaosStrategy = void 0;
		(function (ChaosStrategy) {
		    ChaosStrategy[ChaosStrategy["MANUAL"] = 0] = "MANUAL";
		    ChaosStrategy[ChaosStrategy["RANDOM"] = 1] = "RANDOM";
		})(exports.ChaosStrategy || (exports.ChaosStrategy = {}));
} (chaosStrategy));
	return chaosStrategy;
}

var hasRequiredChaosHandler;

function requireChaosHandler () {
	if (hasRequiredChaosHandler) return chaosHandler;
	hasRequiredChaosHandler = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(chaosHandler, "__esModule", { value: true });
	chaosHandler.ChaosHandler = void 0;
	const tslib_1 = require$$0;
	const ChaosHandlerData_1 = requireChaosHandlerData();
	const chaosStrategy_1 = requireChaosStrategy();
	/**
	 * @class
	 * Class
	 * @implements Middleware
	 * Class representing RedirectHandler
	 */
	class ChaosHandler {
	    /**
	     * @public
	     * @constructor
	     * To create an instance of ChaosHandler
	     * @param {ChaosHandlerOptions} [options = new ChaosHandlerOptions()] - The chaos handler options instance
	     * @param manualMap - The Map passed by user containing url-statusCode info
	     */
	    constructor(options, manualMap) {
	        /**
	         * A member holding options to customize the handler behavior
	         *
	         * @private
	         */
	        this.options = {
	            chaosStrategy: chaosStrategy_1.ChaosStrategy.RANDOM,
	            statusMessage: "A random status message",
	            chaosPercentage: 10,
	        };
	        const chaosOptions = Object.assign(this.options, options);
	        if (chaosOptions.chaosPercentage > 100 || chaosOptions.chaosPercentage < 0) {
	            throw new Error("Chaos Percentage must be set to a value between 0 and 100.");
	        }
	        this.options = chaosOptions;
	        this.manualMap = manualMap !== null && manualMap !== void 0 ? manualMap : new Map();
	    }
	    /**
	     * Fetches a random status code for the RANDOM mode from the predefined array
	     * @private
	     * @param {string} requestMethod - the API method for the request
	     * @returns a random status code from a given set of status codes
	     */
	    generateRandomStatusCode(requestMethod) {
	        const statusCodeArray = ChaosHandlerData_1.methodStatusCode[requestMethod];
	        return statusCodeArray[Math.floor(Math.random() * statusCodeArray.length)];
	    }
	    /**
	     * Strips out the host url and returns the relative url only
	     * @private
	     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
	     * @param {string} urlMethod - the complete URL
	     * @returns the string as relative URL
	     */
	    getRelativeURL(chaosHandlerOptions, urlMethod) {
	        const baseUrl = chaosHandlerOptions.baseUrl;
	        if (baseUrl === undefined) {
	            return urlMethod;
	        }
	        return urlMethod.replace(baseUrl, "").trim();
	    }
	    /**
	     * Gets a status code from the options or a randomly generated status code
	     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
	     * @param {string} requestURL - the URL for the request
	     * @param {HttpMethod} requestMethod - the API method for the request
	     * @returns {number} generated statusCode
	     */
	    getStatusCode(chaosHandlerOptions, requestURL, requestMethod) {
	        if (chaosHandlerOptions.chaosStrategy === chaosStrategy_1.ChaosStrategy.MANUAL) {
	            if (chaosHandlerOptions.statusCode !== undefined) {
	                return chaosHandlerOptions.statusCode;
	            }
	            else {
	                // manual mode with no status code, can be a global level or request level without statusCode
	                const relativeURL = this.getRelativeURL(chaosHandlerOptions, requestURL);
	                const definedResponses = this.manualMap.get(relativeURL);
	                if (definedResponses !== undefined) {
	                    // checking Manual Map for exact match
	                    const mapCode = definedResponses.get(requestMethod);
	                    if (mapCode !== undefined) {
	                        return mapCode;
	                    }
	                    // else statusCode would be undefined
	                }
	                else {
	                    // checking for regex match if exact match doesn't work
	                    this.manualMap.forEach((value, key) => {
	                        var _a;
	                        const regexURL = new RegExp(key + "$");
	                        if (regexURL.test(relativeURL)) {
	                            const responseCode = (_a = this.manualMap.get(key)) === null || _a === void 0 ? void 0 : _a.get(requestMethod);
	                            if (responseCode !== undefined) {
	                                return responseCode;
	                            }
	                        }
	                    });
	                }
	            }
	        }
	        // for manual mode status or if the url was not mapped to a code return a random status
	        return this.generateRandomStatusCode(requestMethod);
	    }
	    /**
	     * Generates a respondy for the chaoe response
	     * @private
	     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
	     * @param {string} requestID - request id
	     * @param {string} requestDate - date of the request
	     *  * @returns response body
	     */
	    createResponseBody(chaosHandlerOptions, statusCode) {
	        if (chaosHandlerOptions.responseBody) {
	            return chaosHandlerOptions.responseBody;
	        }
	        let body;
	        if (statusCode >= 400) {
	            const codeMessage = ChaosHandlerData_1.httpStatusCode[statusCode];
	            const errMessage = chaosHandlerOptions.statusMessage;
	            body = {
	                error: {
	                    code: codeMessage,
	                    message: errMessage,
	                },
	            };
	        }
	        else {
	            body = {};
	        }
	        return body;
	    }
	    /**
	     * Composes a new chaotic response code with the configured parameters
	     * @param {string} url
	     * @param {FetchRequestInit} fetchRequestInit
	     * @returns {Response}
	     */
	    createChaosResponse(url, fetchRequestInit) {
	        var _a;
	        if (fetchRequestInit.method === undefined) {
	            throw new Error("Request method must be defined.");
	        }
	        const requestMethod = fetchRequestInit.method;
	        const statusCode = this.getStatusCode(this.options, url, requestMethod);
	        const responseBody = this.createResponseBody(this.options, statusCode);
	        const stringBody = typeof responseBody === "string" ? responseBody : JSON.stringify(responseBody);
	        return {
	            url,
	            body: stringBody,
	            status: statusCode,
	            statusText: this.options.statusMessage,
	            headers: (_a = this.options.headers) !== null && _a !== void 0 ? _a : {},
	        };
	    }
	    execute(url, requestInit, requestOptions) {
	        return tslib_1.__awaiter(this, void 0, void 0, function* () {
	            if (Math.floor(Math.random() * 100) < this.options.chaosPercentage) {
	                return Promise.resolve(this.createChaosResponse(url, requestInit));
	            }
	            else {
	                if (!this.next) {
	                    throw new Error("Please set the next middleware to continue the request");
	                }
	                return yield this.next.execute(url, requestInit, requestOptions);
	            }
	        });
	    }
	}
	chaosHandler.ChaosHandler = ChaosHandler;
	return chaosHandler;
}

var chaosHandlerOptions = {};

var hasRequiredChaosHandlerOptions;

function requireChaosHandlerOptions () {
	if (hasRequiredChaosHandlerOptions) return chaosHandlerOptions;
	hasRequiredChaosHandlerOptions = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(chaosHandlerOptions, "__esModule", { value: true });
	chaosHandlerOptions.ChaosHandlerOptionsKey = void 0;
	chaosHandlerOptions.ChaosHandlerOptionsKey = "ChaosHandlerOptionsKey";
	return chaosHandlerOptions;
}

var telemetryHandlerOptions = {};

var hasRequiredTelemetryHandlerOptions;

function requireTelemetryHandlerOptions () {
	if (hasRequiredTelemetryHandlerOptions) return telemetryHandlerOptions;
	hasRequiredTelemetryHandlerOptions = 1;
	Object.defineProperty(telemetryHandlerOptions, "__esModule", { value: true });
	return telemetryHandlerOptions;
}

var telemetryHandler = {};

var hasRequiredTelemetryHandler;

function requireTelemetryHandler () {
	if (hasRequiredTelemetryHandler) return telemetryHandler;
	hasRequiredTelemetryHandler = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.TelemetryHandler = exports.TelemetryHandlerOptionsKey = void 0;
		exports.TelemetryHandlerOptionsKey = "TelemetryHandlerOptionsKey";
		class TelemetryHandler {
		    constructor(telemetryHandlerOptions) {
		        this.telemetryHandlerOptions = telemetryHandlerOptions;
		    }
		    execute(url, requestInit, requestOptions) {
		        if (this.telemetryHandlerOptions && this.telemetryHandlerOptions.telemetryConfigurator) {
		            this.telemetryHandlerOptions.telemetryConfigurator(url, requestInit, requestOptions, this.telemetryHandlerOptions.telemetryInfomation);
		        }
		        else if (requestOptions && requestOptions[exports.TelemetryHandlerOptionsKey]) {
		            requestOptions[exports.TelemetryHandlerOptionsKey].telemetryConfigurator(url, requestInit, requestOptions);
		        }
		        if (!this.next) {
		            throw new Error("Please set the next middleware to continue the request");
		        }
		        return this.next.execute(url, requestInit, requestOptions);
		    }
		}
		exports.TelemetryHandler = TelemetryHandler;
} (telemetryHandler));
	return telemetryHandler;
}

var fetchDefinitions = {};

var hasRequiredFetchDefinitions;

function requireFetchDefinitions () {
	if (hasRequiredFetchDefinitions) return fetchDefinitions;
	hasRequiredFetchDefinitions = 1;
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(fetchDefinitions, "__esModule", { value: true });
	return fetchDefinitions;
}

(function (exports) {
	/**
	 * -------------------------------------------------------------------------------------------
	 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
	 * See License in the project root for license information.
	 * -------------------------------------------------------------------------------------------
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	const tslib_1 = require$$0;
	/* eslint-disable @typescript-eslint/triple-slash-reference*/
	/// <reference path= "../dom.shim.d.ts" />
	tslib_1.__exportStar(requireFetchRequestAdapter(), exports);
	tslib_1.__exportStar(requireHttpClient(), exports);
	tslib_1.__exportStar(requireMiddleware(), exports);
	tslib_1.__exportStar(requireChaosHandler(), exports);
	tslib_1.__exportStar(requireCustomFetchHandler(), exports);
	tslib_1.__exportStar(requireParametersNameDecodingHandler(), exports);
	tslib_1.__exportStar(requireRedirectHandler(), exports);
	tslib_1.__exportStar(requireRetryHandler(), exports);
	tslib_1.__exportStar(requireChaosHandlerOptions(), exports);
	tslib_1.__exportStar(requireChaosStrategy(), exports);
	tslib_1.__exportStar(requireParametersNameDecodingOptions(), exports);
	tslib_1.__exportStar(requireRedirectHandlerOptions(), exports);
	tslib_1.__exportStar(requireRetryHandlerOptions(), exports);
	tslib_1.__exportStar(requireTelemetryHandlerOptions(), exports);
	tslib_1.__exportStar(requireTelemetryHandler(), exports);
	tslib_1.__exportStar(requireMiddlewareFactory(), exports);
	tslib_1.__exportStar(requireHeadersUtil(), exports);
	tslib_1.__exportStar(requireFetchDefinitions(), exports);
} (src));

/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
/**
 * @class
 * Simple Access Token Provider that returns an access token.
 * @extends AuthenticationProvider
 */
class SimpleAccessTokenProvider {
    /**
     * @public
     * @constructor
     * Creates an instance of SimpleAccessTokenProvider
     * @param {()=>Promise<string>}getAccessTokenCallback  - The callback function to get the access token
     * @param {string[]} scopes - The scopes for the access token
     * @param {allowedHosts} allowedhosts -  A set of custom host names. Should contain hostnames only.
     * @returns An instance of SimpleAccessTokenProvider
     */
    constructor(getAccessTokenCallback, scopes = ["https://graph.microsoft.com/.default"], allowedhosts) {
        this.getAccessTokenCallback = getAccessTokenCallback;
        this.scopes = scopes;
        this.allowedhosts = allowedhosts;
        this.getAllowedHostsValidator = () => this.allowedHostsValidator;
        this.allowedHostsValidator = new AllowedHostsValidator(allowedhosts);
    }
    /**
     * @public
     * @async
     * To get the access token
     * @returns The promise that resolves to an access token
     */
    async getAuthorizationToken(url, additionalAuthenticationContext) {
        if (!url || !this.allowedHostsValidator.isUrlHostValid(url)) ;
        validateProtocol(url);
        let token = "";
        if (this.getAccessTokenCallback) {
            token = await this.getAccessTokenCallback(this.scopes);
        }
        return token;
    }
}

/**
 * @module SimpleAuthenticationProvider
 */
/**
 * A class which accepts callbacks to returns the access token.
 */
class SimpleAuthenticationProvider extends BaseBearerTokenAuthenticationProvider {
    /**
     * @public
     * @constructor
     * Creates an instance of SimpleAuthenticationProvider
     * @param {()=>Promise<string>}getAccessTokenCallback  - The callback function to get the access token
     * @param {string[]} scopes - The scopes for the access token
     * @param {allowedHosts} allowedhosts -  A set of custom host names. Should contain hostnames only.
     * @returns An instance of SimpleAuthenticationProvider
     */
    constructor(getAccessTokenCallback, scopes = ["https://graph.microsoft.com/.default"], allowedHosts) {
        super(new SimpleAccessTokenProvider(getAccessTokenCallback, scopes, allowedHosts));
    }
}

const authProvider = new SimpleAuthenticationProvider(async () => {
    return "DUMMY_TOKEN";
}, ["scope1", "scope2"]);
const fetchRequestAdapter = new src.FetchRequestAdapter(authProvider);
const apiClient = new ApiClient(fetchRequestAdapter);

/** Builds and executes requests for operations under /users/{user-id}/outlook/masterCategories/{outlookCategory-id} */
class OutlookCategoryItemRequestBuilder {
    /**
     * Instantiates a new OutlookCategoryItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/masterCategories/{outlookCategory%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property masterCategories for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * A list of categories defined for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property masterCategories in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookCategory);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property masterCategories for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * A list of categories defined for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookCategory
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookCategory, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property masterCategories in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

function deserializeIntoOutlookCategoryCollectionResponse(outlookCategoryCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { outlookCategoryCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { outlookCategoryCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookCategory); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/masterCategories */
class MasterCategoriesRequestBuilder {
    /**
     * Instantiates a new MasterCategoriesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/masterCategories{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the categories that have been defined for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create an outlookCategory object in the user's master list of categories.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookCategory);
        return requestInfo;
    }
    ;
    /**
     * Get all the categories that have been defined for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookCategoryCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookCategoryCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create an outlookCategory object in the user's master list of categories.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookCategory
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookCategory, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id} */
class MultiValueLegacyExtendedPropertyItemRequestBuilder$4 {
    /**
     * Instantiates a new MultiValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

function deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse(multiValueLegacyExtendedPropertyCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { multiValueLegacyExtendedPropertyCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { multiValueLegacyExtendedPropertyCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoMultiValueLegacyExtendedProperty); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties */
class MultiValueExtendedPropertiesRequestBuilder$4 {
    /**
     * Instantiates a new MultiValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/multiValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id} */
class SingleValueLegacyExtendedPropertyItemRequestBuilder$4 {
    /**
     * Instantiates a new SingleValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

function deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse(singleValueLegacyExtendedPropertyCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { singleValueLegacyExtendedPropertyCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { singleValueLegacyExtendedPropertyCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoSingleValueLegacyExtendedProperty); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties */
class SingleValueExtendedPropertiesRequestBuilder$4 {
    /**
     * Instantiates a new SingleValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/singleValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

function deserializeIntoAttachmentCollectionResponse(attachmentCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { attachmentCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { attachmentCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoAttachment); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/attachments */
class AttachmentsRequestBuilder$2 {
    /**
     * Instantiates a new AttachmentsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/attachments{?%24top,%24skip,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeAttachment);
        return requestInfo;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of AttachmentCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachmentCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/attachments/{attachment-id} */
class AttachmentItemRequestBuilder$2 {
    /**
     * Instantiates a new AttachmentItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/attachments/{attachment%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id} */
class MultiValueLegacyExtendedPropertyItemRequestBuilder$3 {
    /**
     * Instantiates a new MultiValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/multiValueExtendedProperties */
class MultiValueExtendedPropertiesRequestBuilder$3 {
    /**
     * Instantiates a new MultiValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/multiValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id} */
class SingleValueLegacyExtendedPropertyItemRequestBuilder$3 {
    /**
     * Instantiates a new SingleValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/singleValueExtendedProperties */
class SingleValueExtendedPropertiesRequestBuilder$3 {
    /**
     * Instantiates a new SingleValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/singleValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id} */
class OutlookTaskItemRequestBuilder$2 {
    /**
     * Instantiates a new OutlookTaskItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The attachments property */
    get attachments() {
        return new AttachmentsRequestBuilder$2(this.pathParameters, this.requestAdapter);
    }
    /** The multiValueExtendedProperties property */
    get multiValueExtendedProperties() {
        return new MultiValueExtendedPropertiesRequestBuilder$3(this.pathParameters, this.requestAdapter);
    }
    /** The singleValueExtendedProperties property */
    get singleValueExtendedProperties() {
        return new SingleValueExtendedPropertiesRequestBuilder$3(this.pathParameters, this.requestAdapter);
    }
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.tasks.item.attachments.item collection
     * @param id Unique identifier of the item
     * @returns a AttachmentItemRequestBuilder
     */
    attachmentsById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["attachment%2Did"] = id;
        return new AttachmentItemRequestBuilder$2(urlTplParams, this.requestAdapter);
    }
    ;
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The tasks in this task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The tasks in this task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.tasks.item.multiValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a MultiValueLegacyExtendedPropertyItemRequestBuilder
     */
    multiValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["multiValueLegacyExtendedProperty%2Did"] = id;
        return new MultiValueLegacyExtendedPropertyItemRequestBuilder$3(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.tasks.item.singleValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a SingleValueLegacyExtendedPropertyItemRequestBuilder
     */
    singleValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["singleValueLegacyExtendedProperty%2Did"] = id;
        return new SingleValueLegacyExtendedPropertyItemRequestBuilder$3(urlTplParams, this.requestAdapter);
    }
    ;
}

function deserializeIntoOutlookTaskCollectionResponse(outlookTaskCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { outlookTaskCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { outlookTaskCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTask); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id}/tasks */
class TasksRequestBuilder$2 {
    /**
     * Instantiates a new TasksRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}/tasks{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a `Prefer: outlook.timezone` request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to tasks for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a `Prefer: outlook.timezone` request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to tasks for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders/{outlookTaskFolder-id} */
class OutlookTaskFolderItemRequestBuilder$1 {
    /**
     * Instantiates a new OutlookTaskFolderItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders/{outlookTaskFolder%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The multiValueExtendedProperties property */
    get multiValueExtendedProperties() {
        return new MultiValueExtendedPropertiesRequestBuilder$4(this.pathParameters, this.requestAdapter);
    }
    /** The singleValueExtendedProperties property */
    get singleValueExtendedProperties() {
        return new SingleValueExtendedPropertiesRequestBuilder$4(this.pathParameters, this.requestAdapter);
    }
    /** The tasks property */
    get tasks() {
        return new TasksRequestBuilder$2(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Delete navigation property taskFolders for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get taskFolders from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property taskFolders in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskFolder);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property taskFolders for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get taskFolders from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolder
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolder, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.multiValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a MultiValueLegacyExtendedPropertyItemRequestBuilder
     */
    multiValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["multiValueLegacyExtendedProperty%2Did"] = id;
        return new MultiValueLegacyExtendedPropertyItemRequestBuilder$4(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Update the navigation property taskFolders in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.singleValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a SingleValueLegacyExtendedPropertyItemRequestBuilder
     */
    singleValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["singleValueLegacyExtendedProperty%2Did"] = id;
        return new SingleValueLegacyExtendedPropertyItemRequestBuilder$4(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item.tasks.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskItemRequestBuilder
     */
    tasksById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTask%2Did"] = id;
        return new OutlookTaskItemRequestBuilder$2(urlTplParams, this.requestAdapter);
    }
    ;
}

function deserializeIntoOutlookTaskFolderCollectionResponse(outlookTaskFolderCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { outlookTaskFolderCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { outlookTaskFolderCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTaskFolder); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskFolders */
class TaskFoldersRequestBuilder$1 {
    /**
     * Instantiates a new TaskFoldersRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskFolders{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the Outlook task folders in the user's mailbox.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to taskFolders for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskFolder);
        return requestInfo;
    }
    ;
    /**
     * Get all the Outlook task folders in the user's mailbox.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolderCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolderCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to taskFolders for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolder
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolder, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id} */
class MultiValueLegacyExtendedPropertyItemRequestBuilder$2 {
    /**
     * Instantiates a new MultiValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties */
class MultiValueExtendedPropertiesRequestBuilder$2 {
    /**
     * Instantiates a new MultiValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/multiValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id} */
class SingleValueLegacyExtendedPropertyItemRequestBuilder$2 {
    /**
     * Instantiates a new SingleValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties */
class SingleValueExtendedPropertiesRequestBuilder$2 {
    /**
     * Instantiates a new SingleValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/singleValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/attachments */
class AttachmentsRequestBuilder$1 {
    /**
     * Instantiates a new AttachmentsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/attachments{?%24top,%24skip,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeAttachment);
        return requestInfo;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of AttachmentCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachmentCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/attachments/{attachment-id} */
class AttachmentItemRequestBuilder$1 {
    /**
     * Instantiates a new AttachmentItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/attachments/{attachment%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id} */
class MultiValueLegacyExtendedPropertyItemRequestBuilder$1 {
    /**
     * Instantiates a new MultiValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/multiValueExtendedProperties */
class MultiValueExtendedPropertiesRequestBuilder$1 {
    /**
     * Instantiates a new MultiValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/multiValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id} */
class SingleValueLegacyExtendedPropertyItemRequestBuilder$1 {
    /**
     * Instantiates a new SingleValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}/singleValueExtendedProperties */
class SingleValueExtendedPropertiesRequestBuilder$1 {
    /**
     * Instantiates a new SingleValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}/singleValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id} */
class OutlookTaskItemRequestBuilder$1 {
    /**
     * Instantiates a new OutlookTaskItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks/{outlookTask%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The attachments property */
    get attachments() {
        return new AttachmentsRequestBuilder$1(this.pathParameters, this.requestAdapter);
    }
    /** The multiValueExtendedProperties property */
    get multiValueExtendedProperties() {
        return new MultiValueExtendedPropertiesRequestBuilder$1(this.pathParameters, this.requestAdapter);
    }
    /** The singleValueExtendedProperties property */
    get singleValueExtendedProperties() {
        return new SingleValueExtendedPropertiesRequestBuilder$1(this.pathParameters, this.requestAdapter);
    }
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.tasks.item.attachments.item collection
     * @param id Unique identifier of the item
     * @returns a AttachmentItemRequestBuilder
     */
    attachmentsById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["attachment%2Did"] = id;
        return new AttachmentItemRequestBuilder$1(urlTplParams, this.requestAdapter);
    }
    ;
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The tasks in this task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The tasks in this task folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.tasks.item.multiValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a MultiValueLegacyExtendedPropertyItemRequestBuilder
     */
    multiValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["multiValueLegacyExtendedProperty%2Did"] = id;
        return new MultiValueLegacyExtendedPropertyItemRequestBuilder$1(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.tasks.item.singleValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a SingleValueLegacyExtendedPropertyItemRequestBuilder
     */
    singleValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["singleValueLegacyExtendedProperty%2Did"] = id;
        return new SingleValueLegacyExtendedPropertyItemRequestBuilder$1(urlTplParams, this.requestAdapter);
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks */
class TasksRequestBuilder$1 {
    /**
     * Instantiates a new TasksRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a `Prefer: outlook.timezone` request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to tasks for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a `Prefer: outlook.timezone` request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to tasks for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id} */
class OutlookTaskFolderItemRequestBuilder {
    /**
     * Instantiates a new OutlookTaskFolderItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The multiValueExtendedProperties property */
    get multiValueExtendedProperties() {
        return new MultiValueExtendedPropertiesRequestBuilder$2(this.pathParameters, this.requestAdapter);
    }
    /** The singleValueExtendedProperties property */
    get singleValueExtendedProperties() {
        return new SingleValueExtendedPropertiesRequestBuilder$2(this.pathParameters, this.requestAdapter);
    }
    /** The tasks property */
    get tasks() {
        return new TasksRequestBuilder$1(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Delete navigation property taskFolders for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of task folders in the task group. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property taskFolders in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskFolder);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property taskFolders for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of task folders in the task group. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolder
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolder, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.multiValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a MultiValueLegacyExtendedPropertyItemRequestBuilder
     */
    multiValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["multiValueLegacyExtendedProperty%2Did"] = id;
        return new MultiValueLegacyExtendedPropertyItemRequestBuilder$2(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Update the navigation property taskFolders in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.singleValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a SingleValueLegacyExtendedPropertyItemRequestBuilder
     */
    singleValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["singleValueLegacyExtendedProperty%2Did"] = id;
        return new SingleValueLegacyExtendedPropertyItemRequestBuilder$2(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item.tasks.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskItemRequestBuilder
     */
    tasksById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTask%2Did"] = id;
        return new OutlookTaskItemRequestBuilder$1(urlTplParams, this.requestAdapter);
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders */
class TaskFoldersRequestBuilder {
    /**
     * Instantiates a new TaskFoldersRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get Outlook task folders in a specific outlookTaskGroup.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to taskFolders for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskFolder);
        return requestInfo;
    }
    ;
    /**
     * Get Outlook task folders in a specific outlookTaskGroup.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolderCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolderCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to taskFolders for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskFolder
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskFolder, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id} */
class OutlookTaskGroupItemRequestBuilder {
    /**
     * Instantiates a new OutlookTaskGroupItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The taskFolders property */
    get taskFolders() {
        return new TaskFoldersRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Delete navigation property taskGroups for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get taskGroups from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property taskGroups in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskGroup);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property taskGroups for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get taskGroups from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskGroup
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskGroup, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property taskGroups in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item.taskFolders.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskFolderItemRequestBuilder
     */
    taskFoldersById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTaskFolder%2Did"] = id;
        return new OutlookTaskFolderItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
}

function deserializeIntoOutlookTaskGroupCollectionResponse(outlookTaskGroupCollectionResponse = {}) {
    return {
        "@odata.nextLink": n => { outlookTaskGroupCollectionResponse.odataNextLink = n.getStringValue(); },
        "value": n => { outlookTaskGroupCollectionResponse.value = n.getCollectionOfObjectValuesFromMethod(deserializeIntoOutlookTaskGroup); },
    };
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/taskGroups */
class TaskGroupsRequestBuilder {
    /**
     * Instantiates a new TaskGroupsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the Outlook task groups in the user's mailbox. The response always includes the default task group `My Tasks`, and any other task groups that have been created in the mailbox.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create an Outlook task group in the user's mailbox.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTaskGroup);
        return requestInfo;
    }
    ;
    /**
     * Get all the Outlook task groups in the user's mailbox. The response always includes the default task group `My Tasks`, and any other task groups that have been created in the mailbox.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskGroupCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskGroupCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create an Outlook task group in the user's mailbox.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskGroup
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskGroup, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/attachments */
class AttachmentsRequestBuilder {
    /**
     * Instantiates a new AttachmentsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/attachments{?%24top,%24skip,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeAttachment);
        return requestInfo;
    }
    ;
    /**
     * Get a list of attachment objects attached to an Outlook task.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of AttachmentCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachmentCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Use this API to add an attachment to an outlookTask. The attachment can be a file (of fileAttachment type) or Outlook item (itemAttachment type).
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/attachments/{attachment-id} */
class AttachmentItemRequestBuilder {
    /**
     * Instantiates a new AttachmentItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/attachments/{attachment%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property attachments for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the task.  Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of Attachment
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoAttachment, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id} */
class MultiValueLegacyExtendedPropertyItemRequestBuilder {
    /**
     * Instantiates a new MultiValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property multiValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property multiValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/multiValueExtendedProperties */
class MultiValueExtendedPropertiesRequestBuilder {
    /**
     * Instantiates a new MultiValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/multiValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of multi-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to multiValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of MultiValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoMultiValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id} */
class SingleValueLegacyExtendedPropertyItemRequestBuilder {
    /**
     * Instantiates a new SingleValueLegacyExtendedPropertyItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty%2Did}{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property singleValueExtendedProperties for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property singleValueExtendedProperties in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id}/singleValueExtendedProperties */
class SingleValueExtendedPropertiesRequestBuilder {
    /**
     * Instantiates a new SingleValueExtendedPropertiesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}/singleValueExtendedProperties{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSingleValueLegacyExtendedProperty);
        return requestInfo;
    }
    ;
    /**
     * The collection of single-value extended properties defined for the task. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedPropertyCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedPropertyCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create new navigation property to singleValueExtendedProperties for users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of SingleValueLegacyExtendedProperty
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoSingleValueLegacyExtendedProperty, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks/{outlookTask-id} */
class OutlookTaskItemRequestBuilder {
    /**
     * Instantiates a new OutlookTaskItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks/{outlookTask%2Did}{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The attachments property */
    get attachments() {
        return new AttachmentsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The multiValueExtendedProperties property */
    get multiValueExtendedProperties() {
        return new MultiValueExtendedPropertiesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The singleValueExtendedProperties property */
    get singleValueExtendedProperties() {
        return new SingleValueExtendedPropertiesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Gets an item from the ApiSdk.users.item.outlook.tasks.item.attachments.item collection
     * @param id Unique identifier of the item
     * @returns a AttachmentItemRequestBuilder
     */
    attachmentsById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["attachment%2Did"] = id;
        return new AttachmentItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get tasks from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property tasks for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get tasks from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.tasks.item.multiValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a MultiValueLegacyExtendedPropertyItemRequestBuilder
     */
    multiValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["multiValueLegacyExtendedProperty%2Did"] = id;
        return new MultiValueLegacyExtendedPropertyItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Update the navigation property tasks in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.tasks.item.singleValueExtendedProperties.item collection
     * @param id Unique identifier of the item
     * @returns a SingleValueLegacyExtendedPropertyItemRequestBuilder
     */
    singleValueExtendedPropertiesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["singleValueLegacyExtendedProperty%2Did"] = id;
        return new SingleValueLegacyExtendedPropertyItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook/tasks */
class TasksRequestBuilder {
    /**
     * Instantiates a new TasksRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook/tasks{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Get all the Outlook tasks in the user's mailbox. By default, this operation (and the POST, PATCH, and complete task operations) returns date-related properties in UTC.You can use the `Prefer: outlook.timezone` header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Create an Outlook task in the specified task folder. The POST method always ignores the time portion of **startDateTime** and **dueDateTime** in the request body, and assumes the time to be always midnight in the specified time zone.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPostRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOutlookTask);
        return requestInfo;
    }
    ;
    /**
     * Get all the Outlook tasks in the user's mailbox. By default, this operation (and the POST, PATCH, and complete task operations) returns date-related properties in UTC.You can use the `Prefer: outlook.timezone` header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTaskCollectionResponse
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTaskCollectionResponse, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Create an Outlook task in the specified task folder. The POST method always ignores the time portion of **startDateTime** and **dueDateTime** in the request body, and assumes the time to be always midnight in the specified time zone.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookTask
     */
    post(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPostRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookTask, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/outlook */
class OutlookRequestBuilder {
    /**
     * Instantiates a new OutlookRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/outlook{?%24select}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The masterCategories property */
    get masterCategories() {
        return new MasterCategoriesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The taskFolders property */
    get taskFolders() {
        return new TaskFoldersRequestBuilder$1(this.pathParameters, this.requestAdapter);
    }
    /** The taskGroups property */
    get taskGroups() {
        return new TaskGroupsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The tasks property */
    get tasks() {
        return new TasksRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Selective Outlook services available to the user. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Selective Outlook services available to the user. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of OutlookUser
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoOutlookUser, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.masterCategories.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookCategoryItemRequestBuilder
     */
    masterCategoriesById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookCategory%2Did"] = id;
        return new OutlookCategoryItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskFolders.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskFolderItemRequestBuilder
     */
    taskFoldersById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTaskFolder%2Did"] = id;
        return new OutlookTaskFolderItemRequestBuilder$1(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.taskGroups.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskGroupItemRequestBuilder
     */
    taskGroupsById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTaskGroup%2Did"] = id;
        return new OutlookTaskGroupItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
    /**
     * Gets an item from the ApiSdk.users.item.outlook.tasks.item collection
     * @param id Unique identifier of the item
     * @returns a OutlookTaskItemRequestBuilder
     */
    tasksById(id) {
        if (!id)
            throw new Error("id cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["outlookTask%2Did"] = id;
        return new OutlookTaskItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    ;
}

Reflect.defineProperty(UserItemRequestBuilder.prototype, "outlook", {
    configurable: true,
    enumerable: true,
    get: function () {
        return this.create(OutlookRequestBuilder);
    },
});

/** Builds and executes requests for operations under /users/{user-id}/settings/contactMergeSuggestions */
class ContactMergeSuggestionsRequestBuilder {
    /**
     * Instantiates a new ContactMergeSuggestionsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/settings/contactMergeSuggestions{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property contactMergeSuggestions for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Read the properties and relationships of a contactMergeSuggestions object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the properties of a contactMergeSuggestions object.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeContactMergeSuggestions);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property contactMergeSuggestions for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Read the properties and relationships of a contactMergeSuggestions object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of ContactMergeSuggestions
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoContactMergeSuggestions, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the properties of a contactMergeSuggestions object.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/settings/itemInsights */
class ItemInsightsRequestBuilder {
    /**
     * Instantiates a new ItemInsightsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/settings/itemInsights{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property itemInsights for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get the user-customizable privacy settings for itemInsights and meeting hours insights.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the privacy settings for itemInsights and meeting hours insights of a user.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUserInsightsSettings);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property itemInsights for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get the user-customizable privacy settings for itemInsights and meeting hours insights.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of UserInsightsSettings
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoUserInsightsSettings, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the privacy settings for itemInsights and meeting hours insights of a user.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/settings/regionalAndLanguageSettings */
class RegionalAndLanguageSettingsRequestBuilder {
    /**
     * Instantiates a new RegionalAndLanguageSettingsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/settings/regionalAndLanguageSettings{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property regionalAndLanguageSettings for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get the properties of a regionalAndLanguageSettings object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property regionalAndLanguageSettings in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeRegionalAndLanguageSettings);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property regionalAndLanguageSettings for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get the properties of a regionalAndLanguageSettings object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of RegionalAndLanguageSettings
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoRegionalAndLanguageSettings, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property regionalAndLanguageSettings in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/settings/shiftPreferences */
class ShiftPreferencesRequestBuilder {
    /**
     * Instantiates a new ShiftPreferencesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/settings/shiftPreferences{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    ;
    /**
     * Delete navigation property shiftPreferences for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Retrieve the properties and relationships of a shiftPreferences object by ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the properties and relationships of a shiftPreferences object.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeShiftPreferences);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property shiftPreferences for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Retrieve the properties and relationships of a shiftPreferences object by ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of ShiftPreferences
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoShiftPreferences, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the properties and relationships of a shiftPreferences object.
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

/** Builds and executes requests for operations under /users/{user-id}/settings */
class SettingsRequestBuilder {
    /**
     * Instantiates a new SettingsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    constructor(pathParameters, requestAdapter) {
        if (!pathParameters)
            throw new Error("pathParameters cannot be undefined");
        if (!requestAdapter)
            throw new Error("requestAdapter cannot be undefined");
        this.urlTemplate = "{+baseurl}/users/{user%2Did}/settings{?%24select,%24expand}";
        const urlTplParams = getPathParameters(pathParameters);
        this.pathParameters = urlTplParams;
        this.requestAdapter = requestAdapter;
    }
    /** The contactMergeSuggestions property */
    get contactMergeSuggestions() {
        return new ContactMergeSuggestionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The itemInsights property */
    get itemInsights() {
        return new ItemInsightsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The regionalAndLanguageSettings property */
    get regionalAndLanguageSettings() {
        return new RegionalAndLanguageSettingsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /** The shiftPreferences property */
    get shiftPreferences() {
        return new ShiftPreferencesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    ;
    /**
     * Delete navigation property settings for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createDeleteRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Get settings from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createGetRequestInformation(requestConfiguration) {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = "application/json";
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    }
    ;
    /**
     * Update the navigation property settings in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    createPatchRequestInformation(body, requestConfiguration) {
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUserSettings);
        return requestInfo;
    }
    ;
    /**
     * Delete navigation property settings for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    delete(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createDeleteRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Get settings from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     * @returns a Promise of UserSettings
     */
    get(requestConfiguration, responseHandler) {
        var _a, _b;
        const requestInfo = this.createGetRequestInformation(requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendAsync(requestInfo, deserializeIntoUserSettings, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
    /**
     * Update the navigation property settings in users
     * @param body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @param responseHandler Response handler to use in place of the default response handling provided by the core service
     */
    patch(body, requestConfiguration, responseHandler) {
        var _a, _b;
        if (!body)
            throw new Error("body cannot be undefined");
        const requestInfo = this.createPatchRequestInformation(body, requestConfiguration);
        return (_b = (_a = this.requestAdapter) === null || _a === void 0 ? void 0 : _a.sendNoResponseContentAsync(requestInfo, responseHandler, {})) !== null && _b !== void 0 ? _b : Promise.reject(new Error('request adapter is null'));
    }
    ;
}

Reflect.defineProperty(UserItemRequestBuilder.prototype, "settings", {
    configurable: true,
    enumerable: true,
    get: function () {
        return this.create(SettingsRequestBuilder);
    },
});

async function test() {
    await apiClient.usersById("").settings.contactMergeSuggestions.createDeleteRequestInformation();
    //const response = await apiClient.usersById("").outlook.get();
    // console.log(response);
    // const s = response?.additionalData;
}
test().then();
