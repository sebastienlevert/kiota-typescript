import {ChassisType} from './chassisType';
import {ComplianceState} from './complianceState';
import {DeviceEnrollmentType} from './deviceEnrollmentType';
import {DeviceManagementExchangeAccessState} from './deviceManagementExchangeAccessState';
import {DeviceManagementExchangeAccessStateReason} from './deviceManagementExchangeAccessStateReason';
import {DeviceRegistrationState} from './deviceRegistrationState';
import {DeviceType} from './deviceType';
import {ManagedDevice} from './index';
import {JoinType} from './joinType';
import {LostModeState} from './lostModeState';
import {ManagedDeviceArchitecture} from './managedDeviceArchitecture';
import {ManagedDeviceManagementFeatures} from './managedDeviceManagementFeatures';
import {ManagedDeviceOwnerType} from './managedDeviceOwnerType';
import {ManagedDevicePartnerReportedHealthState} from './managedDevicePartnerReportedHealthState';
import {ManagementAgentType} from './managementAgentType';
import {ManagementState} from './managementState';
import {OwnerType} from './ownerType';
import {serializeAssignmentFilterEvaluationStatusDetails} from './serializeAssignmentFilterEvaluationStatusDetails';
import {serializeChromeOSDeviceProperty} from './serializeChromeOSDeviceProperty';
import {serializeCloudPcRemoteActionResult} from './serializeCloudPcRemoteActionResult';
import {serializeConfigurationManagerClientEnabledFeatures} from './serializeConfigurationManagerClientEnabledFeatures';
import {serializeConfigurationManagerClientHealthState} from './serializeConfigurationManagerClientHealthState';
import {serializeConfigurationManagerClientInformation} from './serializeConfigurationManagerClientInformation';
import {serializeDetectedApp} from './serializeDetectedApp';
import {serializeDeviceActionResult} from './serializeDeviceActionResult';
import {serializeDeviceCategory} from './serializeDeviceCategory';
import {serializeDeviceCompliancePolicyState} from './serializeDeviceCompliancePolicyState';
import {serializeDeviceConfigurationState} from './serializeDeviceConfigurationState';
import {serializeDeviceHealthAttestationState} from './serializeDeviceHealthAttestationState';
import {serializeDeviceLogCollectionResponse} from './serializeDeviceLogCollectionResponse';
import {serializeEntity} from './serializeEntity';
import {serializeHardwareInformation} from './serializeHardwareInformation';
import {serializeLoggedOnUser} from './serializeLoggedOnUser';
import {serializeManagedDeviceMobileAppConfigurationState} from './serializeManagedDeviceMobileAppConfigurationState';
import {serializeSecurityBaselineState} from './serializeSecurityBaselineState';
import {serializeUser} from './serializeUser';
import {serializeWindowsProtectionState} from './serializeWindowsProtectionState';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeManagedDevice(writer: SerializationWriter, managedDevice: ManagedDevice | undefined = {}) : void {
        serializeEntity(writer, managedDevice)
            writer.writeBooleanValue("aadRegistered", managedDevice.aadRegistered);
            writer.writeStringValue("activationLockBypassCode", managedDevice.activationLockBypassCode);
            writer.writeStringValue("androidSecurityPatchLevel", managedDevice.androidSecurityPatchLevel);
            writer.writeCollectionOfObjectValuesFromMethod("assignmentFilterEvaluationStatusDetails", managedDevice.assignmentFilterEvaluationStatusDetails as any, serializeAssignmentFilterEvaluationStatusDetails);
            writer.writeBooleanValue("autopilotEnrolled", managedDevice.autopilotEnrolled);
            writer.writeStringValue("azureActiveDirectoryDeviceId", managedDevice.azureActiveDirectoryDeviceId);
            writer.writeStringValue("azureADDeviceId", managedDevice.azureADDeviceId);
            writer.writeBooleanValue("azureADRegistered", managedDevice.azureADRegistered);
            writer.writeBooleanValue("bootstrapTokenEscrowed", managedDevice.bootstrapTokenEscrowed);
            writer.writeEnumValue<ChassisType>("chassisType", managedDevice.chassisType);
            writer.writeCollectionOfObjectValuesFromMethod("chromeOSDeviceInfo", managedDevice.chromeOSDeviceInfo as any, serializeChromeOSDeviceProperty);
            writer.writeCollectionOfObjectValuesFromMethod("cloudPcRemoteActionResults", managedDevice.cloudPcRemoteActionResults as any, serializeCloudPcRemoteActionResult);
            writer.writeDateValue("complianceGracePeriodExpirationDateTime", managedDevice.complianceGracePeriodExpirationDateTime);
            writer.writeEnumValue<ComplianceState>("complianceState", managedDevice.complianceState);
            writer.writeObjectValueFromMethod("configurationManagerClientEnabledFeatures", managedDevice.configurationManagerClientEnabledFeatures as any, serializeConfigurationManagerClientEnabledFeatures);
            writer.writeObjectValueFromMethod("configurationManagerClientHealthState", managedDevice.configurationManagerClientHealthState as any, serializeConfigurationManagerClientHealthState);
            writer.writeObjectValueFromMethod("configurationManagerClientInformation", managedDevice.configurationManagerClientInformation as any, serializeConfigurationManagerClientInformation);
            writer.writeCollectionOfObjectValuesFromMethod("detectedApps", managedDevice.detectedApps as any, serializeDetectedApp);
            writer.writeCollectionOfObjectValuesFromMethod("deviceActionResults", managedDevice.deviceActionResults as any, serializeDeviceActionResult);
            writer.writeObjectValueFromMethod("deviceCategory", managedDevice.deviceCategory as any, serializeDeviceCategory);
            writer.writeStringValue("deviceCategoryDisplayName", managedDevice.deviceCategoryDisplayName);
            writer.writeCollectionOfObjectValuesFromMethod("deviceCompliancePolicyStates", managedDevice.deviceCompliancePolicyStates as any, serializeDeviceCompliancePolicyState);
            writer.writeCollectionOfObjectValuesFromMethod("deviceConfigurationStates", managedDevice.deviceConfigurationStates as any, serializeDeviceConfigurationState);
            writer.writeEnumValue<DeviceEnrollmentType>("deviceEnrollmentType", managedDevice.deviceEnrollmentType);
            writer.writeBooleanValue("deviceFirmwareConfigurationInterfaceManaged", managedDevice.deviceFirmwareConfigurationInterfaceManaged);
            writer.writeObjectValueFromMethod("deviceHealthAttestationState", managedDevice.deviceHealthAttestationState as any, serializeDeviceHealthAttestationState);
            writer.writeStringValue("deviceName", managedDevice.deviceName);
            writer.writeEnumValue<DeviceRegistrationState>("deviceRegistrationState", managedDevice.deviceRegistrationState);
            writer.writeEnumValue<DeviceType>("deviceType", managedDevice.deviceType);
            writer.writeBooleanValue("easActivated", managedDevice.easActivated);
            writer.writeDateValue("easActivationDateTime", managedDevice.easActivationDateTime);
            writer.writeStringValue("easDeviceId", managedDevice.easDeviceId);
            writer.writeStringValue("emailAddress", managedDevice.emailAddress);
            writer.writeDateValue("enrolledDateTime", managedDevice.enrolledDateTime);
            writer.writeStringValue("enrollmentProfileName", managedDevice.enrollmentProfileName);
            writer.writeStringValue("ethernetMacAddress", managedDevice.ethernetMacAddress);
            writer.writeEnumValue<DeviceManagementExchangeAccessState>("exchangeAccessState", managedDevice.exchangeAccessState);
            writer.writeEnumValue<DeviceManagementExchangeAccessStateReason>("exchangeAccessStateReason", managedDevice.exchangeAccessStateReason);
            writer.writeDateValue("exchangeLastSuccessfulSyncDateTime", managedDevice.exchangeLastSuccessfulSyncDateTime);
            writer.writeNumberValue("freeStorageSpaceInBytes", managedDevice.freeStorageSpaceInBytes);
            writer.writeObjectValueFromMethod("hardwareInformation", managedDevice.hardwareInformation as any, serializeHardwareInformation);
            writer.writeStringValue("iccid", managedDevice.iccid);
            writer.writeStringValue("imei", managedDevice.imei);
            writer.writeBooleanValue("isEncrypted", managedDevice.isEncrypted);
            writer.writeBooleanValue("isSupervised", managedDevice.isSupervised);
            writer.writeStringValue("jailBroken", managedDevice.jailBroken);
            writer.writeEnumValue<JoinType>("joinType", managedDevice.joinType);
            writer.writeDateValue("lastSyncDateTime", managedDevice.lastSyncDateTime);
            writer.writeCollectionOfObjectValuesFromMethod("logCollectionRequests", managedDevice.logCollectionRequests as any, serializeDeviceLogCollectionResponse);
            writer.writeEnumValue<LostModeState>("lostModeState", managedDevice.lostModeState);
            writer.writeCollectionOfObjectValuesFromMethod("managedDeviceMobileAppConfigurationStates", managedDevice.managedDeviceMobileAppConfigurationStates as any, serializeManagedDeviceMobileAppConfigurationState);
            writer.writeStringValue("managedDeviceName", managedDevice.managedDeviceName);
            writer.writeEnumValue<ManagedDeviceOwnerType>("managedDeviceOwnerType", managedDevice.managedDeviceOwnerType);
            writer.writeEnumValue<ManagementAgentType>("managementAgent", managedDevice.managementAgent);
            writer.writeDateValue("managementCertificateExpirationDate", managedDevice.managementCertificateExpirationDate);
            writer.writeEnumValue<ManagedDeviceManagementFeatures>("managementFeatures", managedDevice.managementFeatures);
            writer.writeEnumValue<ManagementState>("managementState", managedDevice.managementState);
            writer.writeStringValue("manufacturer", managedDevice.manufacturer);
            writer.writeStringValue("meid", managedDevice.meid);
            writer.writeStringValue("model", managedDevice.model);
            writer.writeStringValue("notes", managedDevice.notes);
            writer.writeStringValue("operatingSystem", managedDevice.operatingSystem);
            writer.writeStringValue("osVersion", managedDevice.osVersion);
            writer.writeEnumValue<OwnerType>("ownerType", managedDevice.ownerType);
            writer.writeEnumValue<ManagedDevicePartnerReportedHealthState>("partnerReportedThreatState", managedDevice.partnerReportedThreatState);
            writer.writeStringValue("phoneNumber", managedDevice.phoneNumber);
            writer.writeNumberValue("physicalMemoryInBytes", managedDevice.physicalMemoryInBytes);
            writer.writeDateValue("preferMdmOverGroupPolicyAppliedDateTime", managedDevice.preferMdmOverGroupPolicyAppliedDateTime);
            writer.writeEnumValue<ManagedDeviceArchitecture>("processorArchitecture", managedDevice.processorArchitecture);
            writer.writeStringValue("remoteAssistanceSessionErrorDetails", managedDevice.remoteAssistanceSessionErrorDetails);
            writer.writeStringValue("remoteAssistanceSessionUrl", managedDevice.remoteAssistanceSessionUrl);
            writer.writeBooleanValue("requireUserEnrollmentApproval", managedDevice.requireUserEnrollmentApproval);
            writer.writeDateValue("retireAfterDateTime", managedDevice.retireAfterDateTime);
            writer.writeCollectionOfPrimitiveValues<string>("roleScopeTagIds", managedDevice.roleScopeTagIds);
            writer.writeCollectionOfObjectValuesFromMethod("securityBaselineStates", managedDevice.securityBaselineStates as any, serializeSecurityBaselineState);
            writer.writeStringValue("serialNumber", managedDevice.serialNumber);
            writer.writeStringValue("skuFamily", managedDevice.skuFamily);
            writer.writeNumberValue("skuNumber", managedDevice.skuNumber);
            writer.writeStringValue("specificationVersion", managedDevice.specificationVersion);
            writer.writeStringValue("subscriberCarrier", managedDevice.subscriberCarrier);
            writer.writeNumberValue("totalStorageSpaceInBytes", managedDevice.totalStorageSpaceInBytes);
            writer.writeStringValue("udid", managedDevice.udid);
            writer.writeStringValue("userDisplayName", managedDevice.userDisplayName);
            writer.writeStringValue("userId", managedDevice.userId);
            writer.writeStringValue("userPrincipalName", managedDevice.userPrincipalName);
            writer.writeCollectionOfObjectValuesFromMethod("users", managedDevice.users as any, serializeUser);
            writer.writeCollectionOfObjectValuesFromMethod("usersLoggedOn", managedDevice.usersLoggedOn as any, serializeLoggedOnUser);
            writer.writeStringValue("wiFiMacAddress", managedDevice.wiFiMacAddress);
            writer.writeNumberValue("windowsActiveMalwareCount", managedDevice.windowsActiveMalwareCount);
            writer.writeObjectValueFromMethod("windowsProtectionState", managedDevice.windowsProtectionState as any, serializeWindowsProtectionState);
            writer.writeNumberValue("windowsRemediatedMalwareCount", managedDevice.windowsRemediatedMalwareCount);
}
