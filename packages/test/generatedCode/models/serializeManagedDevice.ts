import {ComplianceState} from './complianceState';
import {DeviceEnrollmentType} from './deviceEnrollmentType';
import {DeviceManagementExchangeAccessState} from './deviceManagementExchangeAccessState';
import {DeviceManagementExchangeAccessStateReason} from './deviceManagementExchangeAccessStateReason';
import {DeviceRegistrationState} from './deviceRegistrationState';
import {ManagedDevice} from './index';
import {ManagedDeviceOwnerType} from './managedDeviceOwnerType';
import {ManagedDevicePartnerReportedHealthState} from './managedDevicePartnerReportedHealthState';
import {ManagementAgentType} from './managementAgentType';
import {serializeConfigurationManagerClientEnabledFeatures} from './serializeConfigurationManagerClientEnabledFeatures';
import {serializeDeviceActionResult} from './serializeDeviceActionResult';
import {serializeDeviceCategory} from './serializeDeviceCategory';
import {serializeDeviceCompliancePolicyState} from './serializeDeviceCompliancePolicyState';
import {serializeDeviceConfigurationState} from './serializeDeviceConfigurationState';
import {serializeDeviceHealthAttestationState} from './serializeDeviceHealthAttestationState';
import {serializeEntity} from './serializeEntity';
import {serializeUser} from './serializeUser';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeManagedDevice(writer: SerializationWriter, managedDevice: ManagedDevice | undefined = {}) : void {
        serializeEntity(writer, managedDevice)
            writer.writeStringValue("activationLockBypassCode", managedDevice.activationLockBypassCode);
            writer.writeStringValue("androidSecurityPatchLevel", managedDevice.androidSecurityPatchLevel);
            writer.writeStringValue("azureADDeviceId", managedDevice.azureADDeviceId);
            writer.writeBooleanValue("azureADRegistered", managedDevice.azureADRegistered);
            writer.writeDateValue("complianceGracePeriodExpirationDateTime", managedDevice.complianceGracePeriodExpirationDateTime);
            writer.writeEnumValue<ComplianceState>("complianceState", managedDevice.complianceState);
            writer.writeObjectValueFromMethod("configurationManagerClientEnabledFeatures", managedDevice.configurationManagerClientEnabledFeatures as any, serializeConfigurationManagerClientEnabledFeatures);
            writer.writeCollectionOfObjectValuesFromMethod("deviceActionResults", managedDevice.deviceActionResults as any, serializeDeviceActionResult);
            writer.writeObjectValueFromMethod("deviceCategory", managedDevice.deviceCategory as any, serializeDeviceCategory);
            writer.writeStringValue("deviceCategoryDisplayName", managedDevice.deviceCategoryDisplayName);
            writer.writeCollectionOfObjectValuesFromMethod("deviceCompliancePolicyStates", managedDevice.deviceCompliancePolicyStates as any, serializeDeviceCompliancePolicyState);
            writer.writeCollectionOfObjectValuesFromMethod("deviceConfigurationStates", managedDevice.deviceConfigurationStates as any, serializeDeviceConfigurationState);
            writer.writeEnumValue<DeviceEnrollmentType>("deviceEnrollmentType", managedDevice.deviceEnrollmentType);
            writer.writeObjectValueFromMethod("deviceHealthAttestationState", managedDevice.deviceHealthAttestationState as any, serializeDeviceHealthAttestationState);
            writer.writeStringValue("deviceName", managedDevice.deviceName);
            writer.writeEnumValue<DeviceRegistrationState>("deviceRegistrationState", managedDevice.deviceRegistrationState);
            writer.writeBooleanValue("easActivated", managedDevice.easActivated);
            writer.writeDateValue("easActivationDateTime", managedDevice.easActivationDateTime);
            writer.writeStringValue("easDeviceId", managedDevice.easDeviceId);
            writer.writeStringValue("emailAddress", managedDevice.emailAddress);
            writer.writeDateValue("enrolledDateTime", managedDevice.enrolledDateTime);
            writer.writeStringValue("ethernetMacAddress", managedDevice.ethernetMacAddress);
            writer.writeEnumValue<DeviceManagementExchangeAccessState>("exchangeAccessState", managedDevice.exchangeAccessState);
            writer.writeEnumValue<DeviceManagementExchangeAccessStateReason>("exchangeAccessStateReason", managedDevice.exchangeAccessStateReason);
            writer.writeDateValue("exchangeLastSuccessfulSyncDateTime", managedDevice.exchangeLastSuccessfulSyncDateTime);
            writer.writeNumberValue("freeStorageSpaceInBytes", managedDevice.freeStorageSpaceInBytes);
            writer.writeStringValue("iccid", managedDevice.iccid);
            writer.writeStringValue("imei", managedDevice.imei);
            writer.writeBooleanValue("isEncrypted", managedDevice.isEncrypted);
            writer.writeBooleanValue("isSupervised", managedDevice.isSupervised);
            writer.writeStringValue("jailBroken", managedDevice.jailBroken);
            writer.writeDateValue("lastSyncDateTime", managedDevice.lastSyncDateTime);
            writer.writeStringValue("managedDeviceName", managedDevice.managedDeviceName);
            writer.writeEnumValue<ManagedDeviceOwnerType>("managedDeviceOwnerType", managedDevice.managedDeviceOwnerType);
            writer.writeEnumValue<ManagementAgentType>("managementAgent", managedDevice.managementAgent);
            writer.writeDateValue("managementCertificateExpirationDate", managedDevice.managementCertificateExpirationDate);
            writer.writeStringValue("manufacturer", managedDevice.manufacturer);
            writer.writeStringValue("meid", managedDevice.meid);
            writer.writeStringValue("model", managedDevice.model);
            writer.writeStringValue("notes", managedDevice.notes);
            writer.writeStringValue("operatingSystem", managedDevice.operatingSystem);
            writer.writeStringValue("osVersion", managedDevice.osVersion);
            writer.writeEnumValue<ManagedDevicePartnerReportedHealthState>("partnerReportedThreatState", managedDevice.partnerReportedThreatState);
            writer.writeStringValue("phoneNumber", managedDevice.phoneNumber);
            writer.writeNumberValue("physicalMemoryInBytes", managedDevice.physicalMemoryInBytes);
            writer.writeStringValue("remoteAssistanceSessionErrorDetails", managedDevice.remoteAssistanceSessionErrorDetails);
            writer.writeStringValue("remoteAssistanceSessionUrl", managedDevice.remoteAssistanceSessionUrl);
            writer.writeBooleanValue("requireUserEnrollmentApproval", managedDevice.requireUserEnrollmentApproval);
            writer.writeStringValue("serialNumber", managedDevice.serialNumber);
            writer.writeStringValue("subscriberCarrier", managedDevice.subscriberCarrier);
            writer.writeNumberValue("totalStorageSpaceInBytes", managedDevice.totalStorageSpaceInBytes);
            writer.writeStringValue("udid", managedDevice.udid);
            writer.writeStringValue("userDisplayName", managedDevice.userDisplayName);
            writer.writeStringValue("userId", managedDevice.userId);
            writer.writeStringValue("userPrincipalName", managedDevice.userPrincipalName);
            writer.writeCollectionOfObjectValuesFromMethod("users", managedDevice.users as any, serializeUser);
            writer.writeStringValue("wiFiMacAddress", managedDevice.wiFiMacAddress);
}
