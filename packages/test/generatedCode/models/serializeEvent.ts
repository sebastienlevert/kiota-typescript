import {EventType} from './eventType';
import {FreeBusyStatus} from './freeBusyStatus';
import {Importance} from './importance';
import {Event} from './index';
import {OnlineMeetingProviderType} from './onlineMeetingProviderType';
import {Sensitivity} from './sensitivity';
import {serializeAttachment} from './serializeAttachment';
import {serializeAttendee} from './serializeAttendee';
import {serializeCalendar} from './serializeCalendar';
import {serializeDateTimeTimeZone} from './serializeDateTimeTimeZone';
import {serializeExtension} from './serializeExtension';
import {serializeItemBody} from './serializeItemBody';
import {serializeLocation} from './serializeLocation';
import {serializeMultiValueLegacyExtendedProperty} from './serializeMultiValueLegacyExtendedProperty';
import {serializeOnlineMeetingInfo} from './serializeOnlineMeetingInfo';
import {serializeOutlookItem} from './serializeOutlookItem';
import {serializePatternedRecurrence} from './serializePatternedRecurrence';
import {serializeRecipient} from './serializeRecipient';
import {serializeResponseStatus} from './serializeResponseStatus';
import {serializeSingleValueLegacyExtendedProperty} from './serializeSingleValueLegacyExtendedProperty';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeEvent(writer: SerializationWriter, event: Event | undefined = {}) : void {
        serializeOutlookItem(writer, event)
            writer.writeBooleanValue("allowNewTimeProposals", event.allowNewTimeProposals);
            writer.writeCollectionOfObjectValuesFromMethod("attachments", event.attachments as any, serializeAttachment);
            writer.writeCollectionOfObjectValuesFromMethod("attendees", event.attendees as any, serializeAttendee);
            writer.writeObjectValueFromMethod("body", event.body as any, serializeItemBody);
            writer.writeStringValue("bodyPreview", event.bodyPreview);
            writer.writeObjectValueFromMethod("calendar", event.calendar as any, serializeCalendar);
            writer.writeObjectValueFromMethod("end", event.end as any, serializeDateTimeTimeZone);
            writer.writeCollectionOfObjectValuesFromMethod("extensions", event.extensions as any, serializeExtension);
            writer.writeBooleanValue("hasAttachments", event.hasAttachments);
            writer.writeBooleanValue("hideAttendees", event.hideAttendees);
            writer.writeStringValue("iCalUId", event.iCalUId);
            writer.writeEnumValue<Importance>("importance", event.importance);
            writer.writeCollectionOfObjectValuesFromMethod("instances", event.instances as any, serializeEvent);
            writer.writeBooleanValue("isAllDay", event.isAllDay);
            writer.writeBooleanValue("isCancelled", event.isCancelled);
            writer.writeBooleanValue("isDraft", event.isDraft);
            writer.writeBooleanValue("isOnlineMeeting", event.isOnlineMeeting);
            writer.writeBooleanValue("isOrganizer", event.isOrganizer);
            writer.writeBooleanValue("isReminderOn", event.isReminderOn);
            writer.writeObjectValueFromMethod("location", event.location as any, serializeLocation);
            writer.writeCollectionOfObjectValuesFromMethod("locations", event.locations as any, serializeLocation);
            writer.writeCollectionOfObjectValuesFromMethod("multiValueExtendedProperties", event.multiValueExtendedProperties as any, serializeMultiValueLegacyExtendedProperty);
            writer.writeObjectValueFromMethod("onlineMeeting", event.onlineMeeting as any, serializeOnlineMeetingInfo);
            writer.writeEnumValue<OnlineMeetingProviderType>("onlineMeetingProvider", event.onlineMeetingProvider);
            writer.writeStringValue("onlineMeetingUrl", event.onlineMeetingUrl);
            writer.writeObjectValueFromMethod("organizer", event.organizer as any, serializeRecipient);
            writer.writeStringValue("originalEndTimeZone", event.originalEndTimeZone);
            writer.writeDateValue("originalStart", event.originalStart);
            writer.writeStringValue("originalStartTimeZone", event.originalStartTimeZone);
            writer.writeObjectValueFromMethod("recurrence", event.recurrence as any, serializePatternedRecurrence);
            writer.writeNumberValue("reminderMinutesBeforeStart", event.reminderMinutesBeforeStart);
            writer.writeBooleanValue("responseRequested", event.responseRequested);
            writer.writeObjectValueFromMethod("responseStatus", event.responseStatus as any, serializeResponseStatus);
            writer.writeEnumValue<Sensitivity>("sensitivity", event.sensitivity);
            writer.writeStringValue("seriesMasterId", event.seriesMasterId);
            writer.writeEnumValue<FreeBusyStatus>("showAs", event.showAs);
            writer.writeCollectionOfObjectValuesFromMethod("singleValueExtendedProperties", event.singleValueExtendedProperties as any, serializeSingleValueLegacyExtendedProperty);
            writer.writeObjectValueFromMethod("start", event.start as any, serializeDateTimeTimeZone);
            writer.writeStringValue("subject", event.subject);
            writer.writeStringValue("transactionId", event.transactionId);
            writer.writeEnumValue<EventType>("type", event.type);
            writer.writeStringValue("webLink", event.webLink);
}
