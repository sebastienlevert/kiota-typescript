import {EducationExternalSource} from './educationExternalSource';
import {EducationUserRole} from './educationUserRole';
import {EducationUser} from './index';
import {serializeAssignedLicense} from './serializeAssignedLicense';
import {serializeAssignedPlan} from './serializeAssignedPlan';
import {serializeEducationAssignment} from './serializeEducationAssignment';
import {serializeEducationClass} from './serializeEducationClass';
import {serializeEducationOnPremisesInfo} from './serializeEducationOnPremisesInfo';
import {serializeEducationRubric} from './serializeEducationRubric';
import {serializeEducationSchool} from './serializeEducationSchool';
import {serializeEducationStudent} from './serializeEducationStudent';
import {serializeEducationTeacher} from './serializeEducationTeacher';
import {serializeEntity} from './serializeEntity';
import {serializeIdentitySet} from './serializeIdentitySet';
import {serializePasswordProfile} from './serializePasswordProfile';
import {serializePhysicalAddress} from './serializePhysicalAddress';
import {serializeProvisionedPlan} from './serializeProvisionedPlan';
import {serializeRelatedContact} from './serializeRelatedContact';
import {serializeUser} from './serializeUser';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeEducationUser(writer: SerializationWriter, educationUser: EducationUser | undefined = {}) : void {
        serializeEntity(writer, educationUser)
            writer.writeBooleanValue("accountEnabled", educationUser.accountEnabled);
            writer.writeCollectionOfObjectValuesFromMethod("assignedLicenses", educationUser.assignedLicenses as any, serializeAssignedLicense);
            writer.writeCollectionOfObjectValuesFromMethod("assignedPlans", educationUser.assignedPlans as any, serializeAssignedPlan);
            writer.writeCollectionOfObjectValuesFromMethod("assignments", educationUser.assignments as any, serializeEducationAssignment);
            writer.writeCollectionOfPrimitiveValues<string>("businessPhones", educationUser.businessPhones);
            writer.writeCollectionOfObjectValuesFromMethod("classes", educationUser.classes as any, serializeEducationClass);
            writer.writeObjectValueFromMethod("createdBy", educationUser.createdBy as any, serializeIdentitySet);
            writer.writeStringValue("department", educationUser.department);
            writer.writeStringValue("displayName", educationUser.displayName);
            writer.writeEnumValue<EducationExternalSource>("externalSource", educationUser.externalSource);
            writer.writeStringValue("externalSourceDetail", educationUser.externalSourceDetail);
            writer.writeStringValue("givenName", educationUser.givenName);
            writer.writeStringValue("mail", educationUser.mail);
            writer.writeObjectValueFromMethod("mailingAddress", educationUser.mailingAddress as any, serializePhysicalAddress);
            writer.writeStringValue("mailNickname", educationUser.mailNickname);
            writer.writeStringValue("middleName", educationUser.middleName);
            writer.writeStringValue("mobilePhone", educationUser.mobilePhone);
            writer.writeStringValue("officeLocation", educationUser.officeLocation);
            writer.writeObjectValueFromMethod("onPremisesInfo", educationUser.onPremisesInfo as any, serializeEducationOnPremisesInfo);
            writer.writeStringValue("passwordPolicies", educationUser.passwordPolicies);
            writer.writeObjectValueFromMethod("passwordProfile", educationUser.passwordProfile as any, serializePasswordProfile);
            writer.writeStringValue("preferredLanguage", educationUser.preferredLanguage);
            writer.writeEnumValue<EducationUserRole>("primaryRole", educationUser.primaryRole);
            writer.writeCollectionOfObjectValuesFromMethod("provisionedPlans", educationUser.provisionedPlans as any, serializeProvisionedPlan);
            writer.writeDateValue("refreshTokensValidFromDateTime", educationUser.refreshTokensValidFromDateTime);
            writer.writeCollectionOfObjectValuesFromMethod("relatedContacts", educationUser.relatedContacts as any, serializeRelatedContact);
            writer.writeObjectValueFromMethod("residenceAddress", educationUser.residenceAddress as any, serializePhysicalAddress);
            writer.writeCollectionOfObjectValuesFromMethod("rubrics", educationUser.rubrics as any, serializeEducationRubric);
            writer.writeCollectionOfObjectValuesFromMethod("schools", educationUser.schools as any, serializeEducationSchool);
            writer.writeBooleanValue("showInAddressList", educationUser.showInAddressList);
            writer.writeObjectValueFromMethod("student", educationUser.student as any, serializeEducationStudent);
            writer.writeStringValue("surname", educationUser.surname);
            writer.writeCollectionOfObjectValuesFromMethod("taughtClasses", educationUser.taughtClasses as any, serializeEducationClass);
            writer.writeObjectValueFromMethod("teacher", educationUser.teacher as any, serializeEducationTeacher);
            writer.writeStringValue("usageLocation", educationUser.usageLocation);
            writer.writeObjectValueFromMethod("user", educationUser.user as any, serializeUser);
            writer.writeStringValue("userPrincipalName", educationUser.userPrincipalName);
            writer.writeStringValue("userType", educationUser.userType);
}
