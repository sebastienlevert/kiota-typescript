import {createLocaleInfoFromDiscriminatorValue} from './createLocaleInfoFromDiscriminatorValue';
import {ItemFacet, LocaleInfo} from './index';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class UserAccountInformation extends ItemFacet implements Parsable {
    /** Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed. */
    private _ageGroup?: string | undefined;
    /** Contains the two-character country code associated with the users account. */
    private _countryCode?: string | undefined;
    /** The preferredLanguageTag property */
    private _preferredLanguageTag?: LocaleInfo | undefined;
    /** The user principal name (UPN) of the user associated with the account. */
    private _userPrincipalName?: string | undefined;
    /**
     * Gets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @returns a string
     */
    public get ageGroup() {
        return this._ageGroup;
    };
    /**
     * Sets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and cannot be changed.
     * @param value Value to set for the ageGroup property.
     */
    public set ageGroup(value: string | undefined) {
        this._ageGroup = value;
    };
    /**
     * Instantiates a new userAccountInformation and sets the default values.
     */
    public constructor() {
        super();
    };
    /**
     * Gets the countryCode property value. Contains the two-character country code associated with the users account.
     * @returns a string
     */
    public get countryCode() {
        return this._countryCode;
    };
    /**
     * Sets the countryCode property value. Contains the two-character country code associated with the users account.
     * @param value Value to set for the countryCode property.
     */
    public set countryCode(value: string | undefined) {
        this._countryCode = value;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {...super.getFieldDeserializers(),
            "ageGroup": n => { this.ageGroup = n.getStringValue(); },
            "countryCode": n => { this.countryCode = n.getStringValue(); },
            "preferredLanguageTag": n => { this.preferredLanguageTag = n.getObjectValue<LocaleInfo>(createLocaleInfoFromDiscriminatorValue); },
            "userPrincipalName": n => { this.userPrincipalName = n.getStringValue(); },
        };
    };
    /**
     * Gets the preferredLanguageTag property value. The preferredLanguageTag property
     * @returns a localeInfo
     */
    public get preferredLanguageTag() {
        return this._preferredLanguageTag;
    };
    /**
     * Sets the preferredLanguageTag property value. The preferredLanguageTag property
     * @param value Value to set for the preferredLanguageTag property.
     */
    public set preferredLanguageTag(value: LocaleInfo | undefined) {
        this._preferredLanguageTag = value;
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        super.serialize(writer);
        writer.writeStringValue("ageGroup", this.ageGroup);
        writer.writeStringValue("countryCode", this.countryCode);
        writer.writeObjectValue<LocaleInfo>("preferredLanguageTag", this.preferredLanguageTag);
        writer.writeStringValue("userPrincipalName", this.userPrincipalName);
    };
    /**
     * Gets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @returns a string
     */
    public get userPrincipalName() {
        return this._userPrincipalName;
    };
    /**
     * Sets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @param value Value to set for the userPrincipalName property.
     */
    public set userPrincipalName(value: string | undefined) {
        this._userPrincipalName = value;
    };
}
