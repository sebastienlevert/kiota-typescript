import {Application} from './index';
import {serializeAddIn} from './serializeAddIn';
import {serializeApiApplication} from './serializeApiApplication';
import {serializeAppRole} from './serializeAppRole';
import {serializeCertification} from './serializeCertification';
import {serializeDirectoryObject} from './serializeDirectoryObject';
import {serializeExtensionProperty} from './serializeExtensionProperty';
import {serializeFederatedIdentityCredential} from './serializeFederatedIdentityCredential';
import {serializeHomeRealmDiscoveryPolicy} from './serializeHomeRealmDiscoveryPolicy';
import {serializeInformationalUrl} from './serializeInformationalUrl';
import {serializeKeyCredential} from './serializeKeyCredential';
import {serializeOptionalClaims} from './serializeOptionalClaims';
import {serializeParentalControlSettings} from './serializeParentalControlSettings';
import {serializePasswordCredential} from './serializePasswordCredential';
import {serializePublicClientApplication} from './serializePublicClientApplication';
import {serializeRequiredResourceAccess} from './serializeRequiredResourceAccess';
import {serializeSpaApplication} from './serializeSpaApplication';
import {serializeTokenIssuancePolicy} from './serializeTokenIssuancePolicy';
import {serializeTokenLifetimePolicy} from './serializeTokenLifetimePolicy';
import {serializeVerifiedPublisher} from './serializeVerifiedPublisher';
import {serializeWebApplication} from './serializeWebApplication';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeApplication(writer: SerializationWriter, application: Application | undefined = {}) : void {
        serializeDirectoryObject(writer, application)
            writer.writeCollectionOfObjectValuesFromMethod("addIns", application.addIns as any, serializeAddIn);
            writer.writeObjectValueFromMethod("api", application.api as any, serializeApiApplication);
            writer.writeStringValue("appId", application.appId);
            writer.writeStringValue("applicationTemplateId", application.applicationTemplateId);
            writer.writeCollectionOfObjectValuesFromMethod("appRoles", application.appRoles as any, serializeAppRole);
            writer.writeObjectValueFromMethod("certification", application.certification as any, serializeCertification);
            writer.writeDateValue("createdDateTime", application.createdDateTime);
            writer.writeObjectValueFromMethod("createdOnBehalfOf", application.createdOnBehalfOf as any, serializeDirectoryObject);
            writer.writeStringValue("defaultRedirectUri", application.defaultRedirectUri);
            writer.writeStringValue("description", application.description);
            writer.writeStringValue("disabledByMicrosoftStatus", application.disabledByMicrosoftStatus);
            writer.writeStringValue("displayName", application.displayName);
            writer.writeCollectionOfObjectValuesFromMethod("extensionProperties", application.extensionProperties as any, serializeExtensionProperty);
            writer.writeCollectionOfObjectValuesFromMethod("federatedIdentityCredentials", application.federatedIdentityCredentials as any, serializeFederatedIdentityCredential);
            writer.writeStringValue("groupMembershipClaims", application.groupMembershipClaims);
            writer.writeCollectionOfObjectValuesFromMethod("homeRealmDiscoveryPolicies", application.homeRealmDiscoveryPolicies as any, serializeHomeRealmDiscoveryPolicy);
            writer.writeCollectionOfPrimitiveValues<string>("identifierUris", application.identifierUris);
            writer.writeObjectValueFromMethod("info", application.info as any, serializeInformationalUrl);
            writer.writeBooleanValue("isDeviceOnlyAuthSupported", application.isDeviceOnlyAuthSupported);
            writer.writeBooleanValue("isFallbackPublicClient", application.isFallbackPublicClient);
            writer.writeCollectionOfObjectValuesFromMethod("keyCredentials", application.keyCredentials as any, serializeKeyCredential);
            writer.writeStringValue("logo", application.logo);
            writer.writeStringValue("notes", application.notes);
            writer.writeBooleanValue("oauth2RequirePostResponse", application.oauth2RequirePostResponse);
            writer.writeObjectValueFromMethod("optionalClaims", application.optionalClaims as any, serializeOptionalClaims);
            writer.writeCollectionOfObjectValuesFromMethod("owners", application.owners as any, serializeDirectoryObject);
            writer.writeObjectValueFromMethod("parentalControlSettings", application.parentalControlSettings as any, serializeParentalControlSettings);
            writer.writeCollectionOfObjectValuesFromMethod("passwordCredentials", application.passwordCredentials as any, serializePasswordCredential);
            writer.writeObjectValueFromMethod("publicClient", application.publicClient as any, serializePublicClientApplication);
            writer.writeStringValue("publisherDomain", application.publisherDomain);
            writer.writeCollectionOfObjectValuesFromMethod("requiredResourceAccess", application.requiredResourceAccess as any, serializeRequiredResourceAccess);
            writer.writeStringValue("samlMetadataUrl", application.samlMetadataUrl);
            writer.writeStringValue("serviceManagementReference", application.serviceManagementReference);
            writer.writeStringValue("signInAudience", application.signInAudience);
            writer.writeObjectValueFromMethod("spa", application.spa as any, serializeSpaApplication);
            writer.writeCollectionOfPrimitiveValues<string>("tags", application.tags);
            writer.writeStringValue("tokenEncryptionKeyId", application.tokenEncryptionKeyId);
            writer.writeCollectionOfObjectValuesFromMethod("tokenIssuancePolicies", application.tokenIssuancePolicies as any, serializeTokenIssuancePolicy);
            writer.writeCollectionOfObjectValuesFromMethod("tokenLifetimePolicies", application.tokenLifetimePolicies as any, serializeTokenLifetimePolicy);
            writer.writeObjectValueFromMethod("verifiedPublisher", application.verifiedPublisher as any, serializeVerifiedPublisher);
            writer.writeObjectValueFromMethod("web", application.web as any, serializeWebApplication);
}
